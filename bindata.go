// Code generated by go-bindata.
// sources:
// tmpl/model.html
// tmpl/x_helpers.html
// tmpl/x_helpers_test.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmplModelHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x57\x6d\x6f\xe3\x44\x10\xfe\xee\x5f\x31\x58\xe5\xb0\x7b\x39\xb7\x27\x21\x3e\x14\x05\x74\x34\xae\x88\xc8\x35\xbd\x26\x05\x21\x84\xee\x36\xf6\xb8\x59\x6a\xef\xa6\xbb\xeb\xa4\x95\xeb\xff\x8e\xf6\x25\xcd\x9b\x13\x5c\x71\x20\x88\x74\xa7\xd4\x99\x9d\xe7\x99\x67\xde\xbc\x55\x95\x62\x46\x19\x82\x5f\xf0\x14\x73\xbf\xae\xbd\x19\x49\xee\xc8\x2d\x42\x55\x41\x74\x65\xbf\x5f\x92\x02\xa1\xae\x3d\xef\xe4\xf8\xcd\xfe\xcf\x6b\xef\x09\xce\x79\x8a\x70\x8b\x0c\x05\x51\x98\xc2\xe4\x11\x8c\xdf\x5b\x64\xf0\xe4\x3d\x81\xfb\xf4\x86\x70\x39\x1c\x43\xdc\xeb\x8f\xa3\xe5\xb3\x27\xef\xf5\x01\xdf\xc7\x27\x9e\x77\x72\x02\xfd\x0c\x1e\x79\x09\x0b\xc2\x14\x28\x0e\xf8\xa0\x90\xa5\x30\xc1\x29\x99\x53\x5e\x8a\x33\x6d\x73\x95\x23\x91\x08\x89\x40\xa2\x10\x08\x24\xa5\x54\xbc\x80\x8c\xe6\x08\x94\x81\x9a\x52\x09\x29\x15\x98\x28\x2e\x1e\xf5\x01\xc2\xd2\xa5\xb5\x9a\x22\x14\xa8\xa6\x3c\x95\xfa\xbb\x40\x8d\x42\xe6\x9c\xa6\xc0\xe7\x28\x16\x82\x2a\xca\x6e\x35\x07\x01\x89\x0e\x75\x41\xd5\xd4\x9c\x5a\xc5\xcc\x19\x46\x9e\x47\x8b\x19\x17\x0a\x02\xcf\xcf\x0a\xe5\x7b\x7e\x4a\x14\x99\x10\x89\x27\xf2\x3e\xf7\x3d\x1d\x70\x55\x81\x20\xec\x16\xe1\xe8\xae\x03\x47\xf3\xb3\x2e\x44\xef\xb5\x56\x51\xdf\x1c\x95\x5a\x70\x6d\xe7\x57\xd5\xd1\x5d\x5d\x2f\x0f\xbd\x01\x1d\x72\x5d\x7b\xa1\x51\xa4\xaa\xdc\x29\x9d\xa3\xba\x06\x81\x33\x81\x12\x99\x92\x40\x40\xf0\x85\x0d\x19\x57\x76\x63\x32\xc9\xd1\x19\x2b\xfd\xdd\x53\x8f\x33\xdc\xf1\x23\x95\x28\x13\x05\xd5\x61\xaa\x17\x14\xf3\xf4\x99\xa9\x33\x3d\x9a\x47\xae\x60\xdc\x5f\x63\x0d\x50\xd7\xf0\xe9\x0f\xc9\xd9\x99\x8e\x67\x1e\x9d\xf3\xbc\x2c\x98\x05\xf3\x3f\x6d\xc7\xc6\xb3\x4c\xa2\x02\xca\x94\x97\xd3\x82\xda\x6f\xb5\x2d\x01\x26\x51\x28\x20\xc0\x70\xb1\x1b\x7d\xab\x80\xb3\x92\x25\x10\x54\x55\x74\x8d\x09\xd2\x39\x8a\xba\x86\xe3\x2d\x57\xa1\x03\x0a\xd2\x09\x1c\xcb\xfb\x3c\xea\xfd\x10\x42\x90\x13\xa9\xec\xf3\x7e\x4f\x73\xfa\xe6\xeb\x0e\xa0\x10\xfa\x1f\x17\xa1\x53\x2b\xe1\x4c\x2a\x90\xaa\x50\xd0\x05\xbf\x7f\x39\x8a\xaf\xc7\xd0\xbf\x1c\x0f\x9b\x39\x05\xcf\x4f\x9d\x9a\x4f\x40\x0d\xc4\xc7\xcc\xfc\xad\xb9\xfc\xfc\x6e\x70\x13\x8f\x0e\x98\xce\x49\x5e\xa2\x36\xb5\x65\x22\x50\x5a\x62\x67\x5d\x48\x27\x51\xfc\x80\x49\xa0\x09\x75\x4c\x57\xaf\x8e\x11\x71\xab\xb3\x17\x9a\x43\x34\x33\x47\xbe\xe8\x02\xa3\xb9\x8b\xc5\x3a\x53\xa5\x60\x70\x6a\x3c\x9a\xa7\xb5\xb7\xf6\x5c\xa0\x8c\x06\x2b\x5d\xd2\x20\x74\x99\xba\x99\xa5\xa6\x03\x19\xe0\x03\x95\xa6\x71\xfe\xc9\x7c\x59\xb8\xb5\x7c\x75\x80\xa6\x36\x49\xa1\x4d\x50\x63\x7e\x6e\xae\x7a\xef\xc6\x71\x33\xfc\x28\x1e\x2f\x05\x2b\x8d\x77\xa7\xb3\x2e\xe6\x5f\x7e\x8c\xaf\x63\x8d\xd0\x85\xef\xad\xe8\x1f\x0f\x4b\xee\x3c\x38\xc9\x41\xb3\x0b\xd7\x75\xd4\xe2\x2e\x85\x33\x25\x6e\x73\x24\xff\x56\xa9\x9f\x9c\xe8\xb4\x6a\xa3\x92\xd1\xfb\x12\x6d\xf0\x82\x50\x33\x20\x04\x02\xe3\x0a\x32\x5e\xb2\xb4\x03\x5c\x4f\xbc\x05\x95\x08\x54\x39\xb6\x12\xa8\x8a\x5a\xeb\xff\x7f\xec\x17\x18\x5e\x42\xef\xe6\x6a\xd0\x3f\xd7\x55\xf0\x53\xfc\x2b\x3c\x17\x84\xcb\xda\x9a\x3d\x2c\xc7\xf0\x7f\xa2\xbf\x2e\x28\x4b\xff\xb5\xee\xd2\x60\x2f\xee\xad\x51\x3c\x88\xcf\xc7\x70\x0c\x17\xd7\xc3\xf7\xcd\x1c\x76\xdb\x48\xb3\xb6\xb2\x7e\x28\x51\x3c\x5e\xf3\x85\x93\x76\xab\x5f\x04\x5f\x44\xa3\x84\xb0\xc0\x49\x2e\x13\xc2\x56\x25\xe0\x34\x1a\x70\x92\x02\xc9\xf3\x0e\x70\x01\x04\x64\x39\xd1\x7b\x85\x67\x4d\x5a\x49\xc8\x04\x2f\x3e\x8f\x5c\x1a\x77\xb3\x15\x34\xee\x6f\xbf\x6f\x19\x36\x74\x83\xd1\xee\xac\x95\x78\xbe\xb7\xac\xab\x0d\x3a\x91\x5d\x99\xdd\x2e\x9c\xc2\xab\x57\x5b\xbf\xb9\xcd\xfa\x1d\x9c\xee\x56\xa0\x44\xd5\x81\xac\x50\x51\xac\x09\x65\x81\x9f\x10\xa6\xe7\xc3\xbd\xce\x83\x7d\xd5\x71\xc7\x27\xa5\x02\xc6\xc1\x00\xf9\xa1\xab\xd9\x43\x64\x36\xf1\x4c\x8c\xaf\xbb\x06\x6b\x34\x13\x94\xa9\x2c\xf0\x61\xd0\x7f\xdf\x1f\xc3\x97\xa9\xdf\x69\x72\x11\xae\x75\xc6\x0e\x48\x63\x54\xcd\x28\xc3\x8b\x0b\x3d\xd6\x1b\x60\xac\x93\x75\x9c\x14\x33\x14\xa0\x33\x1e\x84\x6b\x8e\x1b\xd5\x86\xd3\x3d\xbf\x3b\x6e\x4b\x83\x3a\x08\x97\x65\xbe\x31\x43\x4c\xb1\x9b\x4a\x6f\x33\x2d\x76\x48\x6a\x77\xd1\x79\xce\x25\x3a\xff\xfa\x93\x71\xf7\xc3\x25\x3e\xa8\x8d\x10\xd6\x10\xba\xd6\xc4\xb5\xd2\x6e\x27\x7d\xdb\xcc\x63\x8b\xcb\x8a\x8f\x91\xde\x04\x4c\x66\x33\x64\x69\x60\xca\xea\x78\x43\x94\x8d\x92\x71\x5e\x6c\xc3\xf6\x30\xc7\x16\x2f\x0d\x9f\xaf\x53\x2d\xe0\x8b\x47\x5b\x2f\x1e\xc4\xe3\xf8\x45\x83\x6d\xdf\xfb\xc1\xde\xf7\x80\x73\x5e\xea\x7b\xce\x14\x81\x95\xc5\x04\x85\x9e\x5b\x2f\x9a\x53\x7f\x19\xbc\x41\xd8\x9c\x53\x89\x01\x6d\xb7\xab\xdd\x88\x3a\x1f\xde\x5c\x8e\x83\xe3\xf0\xd0\xa4\x3a\x30\xd9\x37\xea\xbd\xbb\x9a\xeb\xaf\x0c\x95\x7d\xf5\xb7\xd3\x07\x1b\x65\x14\xeb\xe2\x91\x90\x4c\x31\xb9\x93\xa6\x0f\xb4\x5c\x54\x61\x21\x6d\x61\x21\x4b\x70\xb9\x1c\x97\x77\xb3\x0e\xe8\xff\xf5\x0d\x0e\xa8\xfa\x4a\x02\x4d\x23\xed\xeb\x1d\x73\x75\xb0\xa0\x79\x0e\x9c\xe5\x8f\x30\x41\x07\x87\xa9\x26\x4e\x60\xf4\x61\x00\x02\x73\x73\x01\xcc\x08\xcd\x4b\x81\x30\x35\xf5\x2f\x23\x7b\x6b\xd1\x5b\xc8\xbe\x62\x41\x42\xa4\x7e\x7f\x20\x30\xe1\x3c\x37\xd7\x4f\x1d\x9a\xf1\x6e\xbd\x46\xed\xb2\x67\x83\xdc\x53\xba\x01\x5a\x09\x34\x46\xdb\x44\xda\x23\xc1\xdb\x96\x65\xed\x26\xf6\x5b\x77\xe9\x98\x13\x01\xd4\xdc\xd4\x5a\xad\xf1\x86\x84\xd3\xd6\xc9\xa6\x19\xd0\xe6\x25\xa6\x44\x89\x1d\x7d\x7c\xf7\x4d\x2a\x23\xb9\x74\xbf\xd9\x2a\x79\x0e\xcc\x59\x98\x4b\xbf\xed\x1f\x60\xa4\x68\x3b\x42\x9e\xdd\x04\xa1\xbe\x37\x9b\x99\xe5\x39\x4c\xbf\xb9\x1d\x2c\xfe\x08\xd5\xc0\x6c\x0f\x89\xca\x62\xdb\x55\x6b\x56\x4a\x4b\xf0\xa5\x8f\xe0\xf9\xa2\x1c\xee\x58\x41\xe5\x35\xef\x2c\x0b\xe4\xa8\x6e\x98\xac\x18\x0e\xed\xfe\xda\xa2\x68\xb7\x5a\x7b\x8e\xd6\x4b\xb0\xba\xd8\xb7\x60\xf9\xbc\x39\x1d\xd8\x1e\x9e\x55\x85\x2c\xad\x6b\xcf\xfb\x33\x00\x00\xff\xff\xb4\xec\x7a\x47\xcd\x12\x00\x00")

func tmplModelHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplModelHtml,
		"tmpl/model.html",
	)
}

func tmplModelHtml() (*asset, error) {
	bytes, err := tmplModelHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/model.html", size: 4813, mode: os.FileMode(420), modTime: time.Unix(1513870620, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplX_helpersHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x58\x5b\x8f\xdb\x36\x13\x7d\xe7\xaf\x98\xe8\xe1\x83\xe4\x38\x52\x3e\x24\x29\x50\x17\x7e\xc9\x0d\xdd\xa2\xd9\x4d\xb3\x6e\x5e\x8a\x02\xa1\x2d\xca\xcb\x54\xa2\x1c\x92\xde\xc5\xc2\xeb\xff\x5e\xf0\x26\x52\xb2\x2d\xd9\x7b\xe9\x3e\x78\x6d\x6a\xe6\xf0\xcc\xf0\x0c\xc5\xe1\x66\x93\x93\x82\x32\x02\xd1\x15\x29\x57\x84\x8b\x68\xbb\x45\x2b\xbc\xf8\x07\x2f\x09\x6c\x36\x90\x7e\x36\xdf\xcf\x71\x45\x60\xbb\x45\x28\x1b\xbd\x38\xfc\xf7\x1c\xdd\xc1\xbb\x3a\x27\xb0\x24\x8c\x70\x2c\x49\x0e\xf3\x5b\xa8\xea\x9c\x94\x4b\xc2\xe0\x0e\xdd\x81\xfd\x7b\x7f\x01\xe7\x17\x33\xf8\xf0\xfe\x6c\x96\xba\xb1\x3b\xf4\xbc\x07\x7b\x94\x21\x44\xab\x55\xcd\x25\xc4\x28\xca\xb1\xc4\x73\x2c\x48\x26\x7e\x94\x51\xfb\x67\x96\x73\x7a\x4d\x78\x84\x22\xc2\x16\x75\x4e\xd9\x32\xfb\x2e\x6a\x16\xa1\x88\x93\xa2\x24\x0b\x19\xa1\x48\x48\x4e\xd9\x52\x44\x28\x92\xb4\x22\x11\x42\xd1\x92\xca\xab\xf5\x3c\x5d\xd4\x55\xb6\xac\x5f\x88\x1f\xe5\x0b\x03\x93\x55\xb7\x7a\x8a\x04\xa1\x2c\x83\x4b\x99\xcf\x68\x45\x60\xc5\xeb\x6b\x9a\x13\x01\x39\x29\xf0\xba\x94\x70\xf9\xc7\xef\x30\x3b\xfb\xf4\x01\x8a\x9a\x57\x58\xa2\x45\xcd\x84\x6c\xcc\xa7\x10\xfd\xff\xcd\xe4\xe5\xeb\xc9\xcb\x37\x91\xc6\x21\xd5\x4a\xde\xea\x47\xb8\x2c\xeb\x1b\x8f\xa3\xe8\x08\x90\x35\xcc\x09\x28\x0c\x9a\x13\x4e\x72\xe5\xc2\xd6\x65\xa9\xd0\x81\x32\x41\xb8\xa4\x35\x03\xca\x64\x0d\xf2\x8a\x80\x0b\x3f\x45\xd7\x98\x07\xe0\x53\x8d\x97\xaa\xef\x9b\xdd\xb5\x53\xab\x35\xbb\x5d\x29\x0e\x14\x0b\x22\x76\x16\x40\xa5\x3c\xcb\xe0\x7c\x5d\x96\x1f\xcb\x1a\xcb\x9f\x5e\x37\xa6\xe2\x47\x99\x06\xe3\x48\x2a\x9c\xd0\xb0\x6b\xe0\x80\x2e\x75\xe6\x77\x70\xcc\xb0\x87\xb1\x66\x9d\xc7\x0e\xe4\x6d\x5d\x97\x3b\x10\x6a\xd0\x03\x68\x93\xd6\x23\xe7\x7c\xc6\xf6\x05\xa2\x47\xbd\xbb\x31\x6a\x3f\x74\x00\x76\xdd\xda\xfe\x6a\xd0\xbb\x6b\x13\xad\x1c\xff\x50\xb9\x7f\xc1\x37\xbf\x5d\x5e\x9c\x37\xde\x4a\x98\xe9\x17\x7c\xf3\x89\x08\x81\x97\x16\xc0\x19\x75\x1f\x0e\xd7\x5e\x90\x39\x5a\xad\x4a\x52\x11\x26\xb1\x92\xca\xee\xda\xee\x16\x57\x96\xc1\x27\xcc\xc5\x15\x2e\xf5\xec\x4a\x6a\x41\xea\x8b\x35\x5b\x40\xcc\x82\xa1\x24\x34\x8f\x13\x88\xff\xfa\x7b\x7e\x2b\xc9\x18\x08\xe7\x35\x4f\x60\xa3\xc5\x88\x61\x64\x8a\x0d\xd1\x02\x58\xfa\x15\x97\x34\x87\x0d\xc2\x30\x85\xff\xb1\xd4\x82\x6f\x11\x27\x72\xcd\x99\x09\xd9\xc2\xc6\x38\x41\x5b\x4d\xeb\x4f\x56\x0d\x13\x1b\x85\xcc\x5a\x1e\xf1\x1c\x0c\xb5\xc4\x50\x83\x0d\x22\x9c\xc3\x64\x6a\xa6\x6b\x6c\xe3\xf9\xd8\x73\x4a\x90\x23\x3b\x55\x5e\x30\x9d\x02\xa3\xa5\xe3\x49\x38\xb7\xdc\xbe\xe2\x72\x4d\x8e\x49\x96\x36\x54\x69\x32\xfb\x4a\xaa\x7f\x07\xc9\xa2\x05\x3c\xf3\xf9\xb1\xf3\x30\x5a\x8e\xf5\xbc\x4d\x86\x1c\x3f\x37\xac\x77\xa5\x05\x66\x47\xa5\x45\x19\xc6\x82\x2f\xd4\xce\x41\x78\x81\x17\x64\xb3\xf5\x49\x31\xcb\xd5\x29\x39\x5a\x80\x4d\x16\x4e\x9d\x7b\xf2\x8b\x1e\x7b\xa6\x53\xe2\xc9\x9a\xa4\x38\x82\xa0\x3d\x1a\x10\xbb\xf7\xa6\x6a\xc3\xb9\x28\x34\x8a\x07\xf0\xa9\x96\x7c\x4d\x82\x60\x6d\x88\x7d\xba\x6f\x84\xef\x76\x9e\xd3\x94\xdf\x27\x7d\xb7\x77\x85\xcb\x69\xc7\x8e\x16\x7f\x61\x31\xf6\xa9\xdf\xe1\x0f\xc8\xbf\x2d\xb1\x5e\x52\x8f\x26\x32\x8b\x18\xaa\x6c\x7f\x15\x76\xe9\x8c\x5a\x7c\x1e\x52\x87\x0e\xe4\xc8\x42\x6c\x15\x41\x3f\xab\x53\xca\xe0\xa3\x5f\xbf\x53\xeb\xc0\x09\x52\xb9\x04\x30\x4f\x55\x09\xae\x0e\xcc\xab\xeb\xa4\x2a\xe8\xa9\x01\xf3\xea\x0b\xc5\xa6\x47\x8e\xd6\x3f\x65\x87\xd4\x6f\x90\x4f\xd2\xfe\x41\x32\x8f\xa6\x7b\x8d\x37\xac\xfa\x36\x91\x51\xc0\xe4\x21\x8a\x37\x10\xf7\xd1\xfb\x61\x3e\xa7\x68\xfd\x8c\xdd\x53\xe9\x46\x72\xca\xa1\x81\x78\x22\x95\x3b\x91\xeb\xe3\xdd\x29\x1a\xef\x91\xb8\x3e\x1d\x86\xa2\x52\x03\x47\x0b\x7c\xae\xbc\xf7\xe9\x5b\xc3\x9e\x24\xef\x03\x44\x1e\x4d\xdc\x0a\x6e\x58\xdb\x2d\x16\x23\x4f\xe3\x21\xca\xd6\x08\xf7\x11\xf6\x21\x32\xa7\xc8\xfa\xad\x5d\xa1\x53\x55\xad\x35\xa6\xec\x1d\xc0\x13\x6b\x5a\x37\x0d\x8f\xa4\x69\xdd\x71\x84\x52\x52\x03\x47\x6b\xba\xe9\x1a\xf7\x0a\x5b\x3f\x38\x49\xd8\x07\xd8\x3c\x9a\xb0\x15\xdc\xb0\xb0\x5b\x2c\x46\x9e\xc6\x90\xb0\x85\x52\x8d\x69\x62\xe2\x79\x82\x04\xb8\x5f\x22\x9d\x71\x5a\xc5\x62\x0c\xdf\xa2\x6f\x09\x92\xb4\x1a\x3b\x91\xe9\x0c\x7e\xc6\x5c\x90\x58\x7f\xfd\xf2\xf1\xdd\xab\x57\xaf\x7e\x1e\x83\x48\x9c\x14\xf7\x28\xa7\xc0\xa5\x20\x9d\x8a\x30\xd1\x99\x56\xbe\x2b\xb2\x8e\xc4\x3a\xb5\x73\x28\xde\x63\x6a\xa7\xd3\xbb\xde\xa3\x7a\x2c\x6b\xdc\xe8\xe8\x69\xaa\x47\x15\x8f\x6b\x98\x4f\xa8\x9d\xe3\x1b\x5e\x0b\x3e\x5c\x3b\xb8\xd9\xfd\x7c\xcf\x1e\xb3\xc4\x45\x82\xd3\x16\xc0\x31\xed\x63\x33\xf5\x50\xa1\xd8\x29\xac\x46\x59\x32\x5c\x0b\xdd\x2e\xb1\x99\x6a\xa8\x18\x8c\x3c\xba\x57\x13\x7b\x36\x7d\x9c\xa0\x85\xca\x88\x45\x56\x5b\xc3\x88\xc1\x14\x16\x03\xaa\x3d\xc8\xec\xbf\x68\x5e\xbf\x0b\x16\x72\x36\xc1\xc7\xae\x8f\x4d\x6c\x08\xdf\x05\x1b\xd6\xa7\x12\xe6\xaf\xfa\x4e\x15\x54\x2c\x87\x15\x69\xa5\x38\xab\x83\xdb\x1b\x83\x2e\x00\x03\x23\x37\x3b\x69\x09\x4d\x63\xe1\x2e\x58\x92\xf0\xfa\x47\x6f\x9e\xc2\xbe\x63\x7d\x94\xa1\x5f\x2b\x55\x1b\x5d\x7e\x13\xb3\x03\x6d\x13\x5f\x80\x87\x3d\xcc\xbf\x09\x8c\xc4\x18\xac\xb7\xaa\xdd\xad\x93\xb6\x61\x69\x8e\x86\xbb\xf1\x04\x27\xd6\xc0\x30\xa6\xb6\x63\x48\x82\x56\x46\xc7\x42\xf7\xc6\x62\x9c\x5a\xe7\xd7\xde\x48\xf6\xd9\xeb\xcf\x09\x8c\x68\x5f\x18\xae\x97\xdb\x0d\xa4\xd5\x6a\xb6\x8c\x55\x30\x85\xeb\x39\x43\x90\x9e\x80\x9c\x6b\xa7\xfd\xec\x0d\xea\x90\x8f\xfd\x3f\x14\x9a\x3e\xe6\x2c\x38\xc1\x92\x84\x71\xf9\x93\x97\x37\x8b\xe7\xe6\xbc\x9b\xf8\x33\xb8\x8e\x65\xbe\x37\x16\xed\x11\x1e\xc2\x7a\xa3\xd8\xb5\x56\x1f\x13\x18\xcd\xfb\xc8\xeb\xb7\xcc\x2e\x79\xff\xea\xf3\x66\xb1\xf4\xb7\xe1\x89\x3f\x70\xe9\x00\xa4\x0a\xc0\xdf\x9b\xb7\xc2\xd0\xbe\xed\xf7\x61\x6f\x20\xfb\xec\xd5\xc7\x04\xe4\x6e\x24\x9b\x0d\x61\xf9\x76\x8b\xfe\x0d\x00\x00\xff\xff\x3d\x55\xcc\xe2\x88\x19\x00\x00")

func tmplX_helpersHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplX_helpersHtml,
		"tmpl/x_helpers.html",
	)
}

func tmplX_helpersHtml() (*asset, error) {
	bytes, err := tmplX_helpersHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/x_helpers.html", size: 6536, mode: os.FileMode(420), modTime: time.Unix(1512142211, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplX_helpers_testHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x7d\x6f\xdb\x36\x1a\xff\x9f\x9f\x82\x21\xb0\xc0\xca\x54\xc5\x56\x8a\x3b\x40\xbb\x1c\xb0\x36\x29\xb0\x03\x9a\x1e\x56\x6f\x7f\xdc\x30\x2c\x92\x4d\xa7\xba\xe9\x25\x95\xe8\xe4\x02\x57\xdf\xfd\xc0\x87\xd4\x0b\x25\xca\x8e\x64\x2e\x71\x80\x14\x41\xea\x50\x0f\x9f\xd7\x1f\x1f\xfe\x64\x51\x9b\xcd\x92\xae\xc2\x84\x62\xf2\x85\x46\xb7\x34\xcb\x19\xcd\x19\x29\x0a\x74\xeb\x2f\xfe\xf4\x6f\x28\xde\x6c\xb0\xf3\x6f\xf1\xf9\xca\x8f\x29\x2e\x0a\x74\x7a\xf2\xa6\xff\xdf\xf7\xe8\x1b\x7e\x9f\x2e\x29\xbe\xa1\x09\xcd\x7c\x46\x97\x38\x78\xc0\x71\xba\xa4\xd1\x0d\x4d\xf0\x37\xf4\x0d\xcb\x7f\x17\x9f\xf0\xd5\xa7\x39\xbe\xbc\xf8\x69\xee\x94\x63\xdf\xd0\xf7\x5b\x74\x9f\x9c\x22\x14\xc6\xb7\x69\xc6\xf0\x04\x91\xa5\xcf\xfc\xc0\xcf\xe9\x69\xfe\x35\x3a\x5d\x66\xe1\x1d\xcd\x08\x22\x34\x59\xa4\xcb\x30\xb9\x39\xfd\x6f\x9e\x26\x04\x91\x8c\xae\x22\xba\x60\x04\x11\x1e\x59\x98\xdc\xf0\x4f\x61\x4c\x09\xb2\x10\x5a\xad\x93\x05\x9e\xd3\x9c\x7d\x66\xd9\x7a\xc1\x2e\xe3\x80\x2e\xf9\xe4\x09\xc3\x27\x52\xdc\x99\x5b\x78\x83\x58\x18\x63\xef\x1c\xf3\x89\xce\x85\xcf\xe8\xc4\x9d\xce\xfe\x6e\xe3\x19\xfc\x4c\x1b\x3f\x20\xf1\xcb\xfc\xbd\x85\xe8\xff\x6e\xe9\x82\x87\xef\x9d\xe3\xdf\x7e\x0f\x1e\x18\x9d\x5c\x6f\x88\x4f\xbc\x99\x7b\x66\x93\x80\x78\x2c\x5b\x53\x9b\x2c\x60\xc0\x81\xc1\x25\xf1\x48\xce\x32\xee\xa4\x4d\x28\xf1\x08\xb7\xf2\x66\x3a\x7b\x33\x9d\xcd\xa7\x53\x0f\x7e\xfe\x43\x6c\xb2\x22\xde\x6f\x33\xdb\xb5\xcf\x7e\x2f\xae\x2d\xc4\x1e\x6e\x29\xa6\xdc\x75\x9c\x43\x18\x78\x83\x7e\xc4\x57\xeb\x28\xfa\x29\x61\x7f\x7b\x8b\x31\xbe\xe6\xb9\xf0\x88\x6f\xa7\x71\xc8\x68\x7c\xcb\x1e\xc8\x35\x7a\x07\x22\xef\xd2\x34\xc2\xb5\x48\xa0\x88\xbc\x07\x91\x0f\x51\xea\x73\x3d\x52\x64\xa1\x88\x5c\x80\xc8\x67\x70\xba\xd2\xb2\x54\x44\x2e\x41\x64\x1e\xc6\xb4\x61\x88\x2a\x22\x1f\xf0\xcf\xfe\xfd\xbf\x3e\x7f\xba\xc2\x0d\x91\x95\x22\x52\x20\x0a\x25\x80\x40\x37\xe8\x47\xaf\x8e\x70\xf3\xab\x1f\x85\x4b\x0f\x43\x42\x31\x0c\x79\x78\xe6\x9e\x15\x36\x7a\xe7\x55\x51\xaa\x52\x7c\x44\x7c\x2e\x6c\xf4\xde\x6b\x06\xaa\x0a\xca\x41\x50\xe8\x08\xa5\x17\x5e\x23\x68\x55\x5a\x8c\x79\xb8\x2c\x63\x61\xa3\x4b\xaf\x8a\x5f\x95\xe5\x23\x1e\x07\x4c\x61\xa3\x0f\x5e\x99\x81\xc9\xb5\x2c\xed\xb5\x65\xa3\x02\x05\x36\xa6\x59\xc6\x03\xe7\x49\x71\x3e\xfa\x59\xfe\xc5\x8f\x26\x34\xb6\x50\xb8\x82\x4b\x47\xe7\x38\x09\x23\x8e\x51\xe7\x83\xcf\xf8\xb5\x2c\xb3\x50\xc1\x2f\x1f\x49\xf0\x3b\x17\x94\xde\x5e\x7e\x5d\xf3\x8b\x12\x95\x36\x0e\xac\xc6\x1c\x92\xa4\x0c\xb3\x2f\x14\xe7\x7c\x8d\x73\x3f\x8e\x48\xa9\x64\x22\x62\x99\x04\x16\x3e\x3f\xc7\xf2\x8f\x52\x8f\xd5\xab\x45\x28\x40\x77\x7e\x86\x69\xec\x8a\xba\x95\x3e\x97\xe1\xfc\x92\xc4\x65\x40\x95\x5f\xc7\x34\x76\xad\x1f\xc6\x84\x16\xbb\x36\xa6\x71\xc7\xa1\x45\x9a\x65\xbc\x03\xf0\x99\x45\x63\xcd\xd7\x35\xfc\xa3\xf2\x03\x2a\xd0\x59\xfc\x34\x67\xb9\x58\xc6\xd5\x02\x4b\x7c\x01\x67\x91\x0e\x94\xc8\xfe\x55\xeb\x44\x79\xba\xce\x16\x14\xcb\xb5\x8f\xee\xfd\x84\x5d\x66\x19\x0e\xd2\x34\x42\xc5\x06\x09\x15\x1e\x9f\x44\xee\x38\x2c\x88\x2d\xa7\x78\xb8\xea\x17\xbc\x29\x47\x29\xe1\x50\x90\xf3\x3d\xbc\xf2\xa3\x9c\xda\xa8\xb0\x15\x15\x61\xd2\xab\x64\x43\xfe\xa4\x0f\xc4\xe3\x56\xd6\x94\x14\x8a\x32\x40\x62\x5b\x97\x58\x72\x1d\x4d\x9b\x42\x37\xb1\x40\xab\x34\xc3\x7f\xd8\x98\x31\x9e\xa2\xcc\x4f\x6e\x28\x16\x19\xe3\x75\xf8\x79\x9d\x4c\x18\x73\xb8\x72\x1b\xf3\xd4\x77\xb2\x5b\x43\x82\xcb\x39\xad\x52\x30\x47\x78\x61\xfd\x80\x27\x35\x24\x2c\xfe\x3f\x63\x4e\x99\x54\x6e\xe9\x32\xcb\xd2\x6c\x35\x21\x75\x09\x5a\xba\x2c\x6e\x27\xcd\xf0\x39\xfe\xee\xce\xc6\xe5\xd4\xef\xee\x08\x2c\x31\xbb\xa1\x0f\x90\xb2\x05\x2e\xbf\xf2\x4c\x1a\x82\x09\x37\xc9\x87\xc4\x06\xe6\x80\xea\x5e\xb0\x54\x48\x49\x94\x16\x84\x64\x5f\x91\x55\xa9\x9a\x90\x40\x0f\x94\x89\x6b\xf4\xda\x76\x26\x52\x62\x3b\xbc\x1a\xd8\xd2\x9b\xad\xa7\x54\x56\x92\x30\xd2\xea\xdc\x1b\x2d\x37\x29\xb3\x15\xbc\x88\x40\xa0\x1b\x0e\x07\x88\x9c\x3c\x00\x18\x19\x65\xeb\x2c\xe9\xed\x41\xe0\x9e\x94\xb7\x76\x59\xad\xed\x09\x63\xca\xe4\x1d\x10\xfc\xbc\xf0\x93\x7d\x10\x78\xd2\x82\x60\x85\xb6\x3c\x5b\x80\x40\x98\x30\x9a\xad\xfc\x05\xdd\x14\x7d\x08\x3c\x6e\x62\xa1\x03\x3a\x15\x93\x85\xcd\x35\x03\x36\x30\x21\xdb\xf1\xc6\x7b\xbe\x68\x56\x03\xcc\xd4\x7a\x2a\x3b\x7f\x19\x08\x5b\x2d\x4b\xd4\x82\x39\x79\xb6\x18\xd5\xa6\x60\xfe\xb0\xee\x14\xae\x2a\xf4\x87\x4b\xbe\x2d\x43\x74\xf8\xf8\x18\x0b\x3f\x9a\x5b\x67\x69\x31\xff\x92\xae\xa3\x25\x16\x08\xc6\xc9\x3a\x8a\x48\x57\x95\xa2\x41\x44\x27\xb8\x5d\x53\x93\x6c\x08\xb2\x48\xbb\xa0\xfa\xd1\xcc\xd6\xda\x46\x2c\x1f\xdb\xb1\xb7\xee\x01\xd6\xaa\x93\x0d\xdb\x8a\x85\x45\x91\xdc\x2d\x66\xb5\xb8\xed\x98\xe4\x5a\x76\xd9\x53\x7a\xf3\xb1\xa6\x39\x6f\x89\xa8\x2f\x18\xf3\x4d\xba\x09\x81\x91\xad\xfa\xe3\xc8\x9d\xdc\x44\xc3\x56\x6d\x8f\x6a\xdb\xfc\x7e\xc3\x2c\xcd\x7c\x07\xdd\xda\x00\xc9\x84\xc2\xbf\x52\xcc\x81\x14\x93\xa7\xdf\x3c\xc1\x04\x98\x18\xa1\x97\x00\x8f\xbd\xc8\x25\xdc\x34\xab\x6d\x44\xdc\x35\x6b\x7a\x8a\xc2\x2a\xf9\xe5\xa1\x94\x52\x31\xf6\x02\x09\x25\xc0\xe1\x89\xe9\xa4\x62\x73\x7c\x57\x32\x42\x25\x2b\xb8\x8d\x26\x92\x02\x01\x0a\xc2\xda\x5b\x58\xc5\xec\xc4\xc8\x50\x0e\xd9\x6f\x41\x43\x1e\xe5\xd0\x21\xd3\x47\xa8\xff\x61\x93\x47\xf8\x7a\x71\x04\x75\x04\x60\x9a\x24\x8e\x4a\x3b\x1c\x4a\x1b\x35\x9d\x50\x47\xa8\x1e\xb3\x91\xea\x09\xe2\xae\xee\xb7\x1f\x23\x34\xe0\xfe\x61\x51\x42\x00\xfe\xb3\x10\x42\x8d\xe5\x51\x8d\x77\x1e\xc6\xd4\x2c\x1d\xe4\x1a\xcd\x7c\xe7\x08\x0f\x1d\x66\xb3\x37\xee\xdb\xc6\x43\x87\x57\x7e\x78\x10\xfc\x10\x70\xd3\xc3\x0f\x1b\x8f\xa8\xae\xd2\xfb\x89\x35\x0a\x41\x7b\x31\x46\x78\xc6\xa1\x36\x1a\xf1\x90\x83\x7b\xb5\x8d\x30\x86\xf1\x50\xbe\xa8\x98\x7a\x81\x7c\x91\xfb\xff\xd4\x7c\x51\xb1\x39\xbe\x6d\xe9\xf9\xe2\x3e\xe8\x3b\x51\xe0\x37\x9a\x41\x0a\x4c\x34\x11\xd7\x4f\x20\xf9\xd5\xa1\xfc\xb1\x57\xbf\x86\x3e\xd6\x89\x38\x6c\x0e\x09\x98\x38\x6c\x0e\x09\x4f\x8e\x47\x70\x48\x00\xab\x49\x0e\xa9\x34\xc8\xa1\x1c\xb2\x0d\x1e\xf5\x1c\xc1\xcc\xc6\xee\xdb\x9e\x93\x04\x5d\x18\x77\xbf\xca\x1b\xb3\x67\xeb\xa9\xe8\xae\xc6\xba\x1f\x15\xd5\xec\x10\xda\x78\xa6\x53\x38\xf5\xa0\x1e\x7c\x78\x11\xdc\x14\x16\xd4\xb3\x70\x53\x8d\xe5\x51\x4d\x1e\x0e\x50\x98\x25\xa7\xa0\xd2\x08\x3b\x9d\xb9\x67\xaf\x54\x74\x20\x15\x85\xec\x9b\xe7\xa2\x02\x27\x46\xbe\xac\x14\xf8\xd8\x8b\x7b\x8a\x93\x40\x6a\x6b\xa9\x8f\x02\x6d\x21\x9f\x21\x17\x9a\xcc\xdc\x33\x6b\x28\x07\x55\x4d\xbe\x40\x12\x2a\x80\xf1\xc4\x2c\x54\x35\xba\x47\x87\x32\xf2\xbd\x65\x8d\xbc\xd1\xb4\x53\xc2\xa0\x09\xb6\x5e\xde\x59\x83\x6d\x38\xfd\xec\x83\xdb\x63\x95\x1f\x0c\xe7\x14\x08\x38\x6c\xd2\x29\x8e\x4e\x8e\x60\x9d\x02\x9b\x26\x69\xa7\xda\x1c\x87\xf2\xce\x47\xa0\xb3\x43\xbf\x76\x6f\xb2\x7a\xee\xb8\xb3\x21\xee\x47\x1e\x75\x2d\x5e\xa7\x7d\xfa\x22\x88\xa2\x58\x05\xcf\xc2\x14\x75\xa6\x1f\xd9\x88\x15\xac\xcb\xb3\xb1\x66\xb9\xa2\x54\x6a\x8a\x2d\x3a\xaf\x8c\x71\x38\x63\x94\x35\x30\xcf\x19\x4b\xc4\x18\x61\x8d\x25\x52\xf6\xe2\x8d\xe5\xa1\xef\xea\x40\x8e\x2c\x4d\xfb\xdc\xf7\x16\x06\xb9\x12\xa2\x13\x29\x39\x98\x47\xb6\x5d\x78\x81\x4c\xb2\x04\xcc\x13\x73\xc9\xb6\xd9\x51\x6c\xb2\xc4\xa4\x11\x3e\xd9\xc4\xe4\x68\x46\x59\x01\xa2\x0b\xc2\x16\x4a\x95\x27\xd6\x35\x0c\x47\xb0\xcb\x7e\x10\xea\x0c\x38\x87\xcf\x32\x4b\x6c\x1c\x36\xcf\x2c\x5f\xae\x19\xc1\x34\x4b\xdc\x9a\xe4\x9a\xed\x96\x3a\x94\x6d\x0e\x42\xae\x8e\x77\x3e\x62\xbb\xd6\x73\xcf\x47\x34\xd1\xfd\xd8\x67\xdb\xc0\x4b\xe7\x9f\xe5\xfa\x78\x16\x06\xaa\x37\x3e\xb8\x7d\xcf\xd3\xf2\x51\x6b\x27\x57\x01\x24\x29\x5b\x53\x14\xc0\xc7\x86\xe8\x71\x00\xb9\x3a\x0a\x02\xb9\x2c\x9b\xde\x55\xaf\xed\x41\xfd\xc1\x07\xe1\x4c\x29\x5d\xbe\x80\x14\x04\xdd\xd3\x2d\xd5\x64\xf1\x86\x57\x73\x2e\x97\xad\x5e\x88\x0a\x5c\x7c\x02\x6b\x29\x08\xdc\x96\x73\x81\x0b\xce\x05\x81\xbb\xcd\xb9\x24\x65\x1a\x07\x5d\xc5\x43\xfe\x77\xbf\x87\x02\x96\xea\xec\xd2\xc7\xa2\x9d\x61\xb8\x61\xd0\xa7\xb8\xfe\xd2\x41\x49\xb4\x98\x61\x24\xd3\x41\x20\xef\xc6\x8f\xce\x79\x37\xd1\xeb\xe0\x2d\x46\xd1\x00\x53\x94\x84\x83\xa7\x6a\xc6\x85\x97\x66\x53\x5e\xf9\x3a\xd5\xeb\x99\xb6\xe6\x57\x8e\x76\x81\x2d\x57\x89\x3e\xf1\xed\xdd\x58\x49\x7f\x39\xd3\x54\x01\xca\x6d\x4a\x94\xc0\xd9\x56\x06\xa7\x53\x0a\x39\x59\x29\x86\xf4\x5e\x2d\x47\xe9\xb5\xd9\x82\x34\x7c\x7f\x64\x49\x1a\x0e\x77\x96\x82\x38\x12\xae\x2f\x09\xf9\x7a\x4f\x89\x52\x07\x29\x6d\xaa\x0c\xf2\x5d\x8c\x23\x69\x4a\xaf\xe6\xeb\x7d\xab\xf5\x88\x59\x4a\xfa\xe5\xde\xaf\x64\x5f\xfa\x6a\x36\xf9\x0d\x8f\x7b\xdc\xfd\x07\xdc\x2e\x4b\x36\xf2\xcf\x96\xba\xd2\x75\xbe\xbd\x16\x8d\xdf\xad\xa2\xcc\xc3\xb8\x7b\x37\x29\x1f\xc3\xb7\x8e\x25\xf0\xd1\x66\x85\xc4\xd4\x30\x16\x57\x5a\x45\x02\x15\x43\x0a\x55\x7b\x28\x0a\x06\xcf\xae\x8f\xc0\x81\x7e\x75\x7c\xd3\xab\x74\xb1\x30\xb6\xcb\x99\xa5\xbe\x2a\x14\x19\x09\x3c\x45\x2d\xca\x50\x7a\x23\xd9\x1d\x88\x64\x39\xe6\x42\x51\xb1\xa7\x8b\x45\xfc\xde\x6c\x68\xb2\x2c\x0a\xf4\xff\x00\x00\x00\xff\xff\x2b\x74\xdd\x7a\x7f\x40\x00\x00")

func tmplX_helpers_testHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplX_helpers_testHtml,
		"tmpl/x_helpers_test.html",
	)
}

func tmplX_helpers_testHtml() (*asset, error) {
	bytes, err := tmplX_helpers_testHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/x_helpers_test.html", size: 16511, mode: os.FileMode(420), modTime: time.Unix(1513855505, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmpl/model.html": tmplModelHtml,
	"tmpl/x_helpers.html": tmplX_helpersHtml,
	"tmpl/x_helpers_test.html": tmplX_helpers_testHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tmpl": &bintree{nil, map[string]*bintree{
		"model.html": &bintree{tmplModelHtml, map[string]*bintree{}},
		"x_helpers.html": &bintree{tmplX_helpersHtml, map[string]*bintree{}},
		"x_helpers_test.html": &bintree{tmplX_helpers_testHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

