// Code generated by go-bindata.
// sources:
// tmpl/model.html
// tmpl/x_helpers.html
// tmpl/x_helpers_test.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmplModelHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x57\x5f\x6f\xea\xc6\x13\x7d\xf7\xa7\x98\x9f\x95\x5f\x64\x13\xae\x93\x87\xaa\x0f\xa9\x68\x75\x0b\x8e\x8a\x44\x20\x0d\x4e\xfb\x50\x55\xf7\x2e\xf6\x18\xdc\xd8\xbb\x64\x77\x0d\x89\x1c\x7f\xf7\x6a\xff\xf0\xdf\x50\x22\xdd\x16\x29\x92\x59\xcf\xce\x39\x73\x76\xe6\xb0\xa9\xaa\x04\xd3\x8c\x22\xb8\x05\x4b\x30\x77\xeb\xda\x99\x93\xf8\x99\x4c\x11\xaa\x0a\x82\x07\xf3\x3c\x24\x05\x42\x5d\x3b\xce\x75\xeb\xd3\xf1\xcf\x95\xf3\x0e\x5d\x96\x20\x4c\x91\x22\x27\x12\x13\x98\xbc\x81\xce\x3b\x45\x0a\xef\xce\x3b\xd8\x4f\x6f\x04\xc3\x51\x04\x61\xaf\x1f\x05\xab\xb5\x77\xe7\xea\x44\xee\xd6\xb5\xe3\x5c\x5f\x43\x3f\x85\x37\x56\xc2\x92\x50\x09\x92\x01\xbe\x4a\xa4\x09\x4c\x70\x46\x16\x19\x2b\xf9\xad\x8a\x79\xc8\x91\x08\x84\x98\x23\x91\x08\x04\xe2\x52\x48\x56\x40\x9a\xe5\x08\x19\x05\x39\xcb\x04\x24\x19\xc7\x58\x32\xfe\xa6\x36\x10\x9a\xac\xa2\xe5\x0c\xa1\x40\x39\x63\x89\x50\xcf\x1c\x15\x0a\x59\xb0\x2c\x01\xb6\x40\xbe\xe4\x99\xcc\xe8\x54\x71\xe0\x10\xab\x52\x97\x99\x9c\xe9\x5d\x9b\x9a\x19\xc5\xc0\x71\xb2\x62\xce\xb8\x04\xcf\x71\xd3\x42\xba\x8e\x9b\x10\x49\x26\x44\xe0\xb5\x78\xc9\x5d\x47\x15\x5c\x55\xc0\x09\x9d\x22\x5c\x3c\xb7\xe1\x62\x71\xdb\x81\xe0\x5e\x69\x15\xf4\xf5\x56\xa1\x04\x57\x71\x6e\x55\x5d\x3c\xd7\xf5\x6a\xd3\x27\x50\x25\xd7\xb5\xe3\x6b\x45\xaa\xca\xee\x52\x67\x54\xd7\xc0\x71\xce\x51\x20\x95\x02\x08\x70\xb6\x34\x25\xe3\x26\x2e\x22\x93\x1c\x6d\xb0\x54\xcf\x8e\x7c\x9b\xe3\x41\x1e\x21\x79\x19\x4b\xa8\x4e\x53\xbd\xcb\x30\x4f\xd6\x4c\x6d\xe8\xc5\x22\xb0\x0d\x63\xbf\x45\x0a\xa0\xae\xe1\xeb\x5f\x82\xd1\x5b\x55\xcf\x22\xe8\xb2\xbc\x2c\xa8\x01\x73\xbf\xee\xd7\xc6\xd2\x54\xa0\x84\x8c\x4a\x27\xcf\x8a\xcc\x3c\xd5\xa6\x05\xa8\x40\x2e\x81\x00\xc5\xe5\x61\xf5\x67\x15\x9c\x96\x34\x06\xaf\xaa\x82\x47\x8c\x31\x5b\x20\xaf\x6b\x68\xed\xa5\xf2\x2d\x90\x97\x4c\xa0\x25\x5e\xf2\xa0\xf7\xb3\x0f\x5e\x4e\x84\x34\xeb\xfd\x9e\xe2\xf4\xfd\x77\x6d\x40\xce\xd5\x1f\xe3\xbe\x55\x2b\x66\x54\x48\x10\xb2\x90\xd0\x01\xb7\x3f\x1c\x87\x8f\x11\xf4\x87\xd1\xa8\x99\x93\xb7\x5e\xb5\x6a\xbe\x43\xa6\x21\xbe\xa4\xfa\xbb\xe2\xf2\xdb\xe7\xc1\x53\x38\x3e\x11\xba\x20\x79\x89\x2a\xd4\xb4\x09\x47\x61\x88\xdd\x76\x20\x99\x04\xe1\x2b\xc6\x9e\x22\xd4\xd6\x53\xbd\xd9\x46\xf8\x54\x9d\x9e\xaf\x37\x65\xa9\xde\xf2\xbf\x0e\xd0\x2c\xb7\xb5\x98\x64\xb2\xe4\x14\x6e\x74\x46\xbd\x5a\x3b\x5b\xeb\x1c\x45\x30\xd8\xe8\x92\x78\xbe\x3d\xa9\xa7\x79\xa2\x27\x90\x02\xbe\x66\x42\x0f\xce\xbf\x79\x5e\x06\x6e\xeb\xbc\xda\x90\x25\xe6\x90\x7c\x73\x40\x8d\xe7\xf3\xf4\xd0\xfb\x1c\x85\xcd\xf0\xe3\x30\x5a\x09\x56\xea\xec\x56\x67\xd5\xcc\xbf\xff\x12\x3e\x86\x0a\xa1\x03\x3f\x19\xd1\xbf\x9c\x96\xdc\x66\xb0\x92\x83\x62\xe7\x6f\xeb\xa8\xc4\x35\xc2\xdd\x65\x34\xf9\xcf\x64\x53\x60\x1f\x16\x6d\x1c\x0e\xc2\x6e\x04\x2d\xb8\x7b\x1c\xdd\x37\x73\x38\xd4\x47\xb1\x36\xe2\xfc\x5a\x22\x7f\x7b\x64\x4b\x2b\xd0\x9e\x10\x9c\x2d\x83\x71\x4c\xa8\x67\x85\x13\x31\xa1\x9b\x59\xb0\x1a\x0d\x18\x49\x80\xe4\x79\x1b\x18\x07\x02\xa2\x9c\x28\xc3\x60\x69\x93\x56\x02\x52\xce\x8a\x6f\x23\x97\xc2\xdd\xf5\x04\x85\xfb\xc7\x9f\x7b\x81\x0d\xb6\xa0\xb5\xbb\x3d\x4b\x3c\xd7\x59\x0d\xe4\x0e\x9d\xc0\x78\x61\xa7\x03\x37\x70\x79\xb9\xf7\xce\x5a\xe6\x8f\x70\x73\x38\xba\x02\x65\x1b\xd2\x42\x06\xa1\x22\x94\x7a\x6e\x4c\x28\x65\x12\x5e\xd4\x39\x98\xdf\x30\xbb\x7d\x52\x4a\xa0\x0c\x34\x90\xeb\xdb\x61\x3f\x45\x66\x17\x4f\xd7\x78\xd5\xd1\x58\xe3\x39\xcf\xa8\x4c\x3d\x17\x06\xfd\xfb\x7e\x04\xff\x4f\xdc\x76\x53\x0a\x7f\xcb\x52\x0e\x40\x1a\xab\x6a\x46\x19\xdd\xdd\xa9\x79\x6d\x80\x31\x49\xb6\x71\x12\x4c\x91\x83\x3a\x71\xcf\xdf\x4a\xdc\xa8\x36\xdc\x1c\x79\x6f\xb9\xad\x02\x6a\xcf\x5f\xb5\xf9\x8e\xf9\xea\x66\xd7\x9d\x7e\x8e\xcd\x1e\x90\x54\xe9\x82\x6e\xce\x04\xda\xfc\xea\x93\x32\xfb\x62\x88\xaf\x72\xa7\x84\x2d\x84\x8e\x09\xb1\xa3\x74\x38\x49\x3f\x34\xf3\xd8\xe3\xb2\xe1\xa3\xa5\xd7\x05\x93\xf9\x1c\x69\xe2\xe9\xb6\x6a\xed\x88\xb2\xd3\x32\x36\x8b\x19\xd8\x1e\xe6\x78\xc6\xaf\xc1\xb7\x9b\x54\x03\xf8\x61\x6b\xeb\x85\x83\x30\x0a\x3f\x64\x6c\xc7\x8c\xff\xa8\xc1\x77\x59\xa9\x2e\xb0\x33\x04\x5a\x16\x13\xe4\xca\xb7\x3e\xe4\x53\xff\x58\xbc\x46\xd8\xf5\xa9\x58\x83\x9e\x77\x69\xb1\x16\xd5\x1d\x3d\x0d\x23\xaf\xe5\x9f\x72\xaa\x13\xce\xbe\xd3\xef\x9d\x8d\xaf\x5f\x6a\x2a\xc7\xfa\xef\x60\x0e\x76\xda\x68\x8d\x6d\x97\xf5\x3d\xdd\x28\x03\x94\x14\xe7\x36\xc7\x3a\x8d\xe7\xab\xab\xae\xee\x46\xc7\x9e\x93\xdb\x5c\xa8\xc1\x1f\xa3\x1c\x68\x5f\x10\x28\x0d\xb6\x31\x51\x6d\x16\x67\x82\xaf\x72\x78\xeb\xbb\xad\x7f\x10\x05\x95\xd3\xec\x46\x06\xc8\x52\xdd\x09\xd9\x30\x1c\x19\x67\xda\xa3\x68\xfc\xea\x7c\x8e\x26\x8b\xb7\xb9\x8b\x9f\xc1\x72\xed\x89\x16\xec\x08\xcf\xaa\x42\x9a\xa8\x7f\x28\xff\x0e\x00\x00\xff\xff\xf0\xb3\x44\x62\x80\x0e\x00\x00")

func tmplModelHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplModelHtml,
		"tmpl/model.html",
	)
}

func tmplModelHtml() (*asset, error) {
	bytes, err := tmplModelHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/model.html", size: 3712, mode: os.FileMode(420), modTime: time.Unix(1511963537, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplX_helpersHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x58\x4b\x73\xdb\x36\x10\xbe\xe3\x57\x6c\x78\xe8\x90\x8c\x4c\xa5\x93\xa4\x33\x55\x47\x97\x76\x9a\x69\x3a\xcd\xa3\xb1\x9b\x4b\xa7\x07\x88\x02\x65\xb8\x24\x28\x03\x90\x3d\x1e\x46\xff\xbd\x83\x17\x01\x52\x22\xf5\xb0\x5d\x1f\x64\x1b\xdc\xfd\xb0\xdf\xee\xb7\x20\x56\x4d\xb3\x24\x05\x65\x04\xa2\x6b\x52\xae\x09\x17\xd1\x76\x8b\xd6\x38\xff\x17\xaf\x08\x34\x0d\x64\x9f\xcd\xdf\x1f\x71\x45\x60\xbb\x45\x88\x56\xeb\x9a\x4b\x88\x51\xb4\xc4\x12\x2f\xb0\x20\x53\x71\x5b\x46\xdd\x7f\xa7\x4b\x4e\xef\x08\x8f\x50\x44\x58\x5e\x2f\x29\x5b\x4d\x6f\x44\xcd\x22\x14\x71\x52\x94\x24\x97\x11\x8a\x24\xad\x48\x84\x50\xb4\xa2\xf2\x7a\xb3\xc8\xf2\xba\x9a\xae\xea\x0b\x71\x5b\x5e\x18\xe7\x69\xf5\xa0\x81\x13\x84\xa6\x53\xb8\x94\xcb\x2b\x5a\x11\x58\xf3\xfa\x8e\x2e\x89\x80\x25\x29\xf0\xa6\x94\x70\xf9\xe7\x1f\x70\xf5\xfe\xc3\xaf\x50\xd4\xbc\xc2\x12\xe5\x35\x13\xb2\x35\x9f\x43\xf4\xfd\xdb\xd9\xab\x37\xb3\x57\x6f\x23\x84\xa6\xe9\x45\xf8\xf3\x12\x7d\x83\xab\x87\x35\x01\x5c\x52\x2c\x88\x80\x6f\xe8\x65\xc7\x20\x9d\xea\xbd\x3f\x6e\xca\xf2\x5d\x59\x63\xf9\xc3\x9b\xd6\x54\xdc\x96\x59\xb0\x8e\xa4\xc2\x09\x0d\xfb\x06\x0e\xe8\x52\x72\xca\x56\x3b\x38\x66\xd9\xc3\x58\xb3\xde\x63\x07\xf2\x73\x5d\x97\x3b\x10\x6a\xd1\x03\x68\x93\xce\x23\xe7\xfc\x9e\xed\x23\xa2\x57\xbd\xbb\x31\xea\x3e\x74\x00\x3a\xb3\x7d\x7f\xb5\xe8\xdd\xb5\x89\x2e\xa0\x7f\xa8\xdc\xbf\xe0\xfb\xdf\x2f\x3f\x7d\x6c\xbd\x95\x2a\xb2\x2f\xf8\xfe\x03\x11\x02\xaf\x2c\x80\x33\xea\x3f\xec\xd7\xaf\xf3\x03\x00\xa0\x2b\x1a\x64\x8f\x56\xeb\x92\x54\x84\x49\x2c\x69\xcd\x76\xeb\x7b\xb1\xaf\xda\x7f\xb1\x0a\x73\x71\x8d\x4b\x1d\x43\x51\xf3\x00\x11\x15\x1b\x96\x43\xcc\x82\xa5\xa4\xeb\x10\x2f\xe0\xef\x7f\x16\x0f\x92\x24\x40\x38\xaf\x39\x34\x88\x70\x0e\xb3\xb9\x61\xd3\xda\xc6\x8b\x09\x7c\xc7\x32\x8b\x81\x58\xf6\x15\x97\x74\x09\x73\xe5\x05\xf3\x39\x30\x5a\x22\x4e\xe4\x86\x33\xb5\x82\xb6\x3a\xb4\xaf\xb8\xdc\x90\x63\x42\xd2\x86\x71\x02\xb1\x69\xa5\x4c\xff\x3f\x31\x11\x25\xd0\x20\x5a\xc0\x0b\xb7\x65\xe3\xf6\x61\xb4\x9c\xe8\x7d\xb7\xed\x8a\x8d\xcf\x2d\xeb\x46\xcc\x31\x1b\x0a\x21\x0d\x63\x50\x86\xb1\xe0\x39\x50\x26\x09\x2f\x70\x4e\x9a\xad\x4f\xca\x1d\xe6\x80\xfb\xf2\xa6\x05\xd8\x64\xe1\xcc\xb9\x27\x3f\xe9\xb5\x17\x3a\x25\x3e\x58\x93\x14\x17\x20\x68\x8f\x16\xc4\x1e\x32\x99\x6a\xee\x4f\x85\x46\xf1\x00\x3e\xd5\x92\x6f\x48\x40\xb6\xa5\xf8\xe1\x70\xfd\x3b\x4c\x03\x7b\x95\x73\x53\xff\x20\xdb\x86\x6b\x2a\xda\xf8\x7c\xea\x31\xcc\xbd\x0c\x7c\x2c\x5a\x2b\x16\x36\xc6\x89\x8e\x6b\x44\xfb\x17\xad\xf0\xdd\xe9\x73\x9a\xf2\xc7\xa5\xef\x4e\xb0\x0e\x77\xbb\xf8\x38\xf5\x3b\x90\x23\xe5\xbf\xaf\x2e\xe3\xc1\x1d\x59\x99\xc2\x82\xec\x2b\x8d\xdb\x60\xb4\x36\xbd\xb6\x18\x0f\xea\x94\xc6\x78\xe7\x23\x3b\xb5\x33\x9c\x14\x94\x4b\x00\xf3\xc8\xde\xe8\x1e\x41\x7d\xa2\x1d\x9e\x4f\x76\x08\x59\x44\x7f\x0a\x8d\xb4\x82\x6b\x04\xf3\xfe\x3a\xa9\x0d\x46\x9b\xc0\xbc\x01\x43\x9e\x7a\xe5\x71\xfa\x37\x10\x67\x1d\xfe\x83\xf1\x3c\x59\xd6\x35\xde\xe0\xc9\xdf\xdd\x3f\x0d\x02\x38\x45\xde\x06\xe5\x0c\x71\x9b\xf2\x2a\x87\x16\xe2\x19\x0e\xfd\x61\x92\x47\x1e\x2c\x94\x0d\x1d\x2b\x06\xfa\xcc\x03\xdf\x89\x5c\xdf\xf1\x4e\xd1\xf8\xa8\xc4\xf5\x25\xb1\x43\x56\xad\x3c\x4e\xe1\x1a\xe1\x2c\x81\x77\xa2\xf1\xc1\x3c\x99\xbc\x15\xdc\xa0\xba\x87\x52\x71\x8a\xb6\x35\xc6\x19\xd2\xd6\x45\x55\xf6\x0e\xe0\x19\x84\x3d\xc4\xef\x48\x59\x2f\x6c\x64\x3b\xaa\xd6\xb8\x8f\x14\xb5\x1e\x1d\x9e\x4c\xd4\x7a\xf2\x08\x65\xa4\x16\x0e\x6b\x5a\xa8\x92\x99\x0b\x5b\xbc\x48\x90\xa4\xd5\xc4\x15\x52\xcd\xad\xd9\x67\xcc\x05\x89\xf5\x9f\x5f\xde\xfd\xf2\xfa\xf5\xeb\x1f\x27\x20\x12\x57\xee\x3d\xd5\x29\x70\x29\x48\x4f\xf3\x2c\xb3\x33\xaa\xa4\x55\xbf\x90\x07\x5e\xbc\x03\xb4\x9e\xac\x3b\x14\xdc\x60\x77\x74\x36\x4f\xfd\xee\xc7\x74\x47\x6f\x26\x3c\xa3\x3f\x6c\xce\x70\xe6\x00\x9e\xa1\x3f\x86\x18\x1e\xd9\x1f\x5a\x17\x2e\xbc\x9d\x26\xd1\x0f\xce\x6b\x12\xd5\x23\x6e\x3a\x3e\xa1\x45\x4e\x99\x6c\x53\x8b\x7f\xb8\x47\x0c\xd9\xfe\x90\xbe\xe7\x35\x80\x13\x94\xab\x12\x5b\x64\xc5\x32\x65\x30\x87\xfc\x90\xca\x7b\xa1\xb5\x91\x1d\x92\xb9\x85\xb5\xfd\xcb\x92\xa3\xe7\xd7\x76\x87\xff\x63\x78\xbd\x11\x2c\xcc\x8a\x49\x6f\xec\xe6\xd8\xc4\x26\xe9\x46\xb0\xf3\x26\xd4\x96\xcb\x21\xd1\xe2\xf6\xed\xed\xcb\x18\xa7\x2c\x71\xdb\xe2\xac\x83\x30\xa0\x50\x25\xcd\xdf\xf4\x57\x88\xa0\x42\x18\xd6\xa4\x15\xe3\x55\x1d\x7c\x51\x63\x76\x12\x80\x81\x91\xfb\x1d\x36\xa1\x69\x2c\xdc\x20\x9d\x84\xdf\xf4\xe8\xa3\x4d\xd8\xab\x85\x4f\x74\xe8\xd7\xa9\x56\xa3\x7b\x72\x66\x8e\xe5\x6d\xe2\xdb\x71\xd8\xc3\xfc\x9a\x41\x2a\x26\x60\xbd\xd5\x91\xb2\x75\x13\xa0\x89\xd2\x5c\x4c\x77\xf9\x04\x57\xc9\xc0\x30\xa6\xf6\x8e\x98\x04\x43\x8b\xe6\x42\xf7\x72\x31\x4e\x9d\xdb\xf3\x28\x93\x7d\xf6\xfa\x73\x06\x29\x1d\xa3\xe1\x86\xc7\x5d\x22\x9d\x91\xaf\x63\xac\xc8\x14\x6e\xf8\x0b\x41\x46\x08\x39\xd7\xde\xbc\x3b\x4a\x6a\xc8\xc7\xfe\x3e\x44\x4d\xdf\xaf\x72\x4e\xb0\x24\x21\x2f\x7f\x25\xf2\x66\xf1\xc2\xdc\x75\x12\x7f\xdb\xd6\x5c\x16\x7b\xb9\x68\x8f\xf0\xf6\x37\xca\x62\xd7\x5a\x7d\xcc\x20\x5d\x8c\x05\xaf\x5f\x7e\xbb\xc1\xfb\xf7\x95\x37\x8b\x25\xb4\xef\xa1\xc4\xdf\xac\x3a\x21\x6b\xbb\xee\x2b\xb9\x51\x1f\x33\x90\xbb\x51\x34\x0d\x61\xcb\xed\x16\xfd\x17\x00\x00\xff\xff\x90\xc8\xe5\xc0\x33\x18\x00\x00")

func tmplX_helpersHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplX_helpersHtml,
		"tmpl/x_helpers.html",
	)
}

func tmplX_helpersHtml() (*asset, error) {
	bytes, err := tmplX_helpersHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/x_helpers.html", size: 6195, mode: os.FileMode(420), modTime: time.Unix(1511963796, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplX_helpers_testHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x9b\xd1\x6e\xdb\x36\x14\x86\xaf\xa5\xa7\x60\x04\x34\xb0\x02\x57\xb5\xdd\x62\x03\xbc\x65\x17\x5d\x3b\x60\x03\x9a\x0d\xab\xdb\x8b\x15\x45\x2b\xd9\x74\x2a\x54\x96\x1c\x8a\x4e\x16\x18\x7a\xf7\xe1\x90\x94\x25\x51\xa2\x2d\x9b\xd4\x62\x07\x29\x52\xd4\x95\xc8\xc3\x9f\x3c\x3f\x0f\x3f\x09\xce\x7a\x3d\xc3\xf3\x30\xc6\xc8\xf9\x86\xa3\x25\x26\x29\xc5\x29\x75\xb2\xcc\x5e\xfa\xd3\xef\xfe\x35\x46\xeb\x35\xf2\xfe\xe2\x9f\xaf\xfc\x05\x46\x59\x66\xdb\xe1\x62\x99\x10\x8a\x7a\xb6\xe5\xcc\x7c\xea\x07\x7e\x8a\x5f\xa4\x37\xd1\x8b\x19\x09\x6f\x31\x71\x6c\xcb\x21\x78\x1e\xe1\x29\x85\x8f\x10\x30\x8c\xaf\xd9\xc7\x70\x81\x1d\xdb\xb5\xed\xf9\x2a\x9e\xa2\x09\x4e\xe9\xd5\x2a\x8a\xde\x53\x12\xc6\xd7\x5f\x3e\xc4\x0b\x9f\xa4\xdf\xfc\xe8\x8f\xf7\x7f\x5e\xf5\x28\xba\x10\x1d\xbd\x89\x8b\xd6\xb6\x05\xff\x4b\xd1\xf8\x12\x7d\xfa\x9c\x52\xb2\x9a\x52\xb8\x68\xc5\x20\x09\x21\x94\xb2\x18\x70\x01\xf1\x3f\x45\x60\xdb\xb2\xd2\x64\x45\xa6\x18\xa1\x4f\x9f\x83\x7b\x8a\x6d\xcb\xba\xf3\x63\xfa\x96\x10\x14\x24\x49\x64\x5b\x19\x44\x82\xbf\x2c\xdc\x18\xba\x3b\xb7\x7e\x14\xce\x9c\x3e\x5c\xe4\xbd\xc7\x79\xf7\xde\x57\x58\xaa\x28\x71\xbe\xba\xec\xb6\x88\x35\x46\x73\x3f\x4a\x31\x5c\xca\xfa\xf5\x78\x61\xbc\x2d\xe2\xda\xf9\x8e\xef\x9d\x31\x8c\xba\xc2\x4e\x26\x47\xa6\x64\xa5\x0c\x8c\x17\x4b\x7a\xdf\x18\x76\x9d\xa9\xa3\x64\xb6\x35\x4f\x08\xfa\xd2\x47\x94\xc2\xa2\x12\x3f\xbe\xc6\x88\xaf\x31\x0c\x40\xbd\xbf\x57\x71\x8f\x52\x0f\x06\xea\x23\xc8\x57\x3d\x25\x96\x15\xce\x11\x26\x04\x02\x40\x53\x4f\x4a\x21\xf5\xb8\x22\xf7\x27\xd4\x83\x66\x67\x97\x28\x0e\x23\x17\xfe\xa5\xd4\xcb\x73\xc0\x02\x59\xd4\x7b\x4b\x48\x42\xe6\x3d\xa7\xc8\x9c\x14\xcf\x85\xb1\x12\x82\x2e\xd1\xb3\xdb\x3e\xca\xbb\x3f\xbb\x75\xfa\x70\xa3\x5f\x8a\xe9\x42\xc8\x0c\xa6\xea\xc2\x54\xb3\x66\xc3\x7d\x84\xc5\x36\x6b\x34\x18\x1f\x2e\xf2\x8d\xe0\xb1\x11\x76\xda\xad\xec\xb5\x78\x5c\x0a\xc8\x57\xe6\x23\xdc\x1d\xa3\x4d\xfa\x2c\x8b\xdf\x1d\x23\xe1\x43\x76\xb1\xc8\xf5\x58\x16\xd0\x13\xed\xda\xda\xb5\xea\x55\xb5\xa2\x4d\x00\x79\xf0\x38\x8c\xb6\x0c\x65\xc8\x7a\xd7\x09\xed\x57\xcc\xc7\xe7\xea\x0a\x5b\x1e\x66\x38\x11\x63\x3f\xa3\x59\x04\xd3\x15\x89\x73\xcf\xc1\xe8\x67\xa2\xfe\x79\x6f\x30\x5e\xbe\xbd\x59\xf9\x51\x8f\xe9\x15\x3d\xdd\x36\x1a\x8a\xd1\xf9\xd0\x95\x00\xad\x0c\xfe\x7e\xea\xc7\xda\xfe\xbe\xa8\x19\xbc\x70\xb2\x95\x92\x29\x6b\x14\xc6\x14\x93\xb9\x3f\xc5\xeb\x6c\xa7\xbf\xcf\x65\x3b\x35\xd9\xb9\xee\x7a\xee\xb1\x94\x4c\x99\xc5\x90\xe3\xb4\x75\x73\x1c\x46\x88\xd7\xd5\xc3\x14\xc8\x36\xdf\x48\xf8\x5f\x6c\x2e\x55\x58\x9e\x52\xea\xa5\x64\x7a\x70\x55\x65\x31\x0e\x28\xa6\xa0\x25\xdf\x69\xe1\x0c\x5d\x5e\xf2\x09\xa3\xf3\x73\xc4\x15\x09\x29\xb5\xb1\xd3\x6f\xc9\x2a\x9a\x21\xbe\x4d\x50\xbc\x8a\x22\x47\x15\xb4\x12\x8b\xcf\x98\x89\xae\xc5\x14\x35\x4a\x64\xb6\xdd\x7e\x78\x67\x90\x2f\xea\xdb\x02\xae\xb6\x04\x0c\x93\x3b\x62\x53\x75\x0f\xa5\x13\x2e\x86\xa7\x65\xb7\xa2\x1d\x9b\xa3\xa6\x06\xc2\xb6\x97\x22\x9f\x3c\x35\x1d\x62\xdc\x9d\x6b\xb0\x7d\xfa\x5d\x1d\x41\x65\x83\xe9\x1d\x44\xef\x0e\xe7\x1e\xc3\xc7\x51\x55\x89\xc6\xa1\xf4\x3a\x49\xa2\x0e\x20\xff\xb5\x38\x89\xcc\x22\x3e\xb3\xcb\x13\xe0\x77\x06\xf8\x90\xb5\xae\xf0\x9e\x19\xcd\x1c\xdc\x0b\x83\x99\x42\x7b\x08\xd7\x5c\xcb\x2c\xb8\xb5\xa5\xc0\x57\x98\x1e\x1a\x69\x01\x7d\x4d\xc7\x63\xc2\x79\x66\xaf\x07\x85\xf9\x8a\x02\xdd\xaa\x69\x0e\xe4\x4b\x66\x36\x81\xf1\x85\x89\x64\xef\x2a\x4e\xea\x0d\x3c\x6f\xae\x1f\x4e\xf0\xbb\x07\x57\xa2\x7b\x71\xe3\x64\xe0\x9d\x19\xea\xb4\xd0\x1d\x24\xeb\x81\x3b\x73\xbf\x71\x6c\x97\x2a\xba\x06\xb4\xab\x8b\xb9\x02\x4c\xf7\xe3\x0a\x25\x9a\xb7\x2f\xde\x06\x39\xbc\x83\xc9\x1e\x31\x88\xb3\xfd\x76\x04\x18\xde\xa0\x43\xe3\x38\x99\x84\x0b\xdc\x01\x84\x43\x58\xf3\x10\x3e\x1a\x0c\x7f\x7c\x3e\x1c\x3e\x1f\xbd\x9a\x0c\x06\x63\xf6\xf3\xcf\x13\x93\x9f\x24\x93\x33\xdf\xa9\x98\x3c\x5c\xb0\xc9\x84\x0b\xec\x5d\x25\x77\xb0\x61\x0f\xb7\xa0\x29\x4c\x87\x70\x0a\x4c\x87\x5b\x40\x1b\xe1\x62\x37\xa5\x87\x0b\x2d\x48\xaf\xa9\x78\x4c\x90\x0e\x93\x7b\x58\x48\xaf\x28\xd0\xad\xaa\x0a\x48\xd7\x36\xf7\x85\xe4\x6e\x13\xdc\x5e\xf8\x4a\x32\xf3\x4e\x6c\x17\xed\x0e\xa7\xf6\x9d\x43\x2b\xa1\xbd\x58\xc3\xd3\x22\x77\xe6\xb2\xd3\x22\x77\x90\xac\x47\xee\x6c\x4b\x18\x27\x77\xa9\xc8\x6b\x90\x7b\x93\x0d\xb1\xf7\xc6\xa7\xb8\x07\xd8\xd1\x47\xc3\x61\x1f\x8d\x5e\xf5\xd1\xa0\xf4\xc3\xda\x7c\x98\xfc\xea\x6e\xdb\x2b\xf5\x97\xd1\x4d\x1c\x63\xe0\xfd\x7c\xfb\xc3\xc1\xe0\x43\x80\xfa\x5c\x54\xcd\x7e\x30\x18\x0c\x9f\xb3\x9f\xb6\xb3\x3f\xe2\xa7\x02\xb6\x97\x8f\xe0\xa9\xa0\x41\x87\xc6\xf9\xf5\x7b\x4c\x7f\x78\xd5\xc1\x63\x01\x8b\x6b\xfe\xb9\x60\x38\x7a\xf9\xf4\x18\xd0\xd9\x63\x00\x4b\x5a\x57\xcf\x01\xdc\x69\xe6\x5e\xce\xe7\x0e\x33\x85\xfd\x2c\x9e\x82\xfb\xd9\xbd\x31\x1a\x8e\x5e\xee\xe4\xfe\x10\x9a\xf6\x86\xa3\x97\xae\x16\xfe\xd7\xd5\x3c\x26\xfe\xe7\x46\x7b\xd0\x07\x80\xaa\x04\xed\x0a\x6a\xee\x3d\x7d\xd9\xd7\x26\x80\xbf\xe4\x24\xc9\xc6\xbb\x88\xbf\xb0\xb2\x26\xf8\xef\x36\xf3\x7e\x63\x1e\x21\xe9\x73\x3b\x9d\x16\xea\x33\xcd\x7a\xac\xcf\xcd\x6f\x1c\xf6\xe5\xda\xae\x41\xfb\x7b\xdb\xbf\x86\xb1\xfb\x30\x87\x92\xd8\xf7\xa8\xe7\x06\x91\x7d\xcb\x99\xa6\x18\x74\x70\xaa\x78\xce\x37\xe0\x11\xf0\x79\x93\x90\xbd\x8e\x97\xca\x06\xfb\x2d\x4a\xfc\x6e\x08\x5d\x44\xee\x84\xd1\xbd\x27\x4e\xef\x92\xd3\x45\xea\xba\x22\xf5\xdc\x73\xe6\x58\xbd\xf0\x9a\x29\x5a\x17\x11\x2b\xb5\xad\xfc\x35\x00\x71\x9f\x55\x7b\xaf\x0d\xb7\xcf\x79\x87\x9e\x68\xaf\x47\xef\x4d\xea\x1e\x13\xbf\xe7\x06\x7c\x50\x82\x97\x45\x68\x30\x7c\xee\x78\x73\x14\x5f\x75\xbc\x09\x8e\xaf\x78\xaa\xd1\xde\x0d\xfb\x40\xfe\xf2\x4b\x61\x72\x5d\xa6\x6f\x63\xf1\xa6\x71\xbd\xd3\x63\xfb\xdc\x68\xa7\x45\xf7\x42\xb5\x1e\xdf\xe7\x1b\xc3\x38\xe1\xd7\x4f\x04\x0d\xc6\xd7\xd8\x1a\x4d\xb4\xbf\x17\xbd\x28\x89\x7f\xaf\x33\xc0\x20\xf3\x37\x8d\xfb\x68\xa9\x3f\xdf\x9a\x47\xc0\xfd\xcd\x52\x0e\x3c\x94\x26\x49\xfe\xb5\x8c\xfa\x4a\x06\x6c\x01\x09\x70\x53\xc0\x3e\x97\x1a\x9f\x07\xae\xcd\x66\x10\x04\xa2\x30\xf0\x04\xe5\x42\xf1\xbf\x4b\x3c\xa5\x98\xed\xfe\x70\xc6\xe4\x70\x5d\x79\x7b\xa6\x24\x8f\xb0\xf9\x16\x5f\x43\x00\x66\xa9\x4a\x7f\x68\xcd\xba\xdb\xd6\xad\x4f\x50\x30\x42\x17\x7c\x0b\x07\xc1\x48\x92\x19\x8c\xb8\xcc\x20\x18\x6d\x97\x19\x27\xb4\x41\xea\x48\xd2\x0a\x57\xb6\x69\xe5\x6e\xae\x46\xd8\xa8\xcd\xe4\x55\x67\x0f\x70\x8a\x65\x2f\x5e\x4f\x55\x17\x9f\xf7\x31\xb7\xfa\x41\x20\xde\xce\x9c\x5d\x42\x1d\x53\xc5\x81\xf2\x56\x89\xc2\x3a\x49\x49\x08\xf9\xcb\x94\x4a\x16\xb8\xde\x0e\xd2\xb0\x51\x3d\x50\xc5\x1a\x48\x31\x0a\xc9\xf5\x0d\x20\xf6\x94\x22\x19\x32\x55\x54\x53\x92\xf7\x35\x9a\x94\xfc\x50\xe5\x69\xf1\xb6\xa7\xc6\xab\xa5\x47\x74\x97\x12\x34\xcf\xcf\xc2\x4a\x8a\x72\xfd\x1d\x24\xa9\x34\x8b\xd6\x69\x2a\x4b\xaf\x6d\x19\xfe\x0b\x43\x8a\x34\x39\x37\x77\xd8\xa9\xe6\x46\xb4\x37\x9a\x1a\xf1\xdb\x82\x67\x62\x40\x55\xa8\x9b\x3b\xa9\x6c\xf1\x7e\x52\x4a\x72\x68\xa9\x64\x44\xa8\xee\x20\x21\x25\xed\x4a\xe1\x3f\xb3\x57\x19\x02\xa7\x7e\x91\x42\x96\x26\x51\x4b\xce\x24\x5c\xb4\xfb\xea\x5d\x39\x43\xbc\x53\xb8\x30\x98\x20\xf6\xcd\x92\x33\x36\x64\xeb\xe4\x40\x1f\x31\xab\xf5\x1a\xc7\xb3\x2c\xfb\x2f\x00\x00\xff\xff\xcd\xd0\x41\x15\xb6\x42\x00\x00")

func tmplX_helpers_testHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplX_helpers_testHtml,
		"tmpl/x_helpers_test.html",
	)
}

func tmplX_helpers_testHtml() (*asset, error) {
	bytes, err := tmplX_helpers_testHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/x_helpers_test.html", size: 17078, mode: os.FileMode(420), modTime: time.Unix(1511964294, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmpl/model.html": tmplModelHtml,
	"tmpl/x_helpers.html": tmplX_helpersHtml,
	"tmpl/x_helpers_test.html": tmplX_helpers_testHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tmpl": &bintree{nil, map[string]*bintree{
		"model.html": &bintree{tmplModelHtml, map[string]*bintree{}},
		"x_helpers.html": &bintree{tmplX_helpersHtml, map[string]*bintree{}},
		"x_helpers_test.html": &bintree{tmplX_helpers_testHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

