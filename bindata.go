// Code generated by go-bindata.
// sources:
// tmpl/model.html
// tmpl/x_helpers.html
// tmpl/x_helpers_test.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmplModelHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x57\x5f\x6f\xea\xc6\x13\x7d\xf7\xa7\x98\x9f\x95\x5f\x64\x13\xae\x93\x87\xaa\x0f\xa9\x68\x75\x0b\x8e\x8a\x44\x20\x0d\x4e\xfb\x50\x55\xf7\x2e\xf6\x18\xdc\xd8\xbb\x64\x77\x0d\x89\x1c\x7f\xf7\x6a\xff\xf0\xdf\x50\x22\xdd\x16\x29\x92\x59\xcf\xce\x39\x73\x76\xe6\xb0\xa9\xaa\x04\xd3\x8c\x22\xb8\x05\x4b\x30\x77\xeb\xda\x99\x93\xf8\x99\x4c\x11\xaa\x0a\x82\x07\xf3\x3c\x24\x05\x42\x5d\x3b\xce\x75\xeb\xd3\xf1\xcf\x95\xf3\x0e\x5d\x96\x20\x4c\x91\x22\x27\x12\x13\x98\xbc\x81\xce\x3b\x45\x0a\xef\xce\x3b\xd8\x4f\x6f\x04\xc3\x51\x04\x61\xaf\x1f\x05\xab\xb5\x77\xe7\xea\x44\xee\xd6\xb5\xe3\x5c\x5f\x43\x3f\x85\x37\x56\xc2\x92\x50\x09\x92\x01\xbe\x4a\xa4\x09\x4c\x70\x46\x16\x19\x2b\xf9\xad\x8a\x79\xc8\x91\x08\x84\x98\x23\x91\x08\x04\xe2\x52\x48\x56\x40\x9a\xe5\x08\x19\x05\x39\xcb\x04\x24\x19\xc7\x58\x32\xfe\xa6\x36\x10\x9a\xac\xa2\xe5\x0c\xa1\x40\x39\x63\x89\x50\xcf\x1c\x15\x0a\x59\xb0\x2c\x01\xb6\x40\xbe\xe4\x99\xcc\xe8\x54\x71\xe0\x10\xab\x52\x97\x99\x9c\xe9\x5d\x9b\x9a\x19\xc5\xc0\x71\xb2\x62\xce\xb8\x04\xcf\x71\xd3\x42\xba\x8e\x9b\x10\x49\x26\x44\xe0\xb5\x78\xc9\x5d\x47\x15\x5c\x55\xc0\x09\x9d\x22\x5c\x3c\xb7\xe1\x62\x71\xdb\x81\xe0\x5e\x69\x15\xf4\xf5\x56\xa1\x04\x57\x71\x6e\x55\x5d\x3c\xd7\xf5\x6a\xd3\x27\x50\x25\xd7\xb5\xe3\x6b\x45\xaa\xca\xee\x52\x67\x54\xd7\xc0\x71\xce\x51\x20\x95\x02\x08\x70\xb6\x34\x25\xe3\x26\x2e\x22\x93\x1c\x6d\xb0\x54\xcf\x8e\x7c\x9b\xe3\x41\x1e\x21\x79\x19\x4b\xa8\x4e\x53\xbd\xcb\x30\x4f\xd6\x4c\x6d\xe8\xc5\x22\xb0\x0d\x63\xbf\x45\x0a\xa0\xae\xe1\xeb\x5f\x82\xd1\x5b\x55\xcf\x22\xe8\xb2\xbc\x2c\xa8\x01\x73\xbf\xee\xd7\xc6\xd2\x54\xa0\x84\x8c\x4a\x27\xcf\x8a\xcc\x3c\xd5\xa6\x05\xa8\x40\x2e\x81\x00\xc5\xe5\x61\xf5\x67\x15\x9c\x96\x34\x06\xaf\xaa\x82\x47\x8c\x31\x5b\x20\xaf\x6b\x68\xed\xa5\xf2\x2d\x90\x97\x4c\xa0\x25\x5e\xf2\xa0\xf7\xb3\x0f\x5e\x4e\x84\x34\xeb\xfd\x9e\xe2\xf4\xfd\x77\x6d\x40\xce\xd5\x1f\xe3\xbe\x55\x2b\x66\x54\x48\x10\xb2\x90\xd0\x01\xb7\x3f\x1c\x87\x8f\x11\xf4\x87\xd1\xa8\x99\x93\xb7\x5e\xb5\x6a\xbe\x43\xa6\x21\xbe\xa4\xfa\xbb\xe2\xf2\xdb\xe7\xc1\x53\x38\x3e\x11\xba\x20\x79\x89\x2a\xd4\xb4\x09\x47\x61\x88\xdd\x76\x20\x99\x04\xe1\x2b\xc6\x9e\x22\xd4\xd6\x53\xbd\xd9\x46\xf8\x54\x9d\x9e\xaf\x37\x65\xa9\xde\xf2\xbf\x0e\xd0\x2c\xb7\xb5\x98\x64\xb2\xe4\x14\x6e\x74\x46\xbd\x5a\x3b\x5b\xeb\x1c\x45\x30\xd8\xe8\x92\x78\xbe\x3d\xa9\xa7\x79\xa2\x27\x90\x02\xbe\x66\x42\x0f\xce\xbf\x79\x5e\x06\x6e\xeb\xbc\xda\x90\x25\xe6\x90\x7c\x73\x40\x8d\xe7\xf3\xf4\xd0\xfb\x1c\x85\xcd\xf0\xe3\x30\x5a\x09\x56\xea\xec\x56\x67\xd5\xcc\xbf\xff\x12\x3e\x86\x0a\xa1\x03\x3f\x19\xd1\xbf\x9c\x96\xdc\x66\xb0\x92\x83\x62\xe7\x6f\xeb\xa8\xc4\x35\xc2\xdd\x65\x34\xf9\xcf\x64\x53\x60\x1f\x16\x6d\x1c\x0e\xc2\x6e\x04\x2d\xb8\x7b\x1c\xdd\x37\x73\x38\xd4\x47\xb1\x36\xe2\xfc\x5a\x22\x7f\x7b\x64\x4b\x2b\xd0\x9e\x10\x9c\x2d\x83\x71\x4c\xa8\x67\x85\x13\x31\xa1\x9b\x59\xb0\x1a\x0d\x18\x49\x80\xe4\x79\x1b\x18\x07\x02\xa2\x9c\x28\xc3\x60\x69\x93\x56\x02\x52\xce\x8a\x6f\x23\x97\xc2\xdd\xf5\x04\x85\xfb\xc7\x9f\x7b\x81\x0d\xb6\xa0\xb5\xbb\x3d\x4b\x3c\xd7\x59\x0d\xe4\x0e\x9d\xc0\x78\x61\xa7\x03\x37\x70\x79\xb9\xf7\xce\x5a\xe6\x8f\x70\x73\x38\xba\x02\x65\x1b\xd2\x42\x06\xa1\x22\x94\x7a\x6e\x4c\x28\x65\x12\x5e\xd4\x39\x98\xdf\x30\xbb\x7d\x52\x4a\xa0\x0c\x34\x90\xeb\xdb\x61\x3f\x45\x66\x17\x4f\xd7\x78\xd5\xd1\x58\xe3\x39\xcf\xa8\x4c\x3d\x17\x06\xfd\xfb\x7e\x04\xff\x4f\xdc\x76\x53\x0a\x7f\xcb\x52\x0e\x40\x1a\xab\x6a\x46\x19\xdd\xdd\xa9\x79\x6d\x80\x31\x49\xb6\x71\x12\x4c\x91\x83\x3a\x71\xcf\xdf\x4a\xdc\xa8\x36\xdc\x1c\x79\x6f\xb9\xad\x02\x6a\xcf\x5f\xb5\xf9\x8e\xf9\xea\x66\xd7\x9d\x7e\x8e\xcd\x1e\x90\x54\xe9\x82\x6e\xce\x04\xda\xfc\xea\x93\x32\xfb\x62\x88\xaf\x72\xa7\x84\x2d\x84\x8e\x09\xb1\xa3\x74\x38\x49\x3f\x34\xf3\xd8\xe3\xb2\xe1\xa3\xa5\xd7\x05\x93\xf9\x1c\x69\xe2\xe9\xb6\x6a\xed\x88\xb2\xd3\x32\x36\x8b\x19\xd8\x1e\xe6\x78\xc6\xaf\xc1\xb7\x9b\x54\x03\xf8\x61\x6b\xeb\x85\x83\x30\x0a\x3f\x64\x6c\xc7\x8c\xff\xa8\xc1\x77\x59\xa9\x2e\xb0\x33\x04\x5a\x16\x13\xe4\xca\xb7\x3e\xe4\x53\xff\x58\xbc\x46\xd8\xf5\xa9\x58\x83\x9e\x77\x69\xb1\x16\xd5\x1d\x3d\x0d\x23\xaf\xe5\x9f\x72\xaa\x13\xce\xbe\xd3\xef\x9d\x8d\xaf\x5f\x6a\x2a\xc7\xfa\xef\x60\x0e\x76\xda\x68\x8d\x6d\x97\xf5\x3d\xdd\x28\x03\x94\x14\xe7\x36\xc7\x3a\x8d\xe7\xab\xab\xae\xee\x46\xc7\x9e\x93\xdb\x5c\xa8\xc1\x1f\xa3\x1c\x68\x5f\x10\x28\x0d\xb6\x31\x51\x6d\x16\x67\x82\xaf\x72\x78\xeb\xbb\xad\x7f\x10\x05\x95\xd3\xec\x46\x06\xc8\x52\xdd\x09\xd9\x30\x1c\x19\x67\xda\xa3\x68\xfc\xea\x7c\x8e\x26\x8b\xb7\xb9\x8b\x9f\xc1\x72\xed\x89\x16\xec\x08\xcf\xaa\x42\x9a\xa8\x7f\x28\xff\x0e\x00\x00\xff\xff\xf0\xb3\x44\x62\x80\x0e\x00\x00")

func tmplModelHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplModelHtml,
		"tmpl/model.html",
	)
}

func tmplModelHtml() (*asset, error) {
	bytes, err := tmplModelHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/model.html", size: 3712, mode: os.FileMode(420), modTime: time.Unix(1511963537, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplX_helpersHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x58\x4b\x73\xdb\x36\x10\xbe\xe3\x57\x6c\x78\xe8\x90\x8a\x43\xa6\x93\xa4\x33\x55\x47\x97\xe6\x31\x4d\xa7\xb1\xd3\xd8\xcd\xa5\xd3\x03\x24\x82\x0a\x52\x12\x54\x00\x28\x19\x0f\xad\xff\xde\xc1\x8b\x00\x49\x91\x7a\xd8\xa9\x0f\xb2\x0d\xee\x7e\xd8\x6f\xf7\x5b\x10\xab\xa6\xc9\x49\x41\x19\x81\xe8\x13\x29\x37\x84\x8b\x68\xb7\x43\x1b\xbc\xfa\x17\xaf\x09\x34\x0d\xa4\xef\xcd\xdf\x97\xb8\x22\xb0\xdb\x21\x94\xcd\x9e\x8c\xff\x3c\x46\x77\xf0\xb2\xce\x09\xac\x09\x23\x1c\x4b\x92\xc3\xf2\x16\xaa\x3a\x27\xe5\x9a\x30\xb8\x43\x77\x60\x7f\x5e\x5d\xc1\xe5\xd5\x0d\xbc\x7e\xf5\xf6\x26\x75\x6b\x77\xe8\xf1\x04\xf6\x2c\x43\x88\x56\x9b\x9a\x4b\x88\x51\x94\x63\x89\x97\x58\x90\x4c\x7c\x29\xa3\xee\xbf\x59\xce\xe9\x57\xc2\x23\x14\x11\xb6\xaa\x73\xca\xd6\xd9\x67\x51\xb3\x08\x45\x9c\x14\x25\x59\xc9\x08\x45\x92\x56\x24\x42\x28\x5a\x53\xf9\x69\xbb\x4c\x57\x75\x95\xad\xeb\x27\xe2\x4b\xf9\xc4\x38\x67\xd5\xad\x06\x4e\x10\xca\x32\xb8\x96\xf9\x0d\xad\x08\x6c\x78\xfd\x95\xe6\x44\x40\x4e\x0a\xbc\x2d\x25\x5c\xff\xf9\x07\xdc\xbc\x7d\xf7\x1a\x8a\x9a\x57\x58\xa2\x55\xcd\x84\x6c\xcd\x17\x10\xfd\xf8\x62\xfe\xf4\xf9\xfc\xe9\x8b\x68\x90\x38\x95\xaa\x9b\xdb\x0d\x01\x5c\x52\x2c\x88\x18\xb0\x57\x7c\xb3\x0c\x2e\xb7\x65\xf9\xa6\xac\xb1\xfc\xe9\x79\x6b\x2a\xbe\x94\x69\xb0\x8e\xa4\xc2\x09\x0d\xfb\x06\x0e\xe8\x5a\x72\xca\xd6\x03\x1c\xb3\xec\x61\xac\x59\xef\xb1\x03\xf9\xb5\xae\xcb\x01\x84\x5a\xf4\x00\xda\xa4\xf3\xc8\x39\xbf\x65\xfb\x88\xe8\x55\xef\x6e\x8c\xba\x0f\x1d\x80\xce\x6c\xdf\x5f\x2d\x7a\x77\x6d\xa2\x0b\xe8\x1f\x2a\xf7\x0f\xf8\xdb\xef\xd7\x57\x97\xad\xb7\x52\x45\xfa\x01\x7f\x7b\x47\x84\xc0\x6b\x0b\xe0\x8c\xfa\x0f\x27\x85\xaf\xd4\xab\x2b\x1a\x64\x8f\x56\x9b\x92\x54\x84\x49\x2c\x69\xcd\x86\xf5\x1d\xaa\x3b\xcb\xe0\x2f\x56\x61\x2e\x3e\xe1\x52\xc7\x50\xd4\x3c\x40\x44\xc5\x96\xad\x20\x66\xc1\x52\xd2\x75\x88\x97\xf0\xf7\x3f\xcb\x5b\x49\x12\x20\x9c\xd7\x1c\x1a\x44\x38\x87\xf9\xc2\xb0\x69\x6d\xe3\xe5\x05\xfc\xc0\x52\x8b\x81\x58\xfa\x11\x97\x34\x87\x85\xf2\x82\xc5\x02\x18\x2d\x11\x27\x72\xcb\x99\x5a\x41\x3b\x1d\xda\x47\x5c\x6e\xc9\x31\x21\x69\xc3\x38\x81\xd8\xb4\x52\xaa\xff\xbf\x30\x11\x25\xd0\x20\x5a\xc0\x23\xb7\x65\xe3\xf6\x61\xb4\xbc\xd0\xfb\xee\xda\x15\x1b\x9f\x5b\xd6\x8d\xb8\xc2\x6c\x2c\x84\x59\x18\x83\x32\x8c\x05\x5f\x01\x65\x92\xf0\x02\xaf\x48\xb3\xf3\x49\xf9\x8a\x39\xe0\xbe\xbc\x69\x01\x36\x59\x38\x75\xee\xc9\x2f\x7a\xed\x91\x4e\x89\x0f\xd6\x24\xc5\x05\x08\xda\xa3\x05\xb1\x87\x4c\xaa\x9a\xfb\xaa\xd0\x28\x1e\xc0\xa7\x5a\xf2\x2d\x09\xc8\xb6\x14\xdf\x1d\xae\x7f\x87\x69\x60\xaf\x72\x6e\xea\x1f\x64\xdb\x70\x9d\x89\x36\x3e\x9f\x7a\x0c\x0b\x2f\x03\x1f\x8b\xd6\x8a\x85\x8d\x71\x82\x0e\x1d\xfa\xad\xf0\xdd\xe9\x73\x9a\xf2\xa7\xa5\xef\x4e\xb0\x0e\x77\xbb\x78\x3f\xf5\x3b\x90\x23\xe5\xbf\xaf\x2e\xd3\xc1\x1d\x59\x99\xc2\x82\xec\x2b\x8d\xdb\x60\xb2\x36\xbd\xb6\x98\x0e\xea\x94\xc6\x78\xe3\x23\x3b\xb5\x33\x9c\x14\x94\x4b\x00\x73\xcf\xde\xe8\x1e\x41\x7d\xa2\x1d\x9e\x0f\x76\x08\x59\x44\x7f\x0a\x4d\xb4\x82\x6b\x04\xf3\xfe\x3a\xa9\x0d\x26\x9b\xc0\xbc\x01\x43\x9e\x7a\xe5\x7e\xfa\x37\x10\x67\x1d\xfe\xa3\xf1\x3c\x58\xd6\x35\xde\xe8\xc9\xdf\xdd\x7f\x16\x04\x70\x8a\xbc\x0d\xca\x19\xe2\x36\xe5\x55\x0e\x2d\xc4\x77\x38\xf4\xc7\x49\x1e\x79\xb0\x50\x36\x76\xac\x18\xe8\x33\x0f\x7c\x27\x72\x7d\xc7\x3b\x45\xe3\x93\x12\xd7\x97\xc4\x0e\x59\xb5\x72\x3f\x85\x6b\x84\xb3\x04\xde\x89\xc6\x07\xf3\x60\xf2\x56\x70\xa3\xea\x1e\x4b\xc5\x29\xda\xd6\x18\x67\x48\x5b\x17\x55\xd9\x3b\x80\xef\x20\xec\x31\x7e\x47\xca\x7a\x69\x23\x1b\xa8\x5a\xe3\xde\x53\xd4\x7a\x74\x78\x30\x51\xeb\xc9\x23\x94\x91\x5a\x38\xac\x69\xa1\x4a\x66\x2e\x6c\xf1\x32\x41\x92\x56\x17\xae\x90\x6a\x6e\x4d\xdf\x63\x2e\x48\xac\xff\xfc\xf0\xe6\xe5\xb3\x67\xcf\x7e\xbe\x00\x91\xb8\x72\xef\xa9\x4e\x81\x4b\x41\x7a\x9a\x67\xa9\x9d\x51\x25\xad\xfa\x85\x3c\xf0\xe2\x1d\xa1\xf5\x60\xdd\xa1\xe0\x46\xbb\xa3\xb3\xf9\xcc\xef\x7e\x4c\x77\xf4\x66\xc2\x33\xfa\xc3\xe6\x0c\xa7\x0e\xe0\x3b\xf4\xc7\x18\xc3\x23\xfb\x43\xeb\xc2\x85\x37\x68\x12\xfd\xe0\xbc\x26\x51\x3d\xe2\xa6\xe3\x13\x5a\xe4\x94\xc9\x76\x66\xf1\x0f\xf7\x88\x21\xdb\x1f\xd2\xf7\xbc\x06\x70\x82\x56\xaa\xc4\x16\x59\xb1\x9c\x31\x58\xc0\xea\x90\xca\x7b\xa1\xb5\x91\x1d\x92\xb9\x85\xb5\xfd\xcb\x92\xa3\xe7\xd7\x76\x87\xff\x63\x78\xfd\x2c\x58\x98\x15\x93\xde\xd8\xcd\xb1\x89\x4d\xd2\x67\xc1\xce\x9b\x50\x5b\x2e\x87\x44\x8b\xdb\xb7\xb7\x2f\x63\x3c\x63\x89\xdb\x16\xa7\x1d\x84\x11\x85\x2a\x69\xfe\xa6\xbf\xbf\x04\x15\xc2\xb8\x26\xad\x18\x6f\xea\xe0\x8b\x1a\xb3\x93\x00\x0c\x8c\x7c\x1b\xb0\x09\x4d\x63\xe1\x06\xe9\x24\xfc\xa6\x47\x1f\x6d\xc2\x5e\x2d\x7c\xa2\x43\xbf\x4e\xb5\x1a\xdd\x93\x73\x73\x2c\xef\x12\xdf\x8e\xe3\x1e\xe6\xd7\x1c\x66\xe2\x02\xac\xb7\x3a\x52\x76\x6e\x02\x34\x51\x9a\x8b\xe9\x90\x4f\x70\x95\x0c\x0c\x63\x6a\xef\x88\x49\x30\xb4\x68\x2e\x74\x2f\x17\xe3\xd4\xb9\x3d\x4f\x32\xd9\x67\xaf\x3f\xe7\x30\xa3\x53\x34\xdc\xf0\x38\x24\xd2\x19\xf9\x3a\xc6\x8a\x4c\xe1\x86\xbf\x10\x64\x82\x90\x73\xed\xcd\xbb\x93\xa4\xc6\x7c\xec\xef\x43\xd4\xf4\xfd\x6a\xc5\x09\x96\x24\xe4\xe5\xaf\x44\xde\x2c\x5e\x9a\xbb\x4e\xe2\x6f\xdb\x9a\xcb\x72\x2f\x17\xed\x11\xde\xfe\x26\x59\x0c\xad\xd5\xc7\x1c\x66\xcb\xa9\xe0\xf5\xcb\x6f\x18\xbc\x7f\x5f\x79\xb3\x58\x42\xfb\x1e\x4a\xfc\xcd\xaa\x13\xb2\xb6\xeb\xbe\x92\x1b\xf5\x31\x07\x39\x8c\xa2\x69\x08\xcb\x77\x3b\xf4\x5f\x00\x00\x00\xff\xff\xf9\xaa\x8a\x3f\xb0\x18\x00\x00")

func tmplX_helpersHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplX_helpersHtml,
		"tmpl/x_helpers.html",
	)
}

func tmplX_helpersHtml() (*asset, error) {
	bytes, err := tmplX_helpersHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/x_helpers.html", size: 6320, mode: os.FileMode(420), modTime: time.Unix(1511965054, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplX_helpers_testHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x9b\x5f\x6f\xdb\x36\x17\xc6\xaf\xa5\x4f\xc1\x08\x68\x60\xa7\x8e\x62\xbb\xc5\xfb\x02\xde\xb2\x8b\x36\x19\xd0\x01\x4d\x87\xd5\xed\xc5\x8a\xa2\x95\x6c\xda\x15\xaa\x3f\x09\x45\x27\x0b\x1c\x7d\xf7\xe1\x90\x94\x25\x51\xa2\x2d\x5b\xd4\x62\x07\x09\x32\xcc\x95\xc8\xc3\x87\x3c\x0f\x0f\x7f\x12\x9c\xe5\x72\x8a\x67\x5e\x88\x91\xf5\x03\xfb\xd7\x98\xc4\x14\xc7\xd4\x4a\x12\xf3\xda\x99\xfc\x74\xe6\x18\x2d\x97\xc8\xfe\x93\x7f\xbe\x72\x02\x8c\x92\xc4\x34\xcf\x4e\x4e\xd5\x3f\x2f\xcd\x07\xf4\x36\x9a\x62\x34\xc7\x21\x26\x0e\xc5\x53\xe4\xde\xa3\x20\x9a\x62\x7f\x8e\x43\xf4\x60\x3e\x20\xf1\x73\xf1\x01\x5d\x7d\x18\xa3\xcb\x8b\x77\x63\x3b\xbd\xf6\x60\xbe\x5c\x13\xfb\xe4\xcc\x34\xbd\xe0\x3a\x22\x14\x75\x4c\xc3\x9a\x3a\xd4\x71\x9d\x18\x9f\xc5\x37\xfe\xd9\x94\x78\xb7\x98\x58\xa6\x61\x11\x3c\xf3\xf1\x84\xc2\x47\x98\x8d\x17\xce\xd9\x47\x2f\xc0\x96\xd9\x35\xcd\xd9\x22\x9c\xa0\x31\x8e\xe9\xd5\xc2\xf7\x3f\x52\xe2\x85\xf3\x6f\x9f\xc2\xc0\x21\xf1\x0f\xc7\xff\xe3\xe3\x87\xab\x0e\x45\x27\xa2\xa3\x3d\xee\xa2\xa5\x69\xc0\xbf\x62\x34\x3a\x47\x5f\xbe\xc6\x94\x2c\x26\x14\x2e\x1a\x21\xac\x07\x42\x28\x66\x31\xe0\x82\x98\x44\x16\xd8\x34\x8c\x38\x5a\x90\x09\x46\xe8\xcb\x57\xf7\x9e\x62\xd3\x30\xee\x9c\x90\x5e\x12\x82\xdc\x28\xf2\x4d\x23\x81\x48\xf0\x1f\x0b\x37\x82\xee\xd6\xad\xe3\x7b\x53\xab\x07\x17\x79\xef\x51\xda\xbd\xf3\x1d\xf2\xe4\x47\xd6\xf7\x2e\xbb\x2d\x62\x8d\xd0\xcc\xf1\x63\x0c\x97\x92\x5e\x39\x9e\x17\xae\x8b\xb8\xb4\x7e\xe2\x7b\x6b\x04\xa3\x2e\xb0\x95\xc8\x91\x29\x59\x28\x03\xe3\xe0\x9a\xde\x57\x86\x5d\x26\xea\x28\x89\x69\xcc\x22\x82\xbe\xf5\x10\xa5\xb0\xa8\xc4\x09\xe7\x18\xf1\x35\x86\x01\xa8\xfd\xd7\x22\xec\x50\x6a\xc3\x40\x3d\x04\xf9\x2a\xa7\xc4\x30\xbc\x19\xc2\x84\x40\x00\x68\x6a\x4b\x29\xa4\x36\x57\xd4\xfd\x05\x75\xa0\xd9\xd1\x39\x0a\x3d\xbf\x0b\xff\xa7\xd4\x4e\x73\xc0\x02\x19\xd4\xbe\x24\x24\x22\xb3\x8e\x95\x65\x4e\x8a\xd7\x85\xb1\x22\x82\xce\xd1\x8b\xdb\x1e\x4a\xbb\xbf\xb8\xb5\x7a\x70\xa3\x97\x8b\xd9\x85\x90\x09\x4c\xb5\x0b\x53\x4d\xaa\x0d\xf7\x19\x16\x5b\xaf\xd1\x60\x7c\xb8\xc8\x37\x82\xcd\x46\xd8\x68\xb7\xbc\xd7\xc2\x51\x2e\x20\x5f\x99\xcf\x70\x77\x84\x56\xe9\x33\x0c\x7e\x77\x84\x84\x0f\xd9\xc5\x2c\xd7\x23\x59\x40\x47\xb4\xab\x6b\xd7\xa2\x57\xd5\x8a\x56\x01\xe4\xc1\x43\xcf\x5f\x33\x94\x26\xeb\xcd\x23\xda\x2b\x98\x8f\xcf\xb5\x2b\x6c\xb9\x9b\xe1\x44\x8c\xed\x8c\x66\x10\x4c\x17\x24\x4c\x3d\x07\xa3\x1f\x89\xfa\x67\x5f\x60\x7c\x7d\x79\xb3\x70\xfc\x0e\xd3\x2b\x7a\x76\xeb\x68\xc8\x46\xe7\x43\x17\x02\xd4\x32\xf8\xc7\x89\x13\x36\xf6\xf7\x49\xc9\xe0\x99\x93\x8d\x98\x4c\x58\x23\x2f\xa4\x98\xcc\x9c\x09\x5e\x26\x1b\xfd\x7d\x2c\xdb\xa9\xca\xce\x65\xd7\x73\x8f\xc5\x64\xc2\x2c\x86\x2c\xab\xae\x9b\x43\xcf\x47\xbc\xae\xee\xa6\x40\xb6\xf9\x4a\xc2\x7f\x62\x73\xa9\xc2\xf2\x94\x52\x3b\x26\x93\x9d\xab\x2a\x8b\xb1\x43\x31\x05\x2d\xe9\x4e\xf3\xa6\xe8\xfc\x9c\x4f\x18\x1d\x1f\x23\xae\x48\x48\x29\x8d\x1d\xff\x88\x16\xfe\x14\xf1\x6d\x82\xc2\x85\xef\x5b\xaa\xa0\x85\x58\x7c\xc6\x4c\x74\x29\xa6\xa8\x51\x22\xb3\xf5\xf6\xc3\x7b\x8d\x7c\x51\xde\x16\x70\xb5\x26\x60\xe8\xdc\x11\xab\xaa\xbb\x2b\x9d\x70\x31\x3c\x2d\x9b\x15\x6d\xd8\x1c\x25\x35\x10\xb6\xbe\x14\xf9\xe4\x29\xe9\x10\xe3\x6e\x5c\x83\xf5\xd3\x6f\xeb\x08\xca\x1b\xac\xd9\x41\xf4\x7e\x77\xee\xd1\x7c\x1c\x15\x95\x34\x38\x94\xde\x44\x91\xdf\x02\xe4\xbf\x11\x27\x91\x5e\xc4\x67\x76\x79\x06\xfc\xd6\x00\x1f\xb2\xd6\x16\xde\x33\xa3\xe9\x83\x7b\x61\x30\x5d\x68\x0f\xe1\xaa\x6b\x99\x01\xb7\xd6\x14\xf8\x02\xd3\x43\xa3\x46\x40\x5f\xd2\xf1\x94\x70\x9e\xd9\xeb\x51\x61\xbe\xa0\xa0\x69\xd5\xd4\x07\xf2\x39\x33\xeb\xc0\xf8\xcc\x44\xb2\x77\x15\x27\xf5\x0a\x9e\x57\xd7\x77\x27\xf8\xcd\x83\x2b\xd1\x3d\xbb\x71\x30\xf0\xce\x0c\x75\x58\xe8\x0e\x92\x9b\x81\x3b\x73\xbf\x76\x6c\x97\x2a\x7a\x03\x68\x57\x17\x73\x05\x98\x6e\xc7\x15\x4a\x34\xaf\x5f\xbc\x35\x72\x78\x0b\x93\xdd\x63\x10\x67\xfb\x6d\x0f\x30\xbc\x42\x47\x83\xe3\x64\xec\x05\xb8\x05\x08\x87\xb0\xfa\x21\x7c\xd8\x1f\xfc\xff\x74\x30\x38\x1d\xbe\x1e\xf7\xfb\x23\xf6\xfb\xf7\x33\x93\x1f\x24\x93\x33\xdf\xa9\x98\xdc\x0b\xd8\x64\xbc\x00\xdb\x57\xd1\x1d\x6c\xd8\xdd\x2d\xa8\x0b\xd3\x21\x9c\x02\xd3\xe1\x16\xd0\x86\x17\x6c\xa6\x74\x2f\x68\x04\xe9\x25\x15\x4f\x09\xd2\x61\x72\x8f\x0b\xe9\x05\x05\x4d\xab\xaa\x02\xd2\x1b\x9b\xfb\x44\x72\xb7\x0e\x6e\xcf\x7c\x25\x99\x79\x23\xb6\x8b\x76\xbb\x53\xfb\xc6\xa1\x95\xd0\x9e\xad\xe1\x61\x91\x3b\x73\xd9\x61\x91\x3b\x48\x6e\x46\xee\x6c\x4b\x68\x27\x77\xa9\xc8\x37\x20\xf7\x2a\x1b\x62\xfb\xc2\xa1\xb8\x03\xd8\xd1\x43\x83\x41\x0f\x0d\x5f\xf7\x50\x3f\xf7\xcb\xda\x7c\x1a\xbf\xed\xae\xdb\x2b\xe5\x97\xd1\x55\x1c\xa3\xe1\xfd\x7c\xfd\xc3\x41\xe3\x43\x80\xfa\x5c\x54\xcd\xbe\xdf\xef\x0f\x4e\xd9\x6f\xdd\xd9\xef\xf1\x53\x01\xdb\xcb\x7b\xf0\x54\x50\xa1\xa3\xc1\xf9\xf5\x2e\xa4\xff\x7b\xdd\xc2\x63\x01\x8b\xab\xff\xb9\x60\x30\x7c\xf5\xfc\x18\xd0\xda\x63\x00\x4b\x5a\x5b\xcf\x01\xdc\x69\xfa\x5e\xce\xa7\x0e\xd3\x85\xfd\x2c\x9e\x82\xfb\xd9\xbd\x11\x1a\x0c\x5f\x6d\xe4\x7e\x0f\x9a\x76\x06\xc3\x57\xdd\x46\xf8\x5f\x56\xf3\x94\xf8\x9f\x1b\xed\x51\x1f\x00\x8a\x12\x1a\x57\x50\x7d\xef\xe9\xf3\xbe\xd6\x01\xfc\x39\x27\x49\x36\xde\x44\xfc\x99\x95\x1b\x82\xff\x66\x33\x6f\x37\xe6\x1e\x92\x3e\xb7\xd3\x61\xa1\x3e\xd3\xdc\x8c\xf5\xb9\xf9\xb5\xc3\xbe\x5c\xdb\x1b\xd0\xfe\xd6\xf6\x2f\x61\xec\x36\xcc\xa1\x24\xf6\x2d\xea\xb9\x46\x64\x5f\x73\xa6\x29\x06\xed\x1f\x2a\x9e\xf3\x0d\xb8\x07\x7c\x5e\x25\x64\xab\xe3\xa5\xb0\xc1\x7e\xf7\x23\xa7\x1d\x42\x17\x91\x5b\x61\x74\xfb\x99\xd3\xdb\xe4\x74\x91\xba\xb6\x48\x3d\xf5\x9c\x3e\x56\xcf\xbc\xa6\x8b\xd6\x45\xc4\x42\x6d\xcb\x7f\x0d\x40\xdc\x67\xd5\xde\xae\xc3\xed\x33\xde\xa1\x23\xda\x37\xa3\xf7\x2a\x75\x4f\x89\xdf\x53\x03\x3e\x2a\xc1\xcb\x22\x1a\x30\x7c\xea\x78\x7d\x14\x5f\x74\xbc\x0e\x8e\x2f\x78\xaa\xd2\xde\x15\xfb\x40\xfe\xf2\x4b\x66\xf2\xa6\x4c\x5f\xc7\xe2\x55\xe3\xda\x87\xc7\xf6\xa9\xd1\x0e\x8b\xee\x85\xea\x66\x7c\x9f\x6e\x0c\xed\x84\x5f\x3e\x11\x1a\x30\x7e\x83\xad\x51\x45\xfb\x5b\xd1\x8b\x92\xf8\xb7\x3a\x03\x34\x32\x7f\xd5\xb8\x4f\x96\xfa\xd3\xad\xb9\x07\xdc\x5f\x2d\x65\xc7\x43\x69\x1c\xa5\x5f\xcb\x28\xaf\xa4\xcb\x16\x90\x00\x37\xb9\xec\x73\xae\xf1\xb1\xdb\x35\xd9\x0c\x5c\x57\x14\x06\x9e\xa0\x54\x28\xfe\xe7\x1a\x4f\x28\x66\xbb\xdf\x9b\x32\x39\x5c\x57\xda\x9e\x29\x49\x23\xac\xbe\xc5\x57\x11\x80\x59\xaa\xd0\x1f\x5a\xb3\xee\xa6\x71\xeb\x10\xe4\x0e\xd1\x09\xdf\xc2\xae\x3b\x94\x64\xba\x43\x2e\xd3\x75\x87\xeb\x65\x86\x11\xad\x90\x3a\x94\xb4\xc2\x95\x75\x5a\xb9\x9b\x8b\x11\x56\x6a\x13\x79\xd5\xd9\x03\x9c\x62\xd9\xb3\xd7\x53\xc5\xc5\xe7\x7d\xf4\xad\xbe\xeb\x8a\xb7\x33\x47\xe7\x50\xc7\x54\x71\xa0\xbc\x15\xa2\xb0\x4e\x52\x12\x3c\xfe\x32\xa5\x90\x05\xae\xb7\x85\x34\xac\x54\xf7\x55\xb1\xfa\x52\x8c\x4c\x72\x79\x03\x88\x3d\xa5\x48\x86\x4c\x15\xc5\x94\xa4\x7d\xb5\x26\x25\x3d\x54\x79\x5a\xec\xf5\xa9\xb1\x4b\xe9\x11\xdd\xa5\x04\xcd\xd2\xb3\xb0\x90\xa2\x54\x7f\x0b\x49\xca\xcd\xa2\x76\x9a\xf2\xd2\x4b\x5b\x86\xff\xc1\x90\x22\x4d\xd6\xcd\x1d\xb6\x8a\xb9\x11\xed\xb5\xa6\x46\xfc\xb5\xe0\x91\x18\x50\x15\xea\xe6\x4e\x2a\x5b\xbc\x9f\x94\x92\x14\x5a\x0a\x19\x11\xaa\x5b\x48\x48\x4e\xbb\x52\xf8\xaf\xec\x55\x86\xc0\xa9\xdf\xa4\x90\xb9\x49\x94\x92\x33\xf6\x82\x7a\x5f\xbd\xcb\x67\x88\x77\xf2\x02\x8d\x09\x62\xdf\x2c\x39\x62\x43\xd6\x4e\x0e\xf4\x11\xb3\x5a\x2e\x71\x38\x4d\x92\x7f\x03\x00\x00\xff\xff\x11\x76\x60\x8a\x33\x43\x00\x00")

func tmplX_helpers_testHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplX_helpers_testHtml,
		"tmpl/x_helpers_test.html",
	)
}

func tmplX_helpers_testHtml() (*asset, error) {
	bytes, err := tmplX_helpers_testHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/x_helpers_test.html", size: 17203, mode: os.FileMode(420), modTime: time.Unix(1511965050, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmpl/model.html": tmplModelHtml,
	"tmpl/x_helpers.html": tmplX_helpersHtml,
	"tmpl/x_helpers_test.html": tmplX_helpers_testHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tmpl": &bintree{nil, map[string]*bintree{
		"model.html": &bintree{tmplModelHtml, map[string]*bintree{}},
		"x_helpers.html": &bintree{tmplX_helpersHtml, map[string]*bintree{}},
		"x_helpers_test.html": &bintree{tmplX_helpers_testHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

