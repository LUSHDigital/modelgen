// Code generated by go-bindata.
// sources:
// tmpl/model.html
// tmpl/x_helpers.html
// tmpl/x_helpers_test.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmplModelHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\x4d\x6f\xe3\x36\x10\xbd\xeb\x57\x4c\x85\x34\x90\x1c\xaf\x92\x43\xd1\x43\x0a\xb7\xd8\xda\x0a\x6a\xc0\xb1\xb7\xb1\xd2\x1e\x8a\x62\x97\x96\x46\xb6\x1a\x89\x74\x48\xca\x4e\xa0\xe8\xbf\x17\xfc\xf0\xb7\xec\x3a\xc0\x76\x05\x04\x50\xa8\xe1\xbc\x37\x8f\x33\xcf\xac\xaa\x04\xd3\x8c\x22\xb8\x05\x4b\x30\x77\xeb\xda\x99\x93\xf8\x89\x4c\x11\xf4\x82\x70\x9c\xeb\xd6\x87\xe3\xcf\x95\xf3\x06\x5d\x96\x20\x4c\x91\x22\x27\x12\x13\x98\xbc\x9a\xad\x53\xa4\xf0\xe6\xbc\x81\x7d\x7a\x23\x18\x8e\x22\x08\x7b\xfd\x28\x58\xad\xbd\x39\x57\x27\x72\xb7\xae\x1d\xe7\xfa\x1a\xfa\x29\xbc\xb2\x12\x96\x84\x4a\x90\x0c\xf0\x45\x22\x4d\x60\x82\x33\xb2\xc8\x58\xc9\x6f\x55\xcc\xa7\x1c\x89\x40\x88\x39\x12\x89\x40\x20\x2e\x85\x64\x05\xa4\x59\x8e\x90\x51\x90\xb3\x4c\x40\x92\x71\x8c\x25\xe3\xaf\x6a\x03\xa1\xc9\x2a\x5a\xce\x10\x0a\x94\x33\x96\x08\xf5\xce\x51\xa1\x90\x05\xcb\x12\x60\x0b\xe4\x4b\x9e\xc9\x8c\x4e\x15\x07\x0e\xb1\x2a\x75\x99\xc9\x99\xde\xb5\xa9\x99\x51\x0c\x1c\x27\x2b\xe6\x8c\x4b\xf0\x1c\x37\x2d\xa4\xeb\xb8\x09\x91\x64\x42\x04\x5e\x8b\xe7\xdc\x75\x54\xc1\x55\x05\x9c\xd0\x29\xc2\xc5\x53\x1b\x2e\x16\xb7\x1d\x08\xee\x95\x56\x41\x5f\x6f\x15\x50\xd7\x3a\xce\xad\xaa\x8b\xa7\xba\x5e\x6d\xfa\x00\xaa\xe4\xba\x76\x7c\xad\x48\x55\xd9\x5d\x43\x52\x60\x5d\x03\xc7\x39\x47\x81\x54\x0a\x20\xc0\xd9\xd2\x94\x8c\x9b\xb8\x88\x4c\x72\xb4\xc1\x52\xbd\x3b\xf2\x75\x8e\x07\x79\x84\xe4\x65\x2c\xa1\x3a\x4d\xf5\x2e\xc3\x3c\x59\x33\xb5\xa1\x17\x0b\x9d\x04\xea\xda\xfe\x17\x29\x80\xba\x86\x2f\xff\x08\x46\x6f\x55\x3d\x8b\xa0\xcb\xf2\xb2\xa0\x06\xcc\xfd\xb2\x5f\x1b\x4b\x53\x81\x12\x32\x2a\x9d\x3c\x2b\x32\xf3\x56\x9b\x16\xa0\x02\xb9\x04\x02\x14\x97\x87\xd5\x9f\x55\x70\x5a\xd2\x18\xbc\xaa\x0a\x1e\x30\xc6\x6c\x81\xbc\xae\xa1\xb5\x97\xca\xb7\x40\x5e\x32\x81\x96\x78\xce\x83\xde\xaf\x3e\x78\x39\x11\xd2\xac\xf7\x7b\x8a\xd3\x8f\x3f\xb4\x01\x39\x57\x7f\x8c\xfb\x56\xad\x98\x51\x21\x41\xc8\x42\x42\x07\xdc\xfe\x70\x1c\x3e\x44\xd0\x1f\x46\xa3\x66\x4e\xde\x7a\xd5\xaa\xf9\x06\x99\x86\xf8\x9c\xea\xff\x15\x97\x3f\x3e\x0e\x1e\xc3\xf1\x89\xd0\x05\xc9\x4b\x54\xa1\xa6\x4d\x38\x0a\x43\xec\xb6\x03\xc9\x24\x08\x5f\x30\xf6\x14\xa1\xb6\x3a\x91\x60\xb3\x8d\xf0\xa9\x3a\x3d\x5f\x6f\xca\x52\xbd\xe5\xbb\x0e\xd0\x2c\xb7\xb5\x98\x64\xb2\xe4\x14\x6e\x74\x46\xbd\x5a\x3b\x5b\xeb\x1c\x45\x30\xd8\xe8\x92\x78\xbe\x3d\xa9\xc7\x79\xa2\x27\x90\x02\xbe\x64\x42\x0f\xce\xff\x79\x5e\x06\x6e\xeb\xbc\xda\x90\x25\xe6\x90\x7c\x73\x40\x8d\xe7\xf3\xf8\xa9\xf7\x31\x0a\x9b\xe1\xc7\x61\xb4\x12\xac\xd4\xd9\xad\xce\xaa\x99\xff\xfc\x2d\x7c\x08\x15\x42\x07\x7e\x31\xa2\x7f\x3e\x2d\xb9\xcd\x60\x25\x07\xc5\xce\xdf\xd6\x51\x89\x6b\x84\xbb\xcb\x68\xf2\xcd\x64\x53\x60\xef\x16\x6d\x1c\x0e\xc2\x6e\x04\x2d\xb8\x7b\x18\xdd\x37\x73\x38\xd4\x47\xb1\x36\xe2\xfc\x5e\x22\x7f\x7d\x60\x4b\x2b\xd0\x9e\x10\x9c\x2d\x83\x71\x4c\xa8\x67\x85\x13\x31\xa1\x9b\x59\xb0\x1a\x0d\x18\x49\x80\xe4\x79\x1b\x18\x07\x02\xa2\x9c\x28\xc3\x60\x69\x93\x56\x02\x52\xce\x8a\xaf\x23\x97\xc2\xdd\xf5\x04\x85\xfb\xd7\xdf\x7b\x81\x0d\xb6\xa0\xb5\xbb\x3d\x4b\x3c\xd7\x59\x0d\xe4\x0e\x9d\xc0\x78\x61\xa7\x03\x37\x70\x79\xb9\xf7\xcd\x5a\xe6\xcf\x70\x73\x38\xba\x02\x65\x1b\xd2\x42\x06\xa1\x22\x94\x7a\x6e\x4c\x28\x65\x12\x9e\xd5\x39\x98\xdf\x30\xbb\x7d\x52\x4a\xa0\x0c\x34\x90\xeb\xdb\x61\x3f\x45\x66\x17\x4f\xd7\x78\xd5\xd1\x58\xe3\x39\xcf\xa8\x4c\x3d\x17\x06\xfd\xfb\x7e\x04\xdf\x27\x6e\xbb\x29\x85\xbf\x65\x29\x07\x20\x8d\x55\x35\xa3\x8c\xee\xee\xd4\xbc\x36\xc0\x98\x24\xdb\x38\x09\xa6\xc8\x41\x9d\xb8\xe7\x6f\x25\x6e\x54\x1b\x6e\x8e\x7c\xb7\xdc\x56\x01\xb5\xe7\xaf\xda\x7c\xc7\x7c\x75\xb3\xeb\x4e\x3f\xc7\x66\x0f\x48\xaa\x74\x41\x37\x67\x02\x6d\x7e\xf5\xa4\xcc\x7e\x18\xe2\x8b\xdc\x29\x61\x0b\xa1\x63\x42\xec\x28\x1d\x4e\xd2\x4f\xcd\x3c\xf6\xb8\x6c\xf8\x68\xe9\x75\xc1\x64\x3e\x47\x9a\x78\xba\xad\x5a\x3b\xa2\xec\xb4\x8c\xcd\x62\x06\xb6\x87\x39\x9e\xf1\x6b\xf0\xf5\x26\xd5\x00\xbe\xdb\xda\x7a\xe1\x20\x8c\xc2\x77\x19\xdb\x31\xe3\x3f\x6a\xf0\x5d\x56\xaa\x0b\xec\x0c\x81\x96\xc5\x04\xb9\xf2\xad\x77\xf9\xd4\x7f\x16\xaf\x11\x76\x7d\x2a\xd6\xa0\xe7\x5d\x5a\xac\x45\x75\x47\x8f\xc3\xc8\x6b\xf9\xa7\x9c\xea\x84\xb3\xef\xf4\x7b\x67\xe3\xeb\x97\x9a\xca\xb1\xfe\x3b\x98\x83\x9d\x36\x5a\x63\xdb\x65\x7d\x4f\x37\xca\x00\x25\xc5\xb9\xcd\xb1\x4e\xe3\xf9\xea\xaa\xab\xbb\xd1\xb1\xe7\xe4\x36\x17\x6a\xf0\xc7\x28\x07\xda\x17\x04\x4a\x83\x6d\x4c\x54\x9b\xc5\x99\xe0\xab\x1c\xde\xfa\x6e\xeb\x1f\x44\x41\xe5\x34\xbb\x91\x01\xb2\x54\x77\x42\x36\x0c\x47\xc6\x99\xf6\x28\x1a\xbf\x3a\x9f\xa3\xc9\xe2\x6d\xee\xe2\x67\xb0\x5c\x7b\xa2\x05\x3b\xc2\xb3\xaa\x90\x26\x75\xed\x38\xff\x06\x00\x00\xff\xff\x3a\xad\xf4\xdb\x74\x0e\x00\x00")

func tmplModelHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplModelHtml,
		"tmpl/model.html",
	)
}

func tmplModelHtml() (*asset, error) {
	bytes, err := tmplModelHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/model.html", size: 3700, mode: os.FileMode(420), modTime: time.Unix(1511787402, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplX_helpersHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x58\x4d\x6f\xe3\x36\x13\xbe\xf3\x57\xcc\xea\xf0\x42\xd2\x3a\xf2\xbe\xc8\x6e\x81\xba\xf0\xa5\x45\x83\x6e\xd1\xec\xb6\x49\xba\x97\xa2\x07\x5a\xa6\xbc\x4c\x25\xca\x21\xe9\x04\x81\x37\xff\xbd\xe0\x97\x48\x49\x96\xfc\x91\xa4\x39\x38\x09\x35\xf3\x70\x9e\x99\x67\x28\x8e\xd7\x38\xff\x07\xaf\x08\x54\xf5\x92\x94\x02\x21\x5a\xad\x6b\x2e\x21\x46\xd1\x12\x4b\xbc\xc0\x82\x4c\xc5\x5d\x19\xb5\xff\x9d\x2e\x39\xbd\x27\x3c\x42\x11\x61\x79\xbd\xa4\x6c\x35\xbd\x15\x35\x8b\x50\xc4\x49\x51\x92\x5c\x46\x28\x92\xb4\x22\x11\x42\xd1\x8a\xca\xaf\x9b\x45\x96\xd7\xd5\x74\x55\x9f\x89\xbb\xf2\xcc\x38\x4f\xab\x47\x0d\x9c\x20\x34\x9d\xc2\xb5\x5c\xde\xd0\x8a\xc0\x9a\xd7\xf7\x74\x49\x04\x2c\x49\x81\x37\xa5\x84\xeb\x3f\x7e\x83\x9b\x8f\x97\x3f\x43\x51\xf3\x0a\x4b\x94\xd7\x4c\xc8\xc6\x7c\x0e\xd1\xff\x3f\xcc\xde\xbd\x9f\xbd\xfb\x10\x21\x34\x4d\xcf\xc2\x9f\xb7\xe8\x1b\xdc\x3c\xae\x09\xe0\x92\x62\x41\x04\x7c\x43\x6f\x5b\x06\xe9\x54\xef\xfd\x69\x53\x96\x17\x65\x8d\xe5\x77\xef\x1b\x53\x71\x57\x66\xc1\x3a\x92\x0a\x27\x34\xec\x1a\x38\xa0\x6b\xc9\x29\x5b\xf5\x70\xcc\xb2\x87\xb1\x66\x9d\xc7\x0e\xe4\xc7\xba\x2e\x7b\x10\x6a\xd1\x03\x68\x93\xd6\x23\xe7\xfc\x91\xed\x22\xa2\x57\xbd\xbb\x31\x6a\x3f\x74\x00\x3a\xb3\x5d\x7f\xb5\xe8\xdd\xb5\x89\x2e\xa0\x7f\xa8\xdc\xaf\xf0\xc3\xaf\xd7\x9f\x3f\x35\xde\x4a\x15\xd9\x15\x7e\xb8\x24\x42\xe0\x95\x05\x70\x46\xdd\x87\xdd\xfa\xb5\x7e\x00\x00\x74\x45\x83\xec\xd1\x6a\x5d\x92\x8a\x30\x89\x25\xad\x59\xbf\xbe\x67\xbb\xaa\xfd\x27\xab\x30\x17\x5f\x71\xa9\x63\x28\x6a\x1e\x20\xa2\x62\xc3\x72\x88\x59\xb0\x94\xb4\x1d\xe2\x05\xfc\xf5\xf7\xe2\x51\x92\x04\x08\xe7\x35\x87\x2d\x22\x9c\xc3\x6c\x6e\xd8\x34\xb6\xf1\x62\x02\xff\x63\x99\xc5\x40\x2c\xfb\x82\x4b\xba\x84\xb9\xf2\x82\xf9\x1c\x18\x2d\x11\x27\x72\xc3\x99\x5a\x41\x4f\x3a\xb4\x2f\xb8\xdc\x90\x43\x42\xd2\x86\x71\x02\xb1\x69\xa5\x4c\xff\x3f\x31\x11\x25\xb0\x45\xb4\x80\x37\x6e\xcb\xad\xdb\x87\xd1\x72\xa2\xf7\x7d\x6a\x56\x6c\x7c\x6e\x59\x37\x62\x8e\xd9\x50\x08\x69\x18\x83\x32\x8c\x05\xcf\x81\x32\x49\x78\x81\x73\xb2\x7d\xf2\x49\xb9\xc7\x1c\x70\x57\xde\xb4\x00\x9b\x2c\x9c\x39\xf7\xe4\x07\xbd\xf6\x46\xa7\xc4\x07\x6b\x92\xe2\x02\x04\xed\xd1\x80\xd8\x43\x26\x53\xcd\xfd\xb9\xd0\x28\x1e\xc0\xa7\x5a\xf2\x0d\x09\xc8\x36\x14\x2f\xf7\xd7\xbf\xc5\x34\xb0\x57\x39\x37\xf5\x0f\xb2\x6d\xb8\xa6\xa2\x89\xcf\xa7\x1e\xc3\xdc\xcb\xc0\xc7\xa2\xb5\x62\x61\x63\x9c\xe8\xb8\x46\xb4\x7f\xd6\x08\xdf\x9d\x3e\xc7\x29\x7f\x5c\xfa\xee\x04\x6b\x71\xb7\x8b\xcf\x53\xbf\x03\x39\x50\xfe\xbb\xea\x32\x1e\xdc\x81\x95\x29\x2c\xc8\xae\xd2\xb8\x0d\x46\x6b\xd3\x69\x8b\xf1\xa0\x8e\x69\x8c\x0b\x1f\xd9\xb1\x9d\xe1\xa4\xa0\x5c\x02\x98\x67\xf6\x46\xfb\x08\xea\x12\x6d\xf1\x7c\xb1\x43\xc8\x22\xfa\x53\x68\xa4\x15\x5c\x23\x98\xf7\xd7\x51\x6d\x30\xda\x04\xe6\x0d\x18\xf2\xd4\x2b\xcf\xd3\xbf\x81\x38\xe9\xf0\x1f\x8c\xe7\xc5\xb2\xae\xf1\x06\x4f\xfe\xf6\xfe\x69\x10\xc0\x31\xf2\x36\x28\x27\x88\xdb\x94\x57\x39\x34\x10\xaf\x70\xe8\x0f\x93\x3c\xf0\x60\xa1\x6c\xe8\x58\x31\xd0\x27\x1e\xf8\x4e\xe4\xfa\x8e\x77\x8c\xc6\x47\x25\xae\x2f\x89\x2d\xb2\x6a\xe5\x79\x0a\xd7\x08\x27\x09\xbc\x15\x8d\x0f\xe6\xc5\xe4\xad\xe0\x06\xd5\x3d\x94\x8a\x63\xb4\xad\x31\x4e\x90\xb6\x2e\xaa\xb2\x77\x00\xaf\x20\xec\x21\x7e\x07\xca\x7a\x61\x23\xeb\xa9\x5a\xe3\x3e\x53\xd4\x7a\x74\x78\x31\x51\xeb\xc9\x23\x94\x91\x5a\xd8\xaf\x69\xa1\x4a\x66\x2e\x6c\xf1\x22\x41\x92\x56\x13\x57\x48\x35\xb7\x66\xbf\x63\x2e\x48\xac\xff\xbc\xba\xf8\xe9\xfc\xfc\xfc\xfb\x09\x88\xc4\x95\x7b\x47\x75\x0a\x5c\x0a\xd2\xd1\x3c\xcb\xec\x8c\x2a\x69\xd5\x2d\xe4\x9e\x17\xef\x00\xad\x17\xeb\x0e\x05\x37\xd8\x1d\xad\xcd\x53\xbf\xfb\x21\xdd\xd1\x99\x09\x4f\xe8\x0f\x9b\x33\x9c\x39\x80\x57\xe8\x8f\x21\x86\x07\xf6\x87\xd6\x85\x0b\xaf\xd7\x24\xfa\xc1\x69\x4d\xa2\x7a\xc4\x4d\xc7\x47\xb4\xc8\x31\x93\x6d\x6a\xf1\xf7\xf7\x88\x21\xdb\x1d\xd2\x77\xbc\x06\x70\x82\x72\x55\x62\x8b\xac\x58\xa6\x0c\xe6\x90\xef\x53\x79\x27\xb4\x26\xb2\x7d\x32\xb7\xb0\xb6\x7f\x59\x72\xf0\xfc\xda\xec\xf0\x5f\x0c\xaf\xb7\x82\x85\x59\x31\xe9\x8d\xdd\x1c\x9b\xd8\x24\xdd\x0a\x76\xda\x84\xda\x70\xd9\x27\x5a\xdc\xbc\xbd\x7d\x19\xe3\x94\x25\x6e\x5b\x9c\xb5\x10\x06\x14\xaa\xa4\xf9\x0b\x29\xd7\x84\x83\x0a\x61\x58\x93\x56\x8c\x37\x75\xf0\x45\x8d\xd9\x49\x00\x06\x46\x1e\x7a\x6c\x42\xd3\x58\xb8\x41\x3a\x09\xbf\xe9\xd1\x47\x9b\xb0\x57\x0b\x9f\xe8\xd0\xaf\x55\xad\xad\xee\xc9\x99\x39\x96\x9f\x12\xdf\x8e\xc3\x1e\xe6\xd7\x0c\x52\x31\x01\xeb\xad\x8e\x94\x27\x37\x01\x9a\x28\xcd\xc5\xb4\xcf\x27\xb8\x4a\x06\x86\x31\xb5\x77\xc4\x24\x18\x5a\x34\x17\xba\x93\x8b\x71\x6a\xdd\x9e\x47\x99\xec\xb2\xd7\x9f\x33\x48\xe9\x18\x0d\x37\x3c\xf6\x89\xb4\x46\xbe\x96\xb1\x22\x53\xb8\xe1\x2f\x04\x19\x21\xe4\x5c\x3b\xf3\xee\x28\xa9\x21\x1f\xfb\x7b\x1f\x35\x7d\xbf\xca\x39\xc1\x92\x84\xbc\xfc\x95\xc8\x9b\xc5\x0b\x73\xd7\x49\xfc\x6d\x5b\x73\x59\xec\xe4\xa2\x3d\xc2\xdb\xdf\x28\x8b\xbe\xb5\xfa\x98\x41\xba\x18\x0b\x5e\xbf\xfc\xfa\xc1\xfb\xf7\x95\x37\x8b\x25\x34\xef\xa1\xc4\xdf\xac\x5a\x21\x6b\xbb\xf6\x2b\x79\xab\x3e\x66\x20\xfb\x51\xfc\x1b\x00\x00\xff\xff\xf8\xee\xfc\xb3\x0a\x18\x00\x00")

func tmplX_helpersHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplX_helpersHtml,
		"tmpl/x_helpers.html",
	)
}

func tmplX_helpersHtml() (*asset, error) {
	bytes, err := tmplX_helpersHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/x_helpers.html", size: 6154, mode: os.FileMode(420), modTime: time.Unix(1511787402, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplX_helpers_testHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x9b\x5f\x6f\xdb\x36\x17\xc6\xaf\xa5\x4f\xc1\x08\x68\x60\x05\xae\x6a\xbb\xc5\xfb\x02\xde\xbc\x8b\xae\x1d\xb0\x01\xed\x80\xd5\xed\xc5\x8a\xa2\x95\x6c\x3a\x15\xaa\x3f\x09\x45\x27\x0b\x02\x7f\xf7\xe1\x90\x94\x25\x51\xa2\x25\x9b\xd4\x62\x07\x29\x52\xd4\x95\xc8\xc3\x87\x3c\x0f\x0f\x7f\x12\x9c\x2b\x7f\xf1\xc3\xbf\xc4\x28\x4e\x97\x38\xca\x6c\x3b\x8c\xaf\x52\x42\xd1\xc0\xb6\x9c\xa5\x4f\xfd\xc0\xcf\xf0\x8b\xec\x3a\x7a\xb1\x24\xe1\x0d\x26\x8e\x6d\x39\x04\xaf\x22\xbc\xa0\xf0\x91\xe2\x8c\x86\xc9\x25\xfb\x18\xc6\xd8\xb1\x5d\xdb\x5e\xad\x93\x05\x9a\xe3\x8c\xbe\x5f\x47\xd1\x07\x4a\xc2\xe4\xf2\xeb\xc7\x24\xf6\x49\xf6\xdd\x8f\xfe\xf8\xf0\xe7\xfb\x01\x45\x17\xa2\xa3\x37\x77\xd1\xbd\x6d\xc1\xff\x32\x34\x9d\xa1\xcf\x5f\x32\x4a\xd6\x0b\x0a\x17\xad\xc4\x8f\x31\x42\x08\x65\x2c\x06\x5c\x40\xfc\x4f\x11\xd8\xb6\xac\x2c\x5d\x93\x05\x46\xe8\xf3\x97\xe0\x8e\x62\xdb\xb2\x6e\xfd\x84\xbe\x25\x04\x05\x69\x1a\xd9\xd6\x06\x22\xc1\x5f\x16\x6e\x0a\xdd\x9d\x1b\x3f\x0a\x97\xce\x10\x2e\xf2\xde\xd3\xbc\xfb\xe0\x9b\xf3\x1d\x47\x51\xea\x7c\x73\xd9\x6d\x11\x6b\x8a\x56\x7e\x94\x61\xb8\xb4\x19\xd6\xe3\x85\xc9\xae\x88\xf7\xce\x0f\x7c\xe7\x4c\x61\xd4\x35\x76\x36\x72\x64\x4a\xd6\xca\xc0\x38\xbe\xa2\x77\x8d\x61\xef\x37\xea\x28\x1b\xdb\x5a\xa5\x04\x7d\x1d\x22\x4a\x61\x51\x89\x9f\x5c\x62\xc4\xd7\x18\x06\xa0\xde\x5f\xeb\x64\x40\xa9\x07\x03\x0d\x11\xe4\xab\x9e\x12\xcb\x0a\x57\x08\x13\x02\x01\xa0\xa9\x27\xa5\x90\x7a\x5c\x91\xfb\x13\x1a\x40\xb3\xb3\x19\x4a\xc2\xc8\x85\x7f\x29\xf5\xf2\x1c\xb0\x40\x16\xf5\xde\x12\x92\x92\xd5\xc0\x29\x32\x27\xc5\x73\x61\xac\x94\xa0\x19\x7a\x76\x33\x44\x79\xf7\x67\x37\xce\x10\x6e\x0c\x4b\x31\x5d\x08\xb9\x81\xa9\xba\x30\xd5\x4d\xb3\xe1\x3e\xc1\x62\x9b\x35\x1a\x8c\x0f\x17\xf9\x46\xf0\xd8\x08\xad\x76\x2b\x7b\x2d\x99\x96\x02\xf2\x95\xf9\x04\x77\xa7\x68\x9b\x3e\xcb\xe2\x77\xa7\x48\xf8\x90\x5d\x2c\x72\x3d\x95\x05\x0c\x44\xbb\xae\x76\xad\x7a\x55\xad\x68\x1b\x40\x1e\x3c\x09\xa3\x1d\x43\x19\xb2\xde\x65\x4a\x87\x15\xf3\xf1\xb9\xba\xc2\x96\x87\x19\x4e\xc4\xd8\xcf\x68\x16\xc1\x74\x4d\x92\xdc\x73\x30\xfa\x99\xa8\x7f\xde\x1b\x8c\xaf\xde\x5e\xaf\xfd\x68\xc0\xf4\x8a\x9e\x6e\x17\x0d\xc5\xe8\x7c\xe8\x4a\x80\x4e\x06\xff\xb0\xf0\x13\x6d\x7f\x5f\xd4\x0c\x5e\x38\xd9\xca\xc8\x82\x35\x0a\x13\x8a\xc9\xca\x5f\xe0\xfb\x4d\xab\xbf\xcf\x65\x3b\x35\xd9\xb9\xee\x7a\xee\xb1\x8c\x2c\x98\xc5\x90\xe3\x74\x75\x73\x12\x46\x88\xd7\xd5\xc3\x14\xc8\x36\xdf\x4a\xf8\x4f\x6c\x2e\x55\x58\x9e\x52\xea\x65\x64\x71\x70\x55\x65\x31\x0e\x28\xa6\xa0\x25\xdf\x69\xe1\x12\xcd\x66\x7c\xc2\xe8\xfc\x1c\x71\x45\x42\x4a\x6d\xec\xec\x7b\xba\x8e\x96\x88\x6f\x13\x94\xac\xa3\xc8\x51\x05\xad\xc4\xe2\x33\x66\xa2\x6b\x31\x45\x8d\x12\x99\xed\xb6\x1f\xde\x19\xe4\x8b\xfa\xb6\x80\xab\x1d\x01\xc3\xe4\x8e\xd8\x56\xdd\x43\xe9\x84\x8b\xe1\x69\x69\x57\xd4\xb2\x39\x6a\x6a\x20\x6c\x77\x29\xf2\xc9\x53\xd3\x21\xc6\x6d\x5d\x83\xdd\xd3\xef\xeb\x08\x2a\x1b\x4c\xef\x20\x7a\x77\x38\xf7\x18\x3e\x8e\xaa\x4a\x34\x0e\xa5\xd7\x69\x1a\xf5\x00\xf9\xaf\xc5\x49\x64\x16\xf1\x99\x5d\x9e\x00\xbf\x37\xc0\x87\xac\xf5\x85\xf7\xcc\x68\xe6\xe0\x5e\x18\xcc\x14\xda\x43\xb8\xe6\x5a\x66\xc1\xad\x1d\x05\xbe\xc2\xf4\xd0\x48\x0b\xe8\x6b\x3a\x1e\x13\xce\x33\x7b\x3d\x28\xcc\x57\x14\xe8\x56\x4d\x73\x20\x5f\x32\xb3\x09\x8c\x2f\x4c\x24\x7b\x57\x71\x52\x6f\xe1\x79\x7b\xfd\x70\x82\x6f\x1f\x5c\x89\xee\xc5\x8d\x93\x81\x77\x66\xa8\xd3\x42\x77\x90\xac\x07\xee\xcc\xfd\xc6\xb1\x5d\xaa\xe8\x1a\xd0\xae\x2e\xe6\x0a\x30\xdd\x8f\x2b\x94\x68\xde\xbd\x78\x1b\xe4\xf0\x1e\x26\x7b\xc4\x20\xce\xf6\xdb\x11\x60\x78\x83\x0e\x8d\xe3\x64\x1e\xc6\xb8\x07\x08\x87\xb0\xe6\x21\x7c\x32\x1a\xff\xff\xf9\x78\xfc\x7c\xf2\x6a\x3e\x1a\x4d\xd9\xcf\xdf\x4f\x4c\x7e\x92\x4c\xce\x7c\xa7\x62\xf2\x30\x66\x93\x09\x63\xec\xbd\x4f\x6f\x61\xc3\x1e\x6e\x41\x53\x98\x0e\xe1\x14\x98\x0e\xb7\x80\x36\xc2\xb8\x9d\xd2\xc3\x58\x0b\xd2\x6b\x2a\x1e\x13\xa4\xc3\xe4\x1e\x16\xd2\x2b\x0a\x74\xab\xaa\x02\xd2\xb5\xcd\x7d\x21\xb9\xdb\x04\xb7\x17\xbe\x92\xcc\xdc\x8a\xed\xa2\xdd\xe1\xd4\xde\x3a\xb4\x12\xda\x8b\x35\x3c\x2d\x72\x67\x2e\x3b\x2d\x72\x07\xc9\x7a\xe4\xce\xb6\x84\x71\x72\x97\x8a\xbc\x06\xb9\x37\xd9\x10\x7b\x6f\x7c\x8a\x07\x80\x1d\x43\x34\x1e\x0f\xd1\xe4\xd5\x10\x8d\x4a\x3f\xac\xcd\xc7\xf9\xaf\xee\xae\xbd\x52\x7f\x19\xdd\xc4\x31\x06\xde\xcf\x77\x3f\x1c\x0c\x3e\x04\xa8\xcf\x45\xd5\xec\x47\xa3\xd1\xf8\x39\xfb\xe9\x3a\xfb\x23\x7e\x2a\x60\x7b\xf9\x08\x9e\x0a\x1a\x74\x68\x9c\x5f\xbf\x27\xf4\x7f\xaf\x7a\x78\x2c\x60\x71\xcd\x3f\x17\x8c\x27\x2f\x9f\x1e\x03\x7a\x7b\x0c\x60\x49\xeb\xeb\x39\x80\x3b\xcd\xdc\xcb\xf9\xdc\x61\xa6\xb0\x9f\xc5\x53\x70\x3f\xbb\x37\x45\xe3\xc9\xcb\x56\xee\x0f\xa1\xe9\x60\x3c\x79\xe9\x6a\xe1\x7f\x5d\xcd\x63\xe2\x7f\x6e\xb4\x07\x7d\x00\xa8\x4a\xd0\xae\xa0\xe6\xde\xd3\x97\x7d\x6d\x02\xf8\x4b\x4e\x92\x6c\xdc\x46\xfc\x85\x95\x35\xc1\xbf\xdd\xcc\xfb\x8d\x79\x84\xa4\xcf\xed\x74\x5a\xa8\xcf\x34\xeb\xb1\x3e\x37\xbf\x71\xd8\x97\x6b\xbb\x06\xed\xef\x6d\xff\x1a\xc6\xee\xc3\x1c\x4a\x62\xdf\xa3\x9e\x1b\x44\xf6\x1d\x67\x9a\x62\xd0\xd1\xa9\xe2\x39\xdf\x80\x47\xc0\xe7\x4d\x42\xf6\x3a\x5e\x2a\x1b\xec\xb7\x28\xf5\xfb\x21\x74\x11\xb9\x17\x46\xf7\x9e\x38\xbd\x4f\x4e\x17\xa9\xeb\x8b\xd4\x73\xcf\x99\x63\xf5\xc2\x6b\xa6\x68\x5d\x44\xac\xd4\xb6\xf2\xd7\x00\xc4\x7d\x56\xed\xbd\x2e\xdc\xbe\xe2\x1d\x06\xa2\xbd\x1e\xbd\x37\xa9\x7b\x4c\xfc\x9e\x1b\xf0\x41\x09\x5e\x16\xa1\xc1\xf0\xb9\xe3\xcd\x51\x7c\xd5\xf1\x26\x38\xbe\xe2\xa9\x46\x7b\x37\xec\x03\xf9\xcb\x2f\x85\xc9\x75\x99\xbe\x8b\xc5\x9b\xc6\xf5\x4e\x8f\xed\x73\xa3\x9d\x16\xdd\x0b\xd5\x7a\x7c\x9f\x6f\x0c\xe3\x84\x5f\x3f\x11\x34\x18\x5f\x63\x6b\x34\xd1\xfe\x5e\xf4\xa2\x24\xfe\xbd\xce\x00\x83\xcc\xdf\x34\xee\xa3\xa5\xfe\x7c\x6b\x1e\x01\xf7\x37\x4b\x39\xf0\x50\x9a\xa7\xf9\xd7\x32\xea\x2b\x19\xb0\x05\x24\xc0\x4d\x01\xfb\x5c\x6a\x7c\x1e\xb8\x36\x9b\x41\x10\x88\xc2\xc0\x13\x94\x0b\xc5\xff\x5c\xe1\x05\xc5\x6c\xf7\x87\x4b\x26\x87\xeb\xca\xdb\x33\x25\x79\x84\xed\xb7\xf8\x1a\x02\x30\x4b\x55\xfa\x43\x6b\xd6\xdd\xb6\x6e\x7c\x82\x82\x09\xba\xe0\x5b\x38\x08\x26\x92\xcc\x60\xc2\x65\x06\xc1\x64\xb7\xcc\x24\xa5\x0d\x52\x27\x92\x56\xb8\xb2\x4b\x2b\x77\x73\x35\xc2\x56\xed\x46\x5e\x75\xf6\x00\xa7\x58\xf6\xe2\xf5\x54\x75\xf1\x79\x1f\x73\xab\x1f\x04\xe2\xed\xcc\xd9\x0c\xea\x98\x2a\x0e\x94\xb7\x4a\x14\xd6\x49\x4a\x42\xc8\x5f\xa6\x54\xb2\xc0\xf5\xf6\x90\x86\xad\xea\x91\x2a\xd6\x48\x8a\x51\x48\xae\x6f\x00\xb1\xa7\x14\xc9\x90\xa9\xa2\x9a\x92\xbc\xaf\xd1\xa4\xe4\x87\x2a\x4f\x8b\xb7\x3b\x35\x5e\x2d\x3d\xa2\xbb\x94\xa0\x55\x7e\x16\x56\x52\x94\xeb\xef\x21\x49\xa5\x59\x74\x4e\x53\x59\x7a\x6d\xcb\xf0\x5f\x18\x52\xa4\xc9\xb9\xbe\xc5\x4e\x35\x37\xa2\xbd\xd1\xd4\x88\xdf\x16\x3c\x13\x03\xaa\x42\x5d\xdf\x4a\x65\x8b\xf7\x93\x52\x92\x43\x4b\x25\x23\x42\x75\x0f\x09\x29\x69\x57\x0a\xff\x99\xbd\xca\x10\x38\xf5\x8b\x14\xb2\x34\x89\x5a\x72\xe6\x61\xdc\xed\xab\x77\xe5\x0c\xf1\x4e\x61\x6c\x30\x41\xec\x9b\x25\x67\x6c\xc8\xce\xc9\x81\x3e\x62\x56\xff\x06\x00\x00\xff\xff\x98\xef\x52\x14\x8a\x42\x00\x00")

func tmplX_helpers_testHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplX_helpers_testHtml,
		"tmpl/x_helpers_test.html",
	)
}

func tmplX_helpers_testHtml() (*asset, error) {
	bytes, err := tmplX_helpers_testHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/x_helpers_test.html", size: 17034, mode: os.FileMode(420), modTime: time.Unix(1511787402, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmpl/model.html": tmplModelHtml,
	"tmpl/x_helpers.html": tmplX_helpersHtml,
	"tmpl/x_helpers_test.html": tmplX_helpers_testHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tmpl": &bintree{nil, map[string]*bintree{
		"model.html": &bintree{tmplModelHtml, map[string]*bintree{}},
		"x_helpers.html": &bintree{tmplX_helpersHtml, map[string]*bintree{}},
		"x_helpers_test.html": &bintree{tmplX_helpers_testHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

