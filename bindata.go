// Code generated by go-bindata.
// sources:
// tmpl/model.html
// tmpl/x_helpers.html
// tmpl/x_helpers_test.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmplModelHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x57\x5f\x6f\xea\xc6\x13\x7d\xf7\xa7\x98\x9f\x95\x5f\x64\x13\xae\x93\x87\xaa\x0f\xa9\x68\x75\x0b\x8e\x8a\x44\x20\x0d\x4e\xfb\x50\x55\xf7\x2e\xf6\x18\xdc\xd8\xbb\x64\x77\x0d\x89\x1c\x7f\xf7\x6a\xff\xf0\xdf\x50\x22\xdd\x16\x29\x92\x59\xcf\xce\x39\x73\x76\xe6\xb0\xa9\xaa\x04\xd3\x8c\x22\xb8\x05\x4b\x30\x77\xeb\xda\x99\x93\xf8\x99\x4c\x11\xaa\x0a\x82\x07\xf3\x3c\x24\x05\x42\x5d\x3b\xce\x75\xeb\xd3\xf1\xcf\x95\xf3\x0e\x5d\x96\x20\x4c\x91\x22\x27\x12\x13\x98\xbc\x81\xce\x3b\x45\x0a\xef\xce\x3b\xd8\x4f\x6f\x04\xc3\x51\x04\x61\xaf\x1f\x05\xab\xb5\x77\xe7\xea\x44\xee\xd6\xb5\xe3\x5c\x5f\x43\x3f\x85\x37\x56\xc2\x92\x50\x09\x92\x01\xbe\x4a\xa4\x09\x4c\x70\x46\x16\x19\x2b\xf9\xad\x8a\x79\xc8\x91\x08\x84\x98\x23\x91\x08\x04\xe2\x52\x48\x56\x40\x9a\xe5\x08\x19\x05\x39\xcb\x04\x24\x19\xc7\x58\x32\xfe\xa6\x36\x10\x9a\xac\xa2\xe5\x0c\xa1\x40\x39\x63\x89\x50\xcf\x1c\x15\x0a\x59\xb0\x2c\x01\xb6\x40\xbe\xe4\x99\xcc\xe8\x54\x71\xe0\x10\xab\x52\x97\x99\x9c\xe9\x5d\x9b\x9a\x19\xc5\xc0\x71\xb2\x62\xce\xb8\x04\xcf\x71\xd3\x42\xba\x8e\x9b\x10\x49\x26\x44\xe0\xb5\x78\xc9\x5d\x47\x15\x5c\x55\xc0\x09\x9d\x22\x5c\x3c\xb7\xe1\x62\x71\xdb\x81\xe0\x5e\x69\x15\xf4\xf5\x56\xa1\x04\x57\x71\x6e\x55\x5d\x3c\xd7\xf5\x6a\xd3\x27\x50\x25\xd7\xb5\xe3\x6b\x45\xaa\xca\xee\x52\x67\x54\xd7\xc0\x71\xce\x51\x20\x95\x02\x08\x70\xb6\x34\x25\xe3\x26\x2e\x22\x93\x1c\x6d\xb0\x54\xcf\x8e\x7c\x9b\xe3\x41\x1e\x21\x79\x19\x4b\xa8\x4e\x53\xbd\xcb\x30\x4f\xd6\x4c\x6d\xe8\xc5\x22\xb0\x0d\x63\xbf\x45\x0a\xa0\xae\xe1\xeb\x5f\x82\xd1\x5b\x55\xcf\x22\xe8\xb2\xbc\x2c\xa8\x01\x73\xbf\xee\xd7\xc6\xd2\x54\xa0\x84\x8c\x4a\x27\xcf\x8a\xcc\x3c\xd5\xa6\x05\xa8\x40\x2e\x81\x00\xc5\xe5\x61\xf5\x67\x15\x9c\x96\x34\x06\xaf\xaa\x82\x47\x8c\x31\x5b\x20\xaf\x6b\x68\xed\xa5\xf2\x2d\x90\x97\x4c\xa0\x25\x5e\xf2\xa0\xf7\xb3\x0f\x5e\x4e\x84\x34\xeb\xfd\x9e\xe2\xf4\xfd\x77\x6d\x40\xce\xd5\x1f\xe3\xbe\x55\x2b\x66\x54\x48\x10\xb2\x90\xd0\x01\xb7\x3f\x1c\x87\x8f\x11\xf4\x87\xd1\xa8\x99\x93\xb7\x5e\xb5\x6a\xbe\x43\xa6\x21\xbe\xa4\xfa\xbb\xe2\xf2\xdb\xe7\xc1\x53\x38\x3e\x11\xba\x20\x79\x89\x2a\xd4\xb4\x09\x47\x61\x88\xdd\x76\x20\x99\x04\xe1\x2b\xc6\x9e\x22\xd4\xd6\x53\xbd\xd9\x46\xf8\x54\x9d\x9e\xaf\x37\x65\xa9\xde\xf2\xbf\x0e\xd0\x2c\xb7\xb5\x98\x64\xb2\xe4\x14\x6e\x74\x46\xbd\x5a\x3b\x5b\xeb\x1c\x45\x30\xd8\xe8\x92\x78\xbe\x3d\xa9\xa7\x79\xa2\x27\x90\x02\xbe\x66\x42\x0f\xce\xbf\x79\x5e\x06\x6e\xeb\xbc\xda\x90\x25\xe6\x90\x7c\x73\x40\x8d\xe7\xf3\xf4\xd0\xfb\x1c\x85\xcd\xf0\xe3\x30\x5a\x09\x56\xea\xec\x56\x67\xd5\xcc\xbf\xff\x12\x3e\x86\x0a\xa1\x03\x3f\x19\xd1\xbf\x9c\x96\xdc\x66\xb0\x92\x83\x62\xe7\x6f\xeb\xa8\xc4\x35\xc2\xdd\x65\x34\xf9\xcf\x64\x53\x60\x1f\x16\x6d\x1c\x0e\xc2\x6e\x04\x2d\xb8\x7b\x1c\xdd\x37\x73\x38\xd4\x47\xb1\x36\xe2\xfc\x5a\x22\x7f\x7b\x64\x4b\x2b\xd0\x9e\x10\x9c\x2d\x83\x71\x4c\xa8\x67\x85\x13\x31\xa1\x9b\x59\xb0\x1a\x0d\x18\x49\x80\xe4\x79\x1b\x18\x07\x02\xa2\x9c\x28\xc3\x60\x69\x93\x56\x02\x52\xce\x8a\x6f\x23\x97\xc2\xdd\xf5\x04\x85\xfb\xc7\x9f\x7b\x81\x0d\xb6\xa0\xb5\xbb\x3d\x4b\x3c\xd7\x59\x0d\xe4\x0e\x9d\xc0\x78\x61\xa7\x03\x37\x70\x79\xb9\xf7\xce\x5a\xe6\x8f\x70\x73\x38\xba\x02\x65\x1b\xd2\x42\x06\xa1\x22\x94\x7a\x6e\x4c\x28\x65\x12\x5e\xd4\x39\x98\xdf\x30\xbb\x7d\x52\x4a\xa0\x0c\x34\x90\xeb\xdb\x61\x3f\x45\x66\x17\x4f\xd7\x78\xd5\xd1\x58\xe3\x39\xcf\xa8\x4c\x3d\x17\x06\xfd\xfb\x7e\x04\xff\x4f\xdc\x76\x53\x0a\x7f\xcb\x52\x0e\x40\x1a\xab\x6a\x46\x19\xdd\xdd\xa9\x79\x6d\x80\x31\x49\xb6\x71\x12\x4c\x91\x83\x3a\x71\xcf\xdf\x4a\xdc\xa8\x36\xdc\x1c\x79\x6f\xb9\xad\x02\x6a\xcf\x5f\xb5\xf9\x8e\xf9\xea\x66\xd7\x9d\x7e\x8e\xcd\x1e\x90\x54\xe9\x82\x6e\xce\x04\xda\xfc\xea\x93\x32\xfb\x62\x88\xaf\x72\xa7\x84\x2d\x84\x8e\x09\xb1\xa3\x74\x38\x49\x3f\x34\xf3\xd8\xe3\xb2\xe1\xa3\xa5\xd7\x05\x93\xf9\x1c\x69\xe2\xe9\xb6\x6a\xed\x88\xb2\xd3\x32\x36\x8b\x19\xd8\x1e\xe6\x78\xc6\xaf\xc1\xb7\x9b\x54\x03\xf8\x61\x6b\xeb\x85\x83\x30\x0a\x3f\x64\x6c\xc7\x8c\xff\xa8\xc1\x77\x59\xa9\x2e\xb0\x33\x04\x5a\x16\x13\xe4\xca\xb7\x3e\xe4\x53\xff\x58\xbc\x46\xd8\xf5\xa9\x58\x83\x9e\x77\x69\xb1\x16\xd5\x1d\x3d\x0d\x23\xaf\xe5\x9f\x72\xaa\x13\xce\xbe\xd3\xef\x9d\x8d\xaf\x5f\x6a\x2a\xc7\xfa\xef\x60\x0e\x76\xda\x68\x8d\x6d\x97\xf5\x3d\xdd\x28\x03\x94\x14\xe7\x36\xc7\x3a\x8d\xe7\xab\xab\xae\xee\x46\xc7\x9e\x93\xdb\x5c\xa8\xc1\x1f\xa3\x1c\x68\x5f\x10\x28\x0d\xb6\x31\x51\x6d\x16\x67\x82\xaf\x72\x78\xeb\xbb\xad\x7f\x10\x05\x95\xd3\xec\x46\x06\xc8\x52\xdd\x09\xd9\x30\x1c\x19\x67\xda\xa3\x68\xfc\xea\x7c\x8e\x26\x8b\xb7\xb9\x8b\x9f\xc1\x72\xed\x89\x16\xec\x08\xcf\xaa\x42\x9a\xa8\x7f\x28\xff\x0e\x00\x00\xff\xff\xf0\xb3\x44\x62\x80\x0e\x00\x00")

func tmplModelHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplModelHtml,
		"tmpl/model.html",
	)
}

func tmplModelHtml() (*asset, error) {
	bytes, err := tmplModelHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/model.html", size: 3712, mode: os.FileMode(420), modTime: time.Unix(1511965806, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplX_helpersHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x58\x4b\x73\xdb\x36\x10\xbe\xe3\x57\x6c\x78\xe8\x90\x8a\x43\xa6\x93\xa4\x33\x55\x47\x97\xe6\x31\x4d\xa7\xb1\xd3\x58\xcd\xa5\xd3\x03\x24\x42\x32\x52\x12\x54\x00\x28\x1e\x0f\xad\xff\xde\xc1\x8b\x00\x49\x91\x7a\xd8\xa9\x0f\xb2\x04\xee\x7e\xd8\x0f\xfb\x2d\x80\x65\x5d\xe7\x64\x45\x19\x81\xe8\x86\x14\x1b\xc2\x45\xb4\xdb\xa1\x0d\x5e\xfe\x8b\xd7\x04\xea\x1a\xd2\x8f\xe6\xfb\x25\x2e\x09\xec\x76\x08\x65\x93\x67\xc3\x7f\x4f\xd1\x3d\xbc\xae\x72\x02\x6b\xc2\x08\xc7\x92\xe4\xb0\xb8\x83\xb2\xca\x49\xb1\x26\x0c\xee\xd1\x3d\xd8\xbf\x37\x57\x70\x79\x35\x87\xb7\x6f\xde\xcf\x53\x37\x76\x8f\x9e\x8e\x60\x4f\x32\x84\x68\xb9\xa9\xb8\x84\x18\x45\x39\x96\x78\x81\x05\xc9\xc4\xd7\x22\x6a\xff\xcc\x72\x4e\xbf\x11\x1e\xa1\x88\xb0\x65\x95\x53\xb6\xce\xbe\x88\x8a\x45\x28\xe2\x64\x55\x90\xa5\x8c\x50\x24\x69\x49\x22\x84\xa2\x35\x95\x37\xdb\x45\xba\xac\xca\x6c\x5d\x3d\x13\x5f\x8b\x67\xc6\x39\x2b\xef\x34\x70\x82\x50\x96\xc1\xb5\xcc\xe7\xb4\x24\xb0\xe1\xd5\x37\x9a\x13\x01\x39\x59\xe1\x6d\x21\xe1\xfa\xcf\x3f\x60\xfe\xfe\xc3\x5b\x58\x55\xbc\xc4\x12\x2d\x2b\x26\x64\x63\x3e\x83\xe8\xc7\x57\xd3\xe7\x2f\xa7\xcf\x5f\x45\x1a\x87\x94\x1b\x79\xa7\x1f\xe1\xa2\xa8\x6e\x3d\x8e\x0a\x47\x80\xac\x60\x41\x40\x61\xd0\x9c\x70\x92\x2b\x17\xb6\x2d\x0a\x85\x0e\x94\x09\xc2\x25\xad\x18\x50\x26\x2b\x90\x37\x04\x1c\xe9\x14\x7d\xc3\x3c\x00\x9f\x69\xbc\x54\x7d\xaf\xfb\x19\x53\x39\x9a\xdf\x6d\x54\x0c\x14\x0b\x22\x7a\xcb\xae\x16\x3a\xcb\xe0\x72\x5b\x14\xef\x8a\x0a\xcb\x9f\x5e\x36\xa6\xe2\x6b\x91\x06\xe3\x48\x2a\x9c\xd0\xb0\x6b\xe0\x80\xae\x25\xa7\x6c\xdd\xc3\x31\xc3\x1e\xc6\x9a\x75\x1e\x3b\x90\x5f\xab\xaa\xe8\x41\xa8\x41\x0f\xa0\x4d\x5a\x8f\x9c\xf3\x7b\xb6\x8f\x88\x1e\xf5\xee\xc6\xa8\xfd\xd0\x01\xd8\xbc\xb5\xfd\xd5\xa0\x77\xd7\x26\x5a\x39\xfe\xa1\x72\xff\x84\x6f\x7f\xbf\xbe\xba\x6c\xbc\x95\x1c\xd3\x4f\xf8\xf6\x03\x11\x02\xaf\x2d\x80\x33\xea\x3e\x1c\xad\x38\x55\x36\x3a\xa3\xc1\xea\xd1\x72\x53\x90\x92\x30\x89\x95\x5c\xfa\xf9\xed\x97\x55\x96\xc1\x5f\xac\xc4\x5c\xdc\xe0\x42\xc7\xa0\x04\x17\x24\x60\xb5\x65\x4b\x88\x59\x30\x94\xb4\x1d\xe2\x05\xfc\xfd\xcf\xe2\x4e\x92\x04\x08\xe7\x15\x87\x1a\x11\xce\x61\x3a\x33\x6c\x1a\xdb\x78\x71\x01\x3f\xb0\xd4\x62\x20\x96\x7e\xc6\x05\xcd\x61\xa6\xbc\x60\x36\x03\x46\x0b\xc4\x89\xdc\x72\xa6\x46\xd0\x4e\x87\xf6\x19\x17\x5b\x72\x4c\x48\xda\x30\x4e\x20\x36\x35\x9c\xea\xdf\x17\x26\xa2\x04\x6a\x44\x57\xf0\xc4\x4d\x59\xbb\x79\x18\x2d\x2e\xf4\xbc\xbb\x66\xc4\xc6\xe7\x86\xf5\x0e\xb0\xc4\x6c\x28\x84\x49\x18\x83\x32\x8c\x05\x5f\xaa\x2a\x25\x7c\x85\x97\xa4\xde\xf9\x45\x51\x75\x8a\xbb\xf2\xa6\x2b\xb0\x8b\x85\x53\xe7\x9e\xfc\xa2\xc7\x9e\xe8\x25\xf1\xc1\x9a\x45\x71\x01\x82\xf6\x68\x40\xec\xee\x96\xaa\xe2\xbe\x5a\x69\x14\x0f\xe0\x97\x5a\xf2\x2d\x09\xc8\x36\x14\x3f\x1c\xce\x7f\x8b\x69\x60\xaf\xd6\xdc\xe4\x3f\x58\x6d\xc3\x75\x22\x9a\xf8\xfc\xd2\x63\x98\x79\x19\xf8\x58\xb4\x56\x2c\x6c\x8c\x13\x74\xe8\xb4\x69\x84\xef\x76\x9f\xd3\x94\x3f\x2e\x7d\xb7\x83\xb5\xb8\xdb\xc1\x87\xa9\xdf\x81\x1c\x29\xff\x7d\x79\x19\x0f\xee\xc8\xcc\xac\x2c\xc8\xbe\xd4\xb8\x09\x46\x73\xd3\x29\x8b\xf1\xa0\x4e\x29\x8c\x77\x3e\xb2\x53\x2b\xc3\x49\x41\xb9\x04\x30\x0f\xac\x8d\xf6\x16\xd4\x25\xda\xe2\xf9\x68\x9b\x90\x45\xf4\xbb\xd0\x48\x29\xb8\x42\x30\xe7\xd7\x49\x65\x30\x5a\x04\xe6\x04\x0c\x79\xea\x91\x87\xe9\xdf\x40\x9c\xb5\xf9\x0f\xc6\xf3\x68\xab\xae\xf1\x06\x77\xfe\xf6\xfc\x93\x20\x80\x53\xe4\x6d\x50\xce\x10\xb7\x49\xaf\x72\x68\x20\xbe\xc3\xa6\x3f\x4c\xf2\xc8\x8d\x85\xb2\xa1\x6d\xc5\x40\x9f\xb9\xe1\x3b\x91\xeb\x3b\xde\x29\x1a\x1f\x95\xb8\xbe\x24\xb6\xc8\xaa\x91\x87\x29\x5c\x23\x9c\x25\xf0\x56\x34\x3e\x98\x47\x93\xb7\x82\x1b\x54\xf7\xd0\x52\x9c\xa2\x6d\x8d\x71\x86\xb4\x75\x52\x95\xbd\x03\xf8\x0e\xc2\x1e\xe2\x77\xa4\xac\x17\x36\xb2\x9e\xaa\x35\xee\x03\x45\xad\x5b\x87\x47\x13\xb5\xee\x3c\x42\x19\xa9\x81\xc3\x9a\x16\x2a\x65\xe6\xc2\x16\x2f\x12\x24\x69\x79\xe1\x12\xa9\x3b\xca\x8f\x98\x0b\x12\xeb\xaf\x9f\xde\xbd\x7e\xf1\xe2\xc5\xcf\x17\x20\x12\x97\xee\x3d\xd9\x59\xe1\x42\x90\x8e\xe6\x59\xea\x9b\xd4\x6e\x22\x0f\x1c\xbc\x03\xb4\x1e\xad\x3a\x14\xdc\x60\x75\xb4\x26\x9f\xf8\xd9\x8f\xa9\x8e\x4e\x4f\x78\x46\x7d\xd8\x35\xc3\xa9\x03\xf8\x0e\xf5\x31\xc4\xf0\xc8\xfa\x68\x5e\x3a\xec\x2d\x12\xfd\xe0\xbc\x22\x51\x35\xe2\xba\xe3\x13\x4a\xe4\x94\xce\x76\x62\xf1\x0f\xd7\x88\x21\xdb\x6d\xd2\xf7\x1c\x03\x38\x41\x4b\x95\x62\x8b\xac\x58\x4e\x18\xcc\x60\x79\x48\xe5\x9d\xd0\x9a\xc8\x0e\xc9\xdc\xc2\xda\xfa\x65\xc9\xd1\xfd\x6b\x33\xc3\xff\xd1\xbc\x7e\x11\x2c\x5c\x15\xb3\xbc\xb1\xeb\x63\x13\xbb\x48\x5f\x04\x3b\xaf\x43\x6d\xb8\x1c\x12\x2d\x6e\x4e\x6f\x9f\xc6\x78\xc2\x12\x37\x2d\x4e\x5b\x08\x03\x0a\x55\xd2\xfc\x4d\xbf\x38\x05\x15\xc2\xb0\x26\xad\x18\xe7\x55\xf0\xa2\xc6\xcc\x24\x00\x03\x23\xb7\x3d\x36\xa1\x69\x2c\x5c\x23\x9d\x84\x6f\x7a\xf4\xd6\x26\xec\xd5\xc2\x2f\x74\xe8\xd7\xca\x56\xad\x6b\x72\x6a\xb6\xe5\x5d\xe2\xcb\x71\xd8\xc3\xfc\x9b\xc2\x44\x5c\x80\xf5\x56\x5b\xca\xce\x75\x80\x26\x4a\x73\x31\xed\xf3\x09\xae\x92\x81\x61\x4c\xed\x1d\x31\x09\x9a\x16\xcd\x85\xee\xe5\x62\x9c\x5a\xb7\xe7\x51\x26\xfb\xec\xf5\xe7\x14\x26\x74\x8c\x86\x6b\x1e\xfb\x44\x5a\x2d\x5f\xcb\x58\x91\x59\xb9\xe6\x2f\x04\x19\x21\xe4\x5c\x3b\xfd\xee\x28\xa9\x21\x1f\xfb\xff\x10\x35\x7d\xbf\x5a\x72\x82\x25\x09\x79\xf9\x2b\x91\x37\x8b\x17\xe6\xae\x93\xf8\xdb\xb6\xe6\xb2\xd8\xcb\x45\x7b\x84\xb7\xbf\x51\x16\x7d\x6b\xf5\x31\x85\xc9\x62\x2c\x78\x7d\xf8\xf5\x83\xf7\xe7\x95\x37\x8b\xa5\x7f\xf9\x9d\xf8\x9b\x95\x26\x20\x15\x01\xff\x9a\xbc\x45\x43\xfb\xb6\x8f\xe9\x51\x22\xfb\xec\xd5\xc7\x14\x64\x9f\x49\x5d\x13\x96\xef\x76\xe8\xbf\x00\x00\x00\xff\xff\x65\x30\x79\x30\x6d\x19\x00\x00")

func tmplX_helpersHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplX_helpersHtml,
		"tmpl/x_helpers.html",
	)
}

func tmplX_helpersHtml() (*asset, error) {
	bytes, err := tmplX_helpersHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/x_helpers.html", size: 6509, mode: os.FileMode(420), modTime: time.Unix(1512044517, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplX_helpers_testHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x9b\x5f\x6f\xdb\x36\x17\xc6\xaf\xa5\x4f\xc1\x08\x68\x60\xa7\x8e\x62\xbb\xc5\xfb\x02\xde\xb2\x8b\x36\x19\xd0\x01\x4d\x87\xd5\xed\xc5\x8a\xa2\x95\x6c\xda\x15\xaa\x3f\x09\x45\x27\x0b\x1c\x7d\xf7\xe1\x90\x94\x25\x51\xa2\x2d\x5b\xd4\x62\x07\x09\xdc\xd6\x95\xc4\xc3\x87\x3c\x0f\x0f\x7f\x12\x94\xe5\x72\x8a\x67\x5e\x88\x91\xf5\x03\xfb\xd7\x98\xc4\x14\xc7\xd4\x4a\x12\xf3\xda\x99\xfc\x74\xe6\x18\x2d\x97\xc8\xfe\x93\x7f\xbf\x72\x02\x8c\x92\xc4\x34\xcf\x4e\x4e\xd5\x3f\x2f\xcd\x07\xf4\x36\x9a\x62\x34\xc7\x21\x26\x0e\xc5\x53\xe4\xde\xa3\x20\x9a\x62\x7f\x8e\x43\xf4\x60\x3e\x20\xf1\x73\xf1\x01\x5d\x7d\x18\xa3\xcb\x8b\x77\x63\x3b\x3d\xf6\x60\xbe\x5c\x13\xfb\xe4\xcc\x34\xbd\xe0\x3a\x22\x14\x75\x4c\xc3\x9a\x3a\xd4\x71\x9d\x18\x9f\xc5\x37\xfe\xd9\x94\x78\xb7\x98\x58\xa6\x61\x11\x3c\xf3\xf1\x84\xc2\x57\x18\x8d\x17\xce\xd9\x57\x2f\xc0\x96\xd9\x35\xcd\xd9\x22\x9c\xa0\x31\x8e\xe9\xd5\xc2\xf7\x3f\x52\xe2\x85\xf3\x6f\x9f\xc2\xc0\x21\xf1\x0f\xc7\xff\xe3\xe3\x87\xab\x0e\x45\x27\xa2\xa1\x3d\xee\xa2\xa5\x69\xc0\xff\x62\x34\x3a\x47\x5f\xbe\xc6\x94\x2c\x26\x14\x0e\x1a\x21\xcc\x07\x42\x28\x66\x31\xe0\x80\x18\x44\x16\xd8\x34\x8c\x38\x5a\x90\x09\x46\xe8\xcb\x57\xf7\x9e\x62\xd3\x30\xee\x9c\x90\x5e\x12\x82\xdc\x28\xf2\x4d\x23\x81\x48\xf0\x87\x85\x1b\x41\x73\xeb\xd6\xf1\xbd\xa9\xd5\x83\x83\xbc\xf5\x28\x6d\xde\xf9\x0e\x79\xf2\x23\xeb\x7b\x97\x9d\x16\xb1\x46\x68\xe6\xf8\x31\x86\x43\x49\xaf\x1c\xcf\x0b\xd7\x45\x5c\x5a\x3f\xf1\xbd\x35\x82\x5e\x17\xd8\x4a\xe4\xc8\x94\x2c\x94\x81\x71\x70\x4d\xef\x2b\xc3\x2e\x13\x75\x94\xc4\x34\x66\x11\x41\xdf\x7a\x88\x52\x98\x54\xe2\x84\x73\x8c\xf8\x1c\x43\x07\xd4\xfe\x6b\x11\x76\x28\xb5\xa1\xa3\x1e\x82\x7c\x95\x53\x62\x18\xde\x0c\x61\x42\x20\x00\x5c\x6a\x4b\x29\xa4\x36\x57\xd4\xfd\x05\x75\xe0\xb2\xa3\x73\x14\x7a\x7e\x17\xfe\xa5\xd4\x4e\x73\xc0\x02\x19\xd4\xbe\x24\x24\x22\xb3\x8e\x95\x65\x4e\x8a\xd7\x85\xbe\x22\x82\xce\xd1\x8b\xdb\x1e\x4a\x9b\xbf\xb8\xb5\x7a\x70\xa2\x97\x8b\xd9\x85\x90\x09\x0c\xb5\x0b\x43\x4d\xaa\x0d\xf7\x19\x26\x5b\xaf\xd1\xa0\x7f\x38\xc8\x17\x82\xcd\x7a\xd8\x68\xb7\xbc\xd7\xc2\x51\x2e\x20\x9f\x99\xcf\x70\x76\x84\x56\xe9\x33\x0c\x7e\x76\x84\x84\x0f\xd9\xc1\x2c\xd7\x23\x59\x40\x47\x5c\x57\xd7\xae\x45\xaf\xaa\x15\xad\x02\xc8\x9d\x87\x9e\xbf\xa6\x2b\x4d\xd6\x9b\x47\xb4\x57\x30\x1f\x1f\x6b\x57\xd8\x72\x37\xc3\x89\x18\xdb\x19\xcd\x20\x98\x2e\x48\x98\x7a\x0e\x7a\x3f\x12\xf5\xcf\xbe\xc0\xf8\xfa\xf2\x66\xe1\xf8\x1d\xa6\x57\xb4\xec\xd6\xd1\x90\xf5\xce\xbb\x2e\x04\xa8\x65\xf0\x8f\x13\x27\x6c\xec\xef\x93\x92\xc1\x33\x27\x1b\x31\x99\xb0\x8b\xbc\x90\x62\x32\x73\x26\x78\x99\x6c\xf4\xf7\xb1\x6c\xa7\x2a\x3b\x97\x5d\xcf\x3d\x16\x93\x09\xb3\x18\xb2\xac\xba\x6e\x0e\x3d\x1f\xf1\xba\xba\x9b\x02\xd9\xe6\x2b\x09\xff\x89\xcd\xa5\x0a\xcb\x53\x4a\xed\x98\x4c\x76\xae\xaa\x2c\xc6\x0e\xc5\x14\xb4\xa4\x2b\xcd\x9b\xa2\xf3\x73\x3e\x60\x74\x7c\x8c\xb8\x22\x21\xa5\xd4\x77\xfc\x23\x5a\xf8\x53\xc4\x97\x09\x0a\x17\xbe\x6f\xa9\x82\x16\x62\xf1\x11\x33\xd1\xa5\x98\xa2\x46\x89\xcc\xd6\x5b\x0f\xef\x35\xf2\x45\x79\x59\xc0\xd1\x9a\x80\xa1\x73\x45\xac\xaa\xee\xae\x74\xc2\xc5\xf0\xb4\x6c\x56\xb4\x61\x71\x94\xd4\x40\xd8\xfa\x52\xe4\x9d\xa7\xa4\x43\xf4\xbb\x71\x0e\xd6\x0f\xbf\xad\x2d\x28\x6f\xb0\x66\x1b\xd1\xfb\xdd\xb9\x47\xf3\x76\x54\x54\xd2\x60\x53\x7a\x13\x45\x7e\x0b\x90\xff\x46\xec\x44\x7a\x11\x9f\xd9\xe5\x19\xf0\x5b\x03\x7c\xc8\x5a\x5b\x78\xcf\x8c\xa6\x0f\xee\x85\xc1\x74\xa1\x3d\x84\xab\xae\x65\x06\x9c\x5a\x53\xe0\x0b\x4c\x0f\x17\x35\x02\xfa\x92\x8e\xa7\x84\xf3\xcc\x5e\x8f\x0a\xf3\x05\x05\x4d\xab\xa6\x3e\x90\xcf\x99\x59\x07\xc6\x67\x26\x92\xbd\xab\xd8\xa9\x57\xf0\xbc\x3a\xbe\x3b\xc1\x6f\xee\x5c\x89\xee\xd9\x89\x83\x81\x77\x66\xa8\xc3\x42\x77\x90\xdc\x0c\xdc\x99\xfb\xb5\x63\xbb\x54\xd1\x1b\x40\xbb\xba\x98\x2b\xc0\x74\x3b\xae\x50\xa2\x79\xfd\xe2\xad\x91\xc3\x5b\x18\xec\x1e\x83\x38\x5b\x6f\x7b\x80\xe1\x15\x3a\x1a\x6c\x27\x63\x2f\xc0\x2d\x40\x38\x84\xd5\x0f\xe1\xc3\xfe\xe0\xff\xa7\x83\xc1\xe9\xf0\xf5\xb8\xdf\x1f\xb1\xcf\xdf\xcf\x4c\x7e\x90\x4c\xce\x7c\xa7\x62\x72\x2f\x60\x83\xf1\x02\x6c\x5f\x45\x77\xb0\x60\x77\xb7\xa0\x2e\x4c\x87\x70\x0a\x4c\x87\x53\x40\x1b\x5e\xb0\x99\xd2\xbd\xa0\x11\xa4\x97\x54\x3c\x25\x48\x87\xc1\x3d\x2e\xa4\x17\x14\x34\xad\xaa\x0a\x48\x6f\x6c\xee\x13\xc9\xdd\x3a\xb8\x3d\xf3\x95\x64\xe6\x8d\xd8\x2e\xae\xdb\x9d\xda\x37\x76\xad\x84\xf6\x6c\x0e\x0f\x8b\xdc\x99\xcb\x0e\x8b\xdc\x41\x72\x33\x72\x67\x4b\x42\x3b\xb9\x4b\x45\xbe\x01\xb9\x57\xd9\x10\xdb\x17\x0e\xc5\x1d\xc0\x8e\x1e\x1a\x0c\x7a\x68\xf8\xba\x87\xfa\xb9\x0f\xbb\xe6\xd3\xf8\x6d\x77\xdd\x5a\x29\x3f\x8c\xae\xe2\x18\x0d\xcf\xe7\xeb\x6f\x0e\x1a\x6f\x02\xd4\xfb\xa2\x6a\xf4\xfd\x7e\x7f\x70\xca\x3e\x75\x47\xbf\xc7\x77\x05\x6c\x2d\xef\xc1\x5d\x41\x85\x8e\x06\xfb\xd7\xbb\x90\xfe\xef\x75\x0b\xb7\x05\x2c\xae\xfe\xfb\x82\xc1\xf0\xd5\xf3\x6d\x40\x6b\xb7\x01\x2c\x69\x6d\xdd\x07\x70\xa7\xe9\x7b\x38\x9f\x3a\x4c\x17\xf6\xb3\x78\x0a\xee\x67\xe7\x46\x68\x30\x7c\xb5\x91\xfb\x3d\xb8\xb4\x33\x18\xbe\xea\x36\xc2\xff\xb2\x9a\xa7\xc4\xff\xdc\x68\x8f\x7a\x03\x50\x94\xd0\xb8\x82\xea\x7b\x4e\x9f\xf7\xb5\x0e\xe0\xcf\x39\x49\xb2\xf1\x26\xe2\xcf\xac\xdc\x10\xfc\x37\x9b\x79\xbb\x3e\xf7\x90\xf4\xb9\x9d\x0e\x0b\xf5\x99\xe6\x66\xac\xcf\xcd\xaf\x1d\xf6\xe5\xda\xde\x80\xf6\xb7\xb6\x7f\x09\x63\xb7\x61\x0e\x25\xb1\x6f\x51\xcf\x35\x22\xfb\x9a\x3d\x4d\xd1\x69\xff\x50\xf1\x9c\x2f\xc0\x3d\xe0\xf3\x2a\x21\x5b\x6d\x2f\x85\x05\xf6\xbb\x1f\x39\xed\x10\xba\x88\xdc\x0a\xa3\xdb\xcf\x9c\xde\x26\xa7\x8b\xd4\xb5\x45\xea\xa9\xe7\xf4\xb1\x7a\xe6\x35\x5d\xb4\x2e\x22\x16\x6a\x5b\xfe\x35\x00\x71\x9e\x55\x7b\xbb\x0e\xb7\xcf\x78\x83\x8e\xb8\xbe\x19\xbd\x57\xa9\x7b\x4a\xfc\x9e\x1a\xf0\x51\x09\x5e\x16\xd1\x80\xe1\x53\xc7\xeb\xa3\xf8\xa2\xe3\x75\x70\x7c\xc1\x53\x95\xf6\xae\x58\x07\xf2\xcb\x2f\x99\xc9\x9b\x32\x7d\x1d\x8b\x57\xf5\x6b\x1f\x1e\xdb\xa7\x46\x3b\x2c\xba\x17\xaa\x9b\xf1\x7d\xba\x30\xb4\x13\x7e\x79\x47\x68\xc0\xf8\x0d\x96\x46\x15\xed\x6f\x45\x2f\x4a\xe2\xdf\x6a\x0f\xd0\xc8\xfc\x55\xfd\x3e\x59\xea\x4f\x97\xe6\x1e\x70\x7f\xb5\x94\x1d\x37\xa5\x71\x94\xbe\x96\x51\x9e\x49\x97\x4d\x20\x01\x6e\x72\xd9\xf7\xdc\xc5\xc7\x6e\xd7\x64\x23\x70\x5d\x51\x18\x78\x82\x52\xa1\xf8\x9f\x6b\x3c\xa1\x98\xad\x7e\x6f\xca\xe4\x70\x5d\xe9\xf5\x4c\x49\x1a\x61\xf5\x16\x5f\x45\x00\x66\xa9\x42\x7b\xb8\x9a\x35\x37\x8d\x5b\x87\x20\x77\x88\x4e\xf8\x12\x76\xdd\xa1\x24\xd3\x1d\x72\x99\xae\x3b\x5c\x2f\x33\x8c\x68\x85\xd4\xa1\xa4\x15\x8e\xac\xd3\xca\xdd\x5c\x8c\xb0\x52\x9b\xc8\xb3\xce\x6e\xe0\x14\xd3\x9e\x3d\x9e\x2a\x4e\x3e\x6f\xa3\x6f\xf6\x5d\x57\x3c\x9d\x39\x3a\x87\x3a\xa6\x8a\x03\xe5\xad\x10\x85\x35\x92\x92\xe0\xf1\x87\x29\x85\x2c\x70\xbd\x2d\xa4\x61\xa5\xba\xaf\x8a\xd5\x97\x62\x64\x92\xcb\x0b\x40\xac\x29\x45\x32\x64\xaa\x28\xa6\x24\x6d\xab\x35\x29\xe9\xa6\xca\xd3\x62\xaf\x4f\x8d\x5d\x4a\x8f\x68\x2e\x25\x68\x96\xee\x85\x85\x14\xa5\xfa\x5b\x48\x52\x6e\x14\xb5\xd3\x94\x97\x5e\x5a\x32\xfc\x17\x86\x14\x69\xb2\x6e\xee\xb0\x55\xcc\x8d\xb8\x5e\x6b\x6a\xc4\x6f\x0b\x1e\x89\x0e\x55\xa1\x6e\xee\xa4\xb2\xc5\xdb\x49\x29\x49\xa1\xa5\x90\x11\xa1\xba\x85\x84\xe4\xb4\x2b\x85\xff\xca\x1e\x65\x08\x9c\xfa\x4d\x0a\x99\x1b\x44\x62\x32\xe2\x2e\x26\x68\xec\x05\xe5\x3b\x79\xf1\x66\x8d\xf4\x92\x12\x1c\xcd\xe7\x8a\x37\xf5\x02\x7e\x46\xca\x16\x0b\xb1\x4d\xbe\xa0\x41\x92\x46\x72\x5d\xfe\xba\xc9\x11\x13\xa0\x0e\x07\x5b\xe8\x2a\x16\xf5\x82\x5e\xda\x32\x8d\xb7\x1a\x8a\x18\x09\x7b\x55\x21\x49\x87\xa2\x1c\xc9\xe6\x81\x08\xc2\xd2\x37\x94\xa2\xfd\xaa\xc6\xc2\xff\x5e\x2e\x71\x38\x4d\x12\xf3\xdf\x00\x00\x00\xff\xff\x55\x09\xb3\x35\x22\x44\x00\x00")

func tmplX_helpers_testHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplX_helpers_testHtml,
		"tmpl/x_helpers_test.html",
	)
}

func tmplX_helpers_testHtml() (*asset, error) {
	bytes, err := tmplX_helpers_testHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/x_helpers_test.html", size: 17442, mode: os.FileMode(420), modTime: time.Unix(1512044544, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmpl/model.html": tmplModelHtml,
	"tmpl/x_helpers.html": tmplX_helpersHtml,
	"tmpl/x_helpers_test.html": tmplX_helpers_testHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tmpl": &bintree{nil, map[string]*bintree{
		"model.html": &bintree{tmplModelHtml, map[string]*bintree{}},
		"x_helpers.html": &bintree{tmplX_helpersHtml, map[string]*bintree{}},
		"x_helpers_test.html": &bintree{tmplX_helpers_testHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

