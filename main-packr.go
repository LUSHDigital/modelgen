package main

import "github.com/gobuffalo/packr"

// !!! GENERATED FILE !!!
// Do NOT hand edit this file!!
// It is recommended that you DO NOT check into this file into SCM.
// We STRONGLY recommend you delete this file after you have built your
// Go binary. You can use the "packr clean" command to clean up this,
// and any other packr generated files.
func init() {
	packr.PackJSONBytes("./tmpl", "model.html", "\"e3tkZWZpbmUgIm1vZGVsIn19CnBhY2thZ2Uge3sgLlBhY2thZ2VOYW1lIH19CgovKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSsKfCBDb2RlIGdlbmVyYXRlZCBieSBtb2RlbGdlbiB8CnwgICAgICAgIERPIE5PVCBFRElULiAgICAgICAgfAorLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KCi8vIElmIHlvdSB3YW50IHRvIGV4dGVuZCBiZWhhdmlvdXI6Ci8vIFBsZWFzZSBjcmVhdGUgYSBjdXN0b20gZmlsZSBpbiB0aGlzIGRpcmVjdG9yeQovLyBhbmQgY3JlYXRlIHRoZSBtZXRob2RzIHRoZXJlIHRvIGF2b2lkIG92ZXJ3cml0aW5nIHlvdXIgY29kZSB3aXRoIHRoZSBnZW5lcmF0ZWQgb25lLgoKaW1wb3J0ICgKImZtdCIKImRhdGFiYXNlL3NxbCIKICAgIHt7IHJhbmdlICRrLCAkdjo9IC5Nb2RlbC5JbXBvcnRzIH19CiAgICAie3ska319IgogICAge3stIGVuZCB9fQopCgovLyB7ey5Nb2RlbC5OYW1lfX0gcmVwcmVzZW50cyBhIHJvdyBpbiB0aGUge3suTW9kZWwuVGFibGVOYW1lfX0gdGFibGUKdHlwZSB7ey5Nb2RlbC5OYW1lfX0gc3RydWN0IHsKICAgIHt7IHJhbmdlICRrLCAkdjo9IC5Nb2RlbC5GaWVsZHMgfX0KICAgICAgICB7eyAkdi5OYW1lIH19IHt7ICR2LlR5cGUgfX0gYGpzb246Int7JHYuQ29sdW1uTmFtZX19ImAKICAgIHt7LSBlbmQgfX0Kb2Zmc2V0IGludApsaW1pdCBpbnQKfQoKLy8gSW5zZXJ0IGEgbmV3IHt7Lk1vZGVsLk5hbWV9fSByb3cgaW4gdGhlIHt7Lk1vZGVsLlRhYmxlTmFtZX19IHRhYmxlCmZ1bmMgKHt7LlJlY2VpdmVyfX0gKnt7Lk1vZGVsLk5hbWV9fSkgSW5zZXJ0KGRiICpzcWwuREIpIChsYXN0SW5zZXJ0SUQgaW50NjQsIGVyciBlcnJvcikgewogICAgY29uc3Qgc3RtdCA9IGBJTlNFUlQgSU5UTyAie3suTW9kZWwuVGFibGVOYW1lfX0iICh7ey5Nb2RlbC5GaWVsZHMgfCBpbnNlcnRfZmllbGRzfX0pIFZBTFVFUyAoe3suTW9kZWwuRmllbGRzIHwgaW5zZXJ0X3ZhbHVlc319KSBSRVRVUk5JTkcgaWRgCiAgICByb3cgOj0gZGIuUXVlcnlSb3coc3RtdCwge3sgLiB8IGluc2VydF9hcmdzIH19KQogICAgZXJyID0gcm93LlNjYW4oJmxhc3RJbnNlcnRJRCkKCXJldHVybgp9CgovLyBVcGRhdGUgYW4gZXhpc3Rpbmcge3suTW9kZWwuTmFtZX19IHJvdyBpbiB0aGUge3suTW9kZWwuVGFibGVOYW1lfX0gdGFibGUuCmZ1bmMgKHt7LlJlY2VpdmVyfX0gKnt7Lk1vZGVsLk5hbWV9fSkgVXBkYXRlKGRiICpzcWwuREIsIGlkIGludDY0KSAoaW50NjQsIGVycm9yKSB7CiAgICBjb25zdCBzdG10ID0gYFVQREFURSAie3suTW9kZWwuVGFibGVOYW1lfX0iIFNFVCB7eyAuIHwgdXBkYXRlX3ZhbHVlcyB9fSBXSEVSRSBpZCA9IHt7IC4gfCB1cGRhdGVfdmFsdWVzX3NpemUgfX1gCiAgICByZXN1bHQsIGVyciA6PSBkYi5FeGVjKHN0bXQsIHt7IC4gfCB1cGRhdGVfYXJncyB9fSAsIGlkKQogICAgaWYgZXJyICE9IG5pbCB7CiAgICAgICAgcmV0dXJuIDAsIGVycgogICAgfQogICAgcmV0dXJuIHJlc3VsdC5Sb3dzQWZmZWN0ZWQoKQp9CgovLyBGaW5kIGFuIGV4aXN0aW5nIHt7Lk1vZGVsLk5hbWV9fSByb3cgaW4gdGhlIHt7Lk1vZGVsLlRhYmxlTmFtZX19IHRhYmxlCmZ1bmMgKHt7LlJlY2VpdmVyfX0gKnt7Lk1vZGVsLk5hbWV9fSkgRmluZChkYiAqc3FsLkRCLCBpZCBpbnQ2NCkgZXJyb3IgewogICAgY29uc3Qgc3RtdCA9IGBTRUxFQ1QgKiBGUk9NICJ7ey5Nb2RlbC5UYWJsZU5hbWV9fSIgV0hFUkUgaWQgPSAkMWAKICAgIHJvdyA6PSBkYi5RdWVyeVJvdyhzdG10LCBpZCkKICAgIHJldHVybiByb3cuU2Nhbih7eyAuIHwgc2Nhbl9maWVsZHN9fSkKfQoKLy8gTG9hZCBhbGwsIG9yIGEgc3Vic2V0IG9mIHt7Lk1vZGVsLk5hbWV9fSByb3dzIGZyb20gdGhlIHt7Lk1vZGVsLlRhYmxlTmFtZX19IHRhYmxlCmZ1bmMgKHt7LlJlY2VpdmVyfX0gKnt7Lk1vZGVsLk5hbWV9fSkgTG9hZChkYiAqc3FsLkRCKSAoc2V0IFtde3suTW9kZWwuTmFtZX19LCBlcnIgZXJyb3IpIHsKICAgIHN0bXQgOj0gYFNFTEVDVCAqIEZST00gInt7Lk1vZGVsLlRhYmxlTmFtZX19ImAKCiAgICBpZiB7ey5SZWNlaXZlcn19LmxpbWl0ID09IDAgJiYge3suUmVjZWl2ZXJ9fS5vZmZzZXQgPiAwIHsKICAgICAgICByZXR1cm4gc2V0LCBmbXQuRXJyb3JmKCJjYW5ub3QgcXVlcnkgd2l0aCBvZmZzZXQgYnV0IG5vIGxpbWl0IikKICAgIH0KCiAgICBpZiB7ey5SZWNlaXZlcn19LmxpbWl0ID4gMCB7CiAgICAgICAgc3RtdCArPSBmbXQuU3ByaW50ZigiIExJTUlUICVkIiwge3suUmVjZWl2ZXJ9fS5saW1pdCkKICAgIH0KICAgIGlmIHt7LlJlY2VpdmVyfX0ub2Zmc2V0ID4gMCB7CiAgICAgICAgc3RtdCArPSBmbXQuU3ByaW50ZigiIE9GRlNFVCAlZCIsIHt7LlJlY2VpdmVyfX0ub2Zmc2V0KQogICAgfQogICAgZGVmZXIgZnVuYygpIHsKICAgICAgICB7ey5SZWNlaXZlcn19LmxpbWl0ID0gMAogICAgICAgIHt7LlJlY2VpdmVyfX0ub2Zmc2V0ID0gMAogICAgfSgpCiAgICByb3dzLCBlcnIgOj0gZGIuUXVlcnkoc3RtdCkKICAgIGlmIGVyciAhPSBuaWwgewogICAgICAgIHJldHVybgogICAgfQogICAgZGVmZXIgcm93cy5DbG9zZSgpCiAgICAgICAgZm9yIHJvd3MuTmV4dCgpIHsKICAgICAgICAgICAgaWYgZXJyID0gcm93cy5TY2FuKHt7LiB8IHNjYW5fZmllbGRzfX0pOyBlcnIgIT0gbmlsIHsKICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgfQogICAgICAgIHNldCA9IGFwcGVuZChzZXQsICp7ey5SZWNlaXZlcn19KQogICAgfQoKICAgIHJldHVybgp9CgovLyBEZWxldGUgYW4gZXhpc3Rpbmcge3suTW9kZWwuTmFtZX19IHJvdyBmcm9tIHRoZSB7ey5Nb2RlbC5UYWJsZU5hbWV9fSB0YWJsZQpmdW5jICh7ey5SZWNlaXZlcn19ICp7ey5Nb2RlbC5OYW1lfX0pIERlbGV0ZShkYiAqc3FsLkRCLCBpZCBpbnQ2NCkgKHJvd3NBZmZlY3RlZCBpbnQ2NCwgZXJyIGVycm9yKSB7CiAgICBjb25zdCBzdG10ID0gYERFTEVURSBGUk9NICJ7ey5Nb2RlbC5UYWJsZU5hbWV9fSIgV0hFUkUgaWQgPSAkMWAKICAgIHJlc3VsdCwgZXJyIDo9IGRiLkV4ZWMoc3RtdCwgaWQpCglpZiBlcnIgIT0gbmlsIHsKCQlyZXR1cm4KCX0KCglyZXR1cm4gcmVzdWx0LlJvd3NBZmZlY3RlZCgpCn0KCi8vIENvdW50IHRoZSBudW1iZXIgb2Ygcm93cyBmcm9tIHRoZSB7ey5Nb2RlbC5UYWJsZU5hbWV9fSB0YWJsZQpmdW5jKHt7LlJlY2VpdmVyfX0gKnt7Lk1vZGVsLk5hbWV9fSkgQ291bnQoZGIgKnNxbC5EQikgKGNvdW50IGludDY0LCBlcnIgZXJyb3IpIHsKICAgIGNvbnN0IHN0bXQgPSBgU0VMRUNUIENPVU5UKCopIEZST00gInt7Lk1vZGVsLlRhYmxlTmFtZX19ImAKICAgIHJvdyA6PSBkYi5RdWVyeVJvdyhzdG10KQogICAgaWYgZXJyID0gcm93LlNjYW4oJmNvdW50KTsgZXJyICE9IG5pbCB7CiAgICAgICAgcmV0dXJuCiAgICB9CiAgICByZXR1cm4KfQoKLy8gRXhpc3RzIGNoZWNrcyBmb3IgdGhlIGl0ZW1zIGV4aXN0ZW5jZSBpbiB0aGUgZGF0YWJhc2UsIGJhc2VkIG9uIGl0J3MgaWQuCi8vIEFuIGVycm9yIHdpbGwgb25seSBiZSByZXR1cm5lZCBpZiBhIFNRTCByZWxhdGVkIGZhaWx1cmUgaGFwcGVucy4KLy8gSW4gYWxsIG90aGVyIGNhc2VzLCBhIGJvb2wgYW5kIG5pbCB3aWxsIHJldHVybi4KZnVuYyh7ey5SZWNlaXZlcn19ICp7ey5Nb2RlbC5OYW1lfX0pIEV4aXN0cyhkYiAqc3FsLkRCLCBpZCBpbnQ2NCkgKGV4aXN0cyBib29sLCBlcnIgZXJyb3IpIHsKICAgIGNvbnN0IHN0bXQgPSBgU0VMRUNUIEVYSVNUUyhTRUxFQ1QgMSBGUk9NICJ7ey5Nb2RlbC5UYWJsZU5hbWV9fSIgV0hFUkUgaWQgPSAkMSBMSU1JVCAxKSBBUyAiZXhpc3RzImAKICAgIHJvdyA6PSBkYi5RdWVyeVJvdyhzdG10LCBpZCkKICAgIGlmIGVyciA9IHJvdy5TY2FuKCZleGlzdHMpOyBlcnIgIT0gbmlsIHsKICAgICAgICByZXR1cm4KICAgIH0KICAgIHJldHVybgp9CgovLyBUYWJsZU5hbWUgcmV0dXJucyB0aGUgdGFibGUgbmFtZQpmdW5jICh7ey5SZWNlaXZlcn19ICp7ey5Nb2RlbC5OYW1lfX0pIFRhYmxlTmFtZSgpIHN0cmluZyB7CiAgICByZXR1cm4gInt7Lk1vZGVsLlRhYmxlTmFtZX19Igp9CgovLyBTZXRMaW1pdCBzZXRzIHRoZSBxdWVyeSBsaW1pdApmdW5jICh7ey5SZWNlaXZlcn19ICp7ey5Nb2RlbC5OYW1lfX0pIFNldExpbWl0KGxpbWl0IGludCkgKnt7Lk1vZGVsLk5hbWV9fSB7CiAgICB7ey5SZWNlaXZlcn19LmxpbWl0ID0gbGltaXQKICAgIHJldHVybiB7ey5SZWNlaXZlcn19Cn0KCi8vIFNldE9mZnNldCBzZXRzIHRoZSBxdWVyeSBvZmZzZXQKZnVuYyAoe3suUmVjZWl2ZXJ9fSAqe3suTW9kZWwuTmFtZX19KSBTZXRPZmZzZXQob2Zmc2V0IGludCkgKnt7Lk1vZGVsLk5hbWV9fSB7CiAgICB7ey5SZWNlaXZlcn19Lm9mZnNldCA9IG9mZnNldAogICAgcmV0dXJuIHt7LlJlY2VpdmVyfX0KfQp7e2VuZH19Cg==\"")
	packr.PackJSONBytes("./tmpl", "tmpl.go", "\"cGFja2FnZSB0bXBsCgppbXBvcnQgKAoJImZtdCIKCSJzdHJpbmdzIgoJInRleHQvdGVtcGxhdGUiCikKCnZhciBGdW5jTWFwID0gdGVtcGxhdGUuRnVuY01hcHsKCSJpbnNlcnRfZmllbGRzIjogICAgICBHZXRJbnNlcnRGaWVsZHMsCgkiaW5zZXJ0X3ZhbHVlcyI6ICAgICAgR2V0SW5zZXJ0VmFsdWVzLAoJImluc2VydF9hcmdzIjogICAgICAgIEdldEluc2VydEFyZ3MsCgkic2Nhbl9maWVsZHMiOiAgICAgICAgR2V0U2NhbkZpZWxkcywKCSJ1cGRhdGVfYXJncyI6ICAgICAgICBHZXRVcGRhdGVBcmdzLAoJInVwZGF0ZV92YWx1ZXMiOiAgICAgIEdldFVwZGF0ZVZhbHVlcywKCSJ1cGRhdGVfdmFsdWVzX3NpemUiOiBHZXRVcGRhdGVWYWx1ZXNMZW5ndGgsCn0KCmZ1bmMgR2V0SW5zZXJ0RmllbGRzKGZpZWxkcyBbXVRtcGxGaWVsZCkgc3RyaW5nIHsKCXZhciBwYXJ0cyBbXXN0cmluZwoJZm9yIF8sIGZsIDo9IHJhbmdlIGZpZWxkcyB7CgkJaWYgZmwuQ29sdW1uTmFtZSA9PSAiaWQiIHsKCQkJY29udGludWUKCQl9CgkJcGFydHMgPSBhcHBlbmQocGFydHMsIGAiYCtmbC5Db2x1bW5OYW1lK2AiYCkKCX0KCXJldHVybiBzdHJpbmdzLkpvaW4ocGFydHMsICIsICIpCn0KCmZ1bmMgR2V0SW5zZXJ0VmFsdWVzKGZpZWxkcyBbXVRtcGxGaWVsZCkgc3RyaW5nIHsKCXZhciBwYXJ0cyBbXXN0cmluZwoJZm9yIGksIGZsIDo9IHJhbmdlIGZpZWxkcyB7CgkJc3dpdGNoIGZsLkNvbHVtbk5hbWUgewoJCWNhc2UgImlkIjoKCQkJY29udGludWUKCQljYXNlICJjcmVhdGVkX2F0IjoKCQkJcGFydHMgPSBhcHBlbmQocGFydHMsICJOT1coKSIpCgkJCWNvbnRpbnVlCgkJZGVmYXVsdDoKCQkJcGFydHMgPSBhcHBlbmQocGFydHMsIGZtdC5TcHJpbnRmKCIkJWQiLCBpKSkKCQl9Cgl9CglyZXR1cm4gc3RyaW5ncy5Kb2luKHBhcnRzLCAiLCAiKQp9CgpmdW5jIEdldEluc2VydEFyZ3MobSBTdHJ1Y3RUbXBsRGF0YSkgc3RyaW5nIHsKCXZhciBwYXJ0cyBbXXN0cmluZwoJZm9yIF8sIGZsIDo9IHJhbmdlIG0uTW9kZWwuRmllbGRzIHsKCQlzd2l0Y2ggZmwuTmFtZSB7CgkJY2FzZSAiSUQiLCAiQ3JlYXRlZEF0IjoKCQkJY29udGludWUKCQl9CgkJcGFydHMgPSBhcHBlbmQocGFydHMsIGZtdC5TcHJpbnRmKGAlcy4lc2AsIG0uUmVjZWl2ZXIsIGZsLk5hbWUpKQoJfQoJcmV0dXJuIHN0cmluZ3MuSm9pbihwYXJ0cywgIiwgIikKfQoKZnVuYyBHZXRTY2FuRmllbGRzKG0gU3RydWN0VG1wbERhdGEpIHN0cmluZyB7Cgl2YXIgcGFydHMgW11zdHJpbmcKCWZvciBfLCBmbCA6PSByYW5nZSBtLk1vZGVsLkZpZWxkcyB7CgkJcGFydHMgPSBhcHBlbmQocGFydHMsIGZtdC5TcHJpbnRmKGAmJXMuJXNgLCBtLlJlY2VpdmVyLCBmbC5OYW1lKSkKCX0KCXJldHVybiBzdHJpbmdzLkpvaW4ocGFydHMsICIsICIpCn0KCmZ1bmMgR2V0VXBkYXRlQXJncyhtIFN0cnVjdFRtcGxEYXRhKSBzdHJpbmcgewoJdmFyIHBhcnRzIFtdc3RyaW5nCglmb3IgXywgZmwgOj0gcmFuZ2UgbS5Nb2RlbC5GaWVsZHMgewoJCXN3aXRjaCBmbC5OYW1lIHsKCQljYXNlICJJRCIsICJDcmVhdGVkQXQiLCAiVXBkYXRlZEF0IjoKCQkJY29udGludWUKCQl9CgkJcGFydHMgPSBhcHBlbmQocGFydHMsIGZtdC5TcHJpbnRmKGAlcy4lc2AsIG0uUmVjZWl2ZXIsIGZsLk5hbWUpKQoJfQoJcmV0dXJuIHN0cmluZ3MuSm9pbihwYXJ0cywgIiwgIikKfQoKZnVuYyBHZXRVcGRhdGVWYWx1ZXMobSBTdHJ1Y3RUbXBsRGF0YSkgc3RyaW5nIHsKCXZhciBwYXJ0cyBbXXN0cmluZwoJZm9yIGksIGZsIDo9IHJhbmdlIG0uTW9kZWwuRmllbGRzIHsKCQlzd2l0Y2ggZmwuTmFtZSB7CgkJY2FzZSAiSUQiLCAiQ3JlYXRlZEF0IjoKCQkJY29udGludWUKCQljYXNlICJVcGRhdGVkQXQiOgoJCQlwYXJ0cyA9IGFwcGVuZChwYXJ0cywgZm10LlNwcmludGYoYCIlcyI9bm93KClgLCBmbC5Db2x1bW5OYW1lKSkKCQlkZWZhdWx0OgoJCQlwYXJ0cyA9IGFwcGVuZChwYXJ0cywgZm10LlNwcmludGYoYCIlcyI9JCVkYCwgZmwuQ29sdW1uTmFtZSwgaSkpCgkJfQoJfQoJcmV0dXJuIHN0cmluZ3MuSm9pbihwYXJ0cywgIiwgIikKfQoKZnVuYyBHZXRVcGRhdGVWYWx1ZXNMZW5ndGgobSBTdHJ1Y3RUbXBsRGF0YSkgc3RyaW5nIHsKCXJldHVybiBmbXQuU3ByaW50ZigiJCVkIiwgbGVuKG0uTW9kZWwuRmllbGRzKSkKfQo=\"")
	packr.PackJSONBytes("./tmpl", "types.go", "\"cGFja2FnZSB0bXBsCgovLyBUbXBsU3RydWN0cyBpcyBhIGNvbGxlY3Rpb24gb24gVG1wbFN0cnVjdAp0eXBlIFRtcGxTdHJ1Y3RzIFtdVG1wbFN0cnVjdAoKLy8gVG1wbFN0cnVjdCBkZWZpbmVzIHRoZSB0YWJsZSBkYXRhIHRvIHBhc3MgdG8gdGhlIG1vZGVscwp0eXBlIFRtcGxTdHJ1Y3Qgc3RydWN0IHsKCU5hbWUgICAgICBzdHJpbmcKCVRhYmxlTmFtZSBzdHJpbmcKCUZpZWxkcyAgICBbXVRtcGxGaWVsZAoJSW1wb3J0cyAgIG1hcFtzdHJpbmddc3RydWN0e30KfQoKLy8gVG1wbEZpZWxkIGRlZmluZXMgYSB0YWJsZSBmaWVsZCB0ZW1wbGF0ZQp0eXBlIFRtcGxGaWVsZCBzdHJ1Y3QgewoJTmFtZSAgICAgICBzdHJpbmcKCVR5cGUgICAgICAgc3RyaW5nCglDb2x1bW5OYW1lIHN0cmluZwoJTnVsbGFibGUgICBib29sCn0KCi8vIFN0cnVjdFRtcGxEYXRhIGRlZmluZXMgdGhlIHRvcCBsZXZlbCBzdHJ1Y3QgZGF0YSB0byBwYXNzIHRvIHRoZSBtb2RlbHMKdHlwZSBTdHJ1Y3RUbXBsRGF0YSBzdHJ1Y3QgewoJTW9kZWwgICAgICAgVG1wbFN0cnVjdAoJUmVjZWl2ZXIgICAgc3RyaW5nCglQYWNrYWdlTmFtZSBzdHJpbmcKfQo=\"")
	packr.PackJSONBytes("./tmpl", "x_helpers.html", "\"\"")
	packr.PackJSONBytes("./tmpl", "x_helpers_test.html", "\"\"")
	}
