package main

import "github.com/gobuffalo/packr"

// !!! GENERATED FILE !!!
// Do NOT hand edit this file!!
// It is recommended that you DO NOT check into this file into SCM.
// We STRONGLY recommend you delete this file after you have built your
// Go binary. You can use the "packr clean" command to clean up this,
// and any other packr generated files.
func init() {
	packr.PackJSONBytes("./tmpl", "model.html", "\"e3tkZWZpbmUgIm1vZGVsIn19CnBhY2thZ2Uge3sgLlBhY2thZ2VOYW1lIH19CgovKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSsKfCBDb2RlIGdlbmVyYXRlZCBieSBtb2RlbGdlbiB8CnwgICAgICAgIERPIE5PVCBFRElULiAgICAgICAgfAorLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KCi8vIElmIHlvdSB3YW50IHRvIGV4dGVuZCBiZWhhdmlvdXI6Ci8vIFBsZWFzZSBjcmVhdGUgYSBjdXN0b20gZmlsZSBpbiB0aGlzIGRpcmVjdG9yeQovLyBhbmQgY3JlYXRlIHRoZSBtZXRob2RzIHRoZXJlIHRvIGF2b2lkIG92ZXJ3cml0aW5nIHlvdXIgY29kZSB3aXRoIHRoZSBnZW5lcmF0ZWQgb25lLgoKaW1wb3J0ICgKImZtdCIKImRhdGFiYXNlL3NxbCIKICAgIHt7IHJhbmdlICRrLCAkdjo9IC5Nb2RlbC5JbXBvcnRzIH19CiAgICAie3ska319IgogICAge3stIGVuZCB9fQopCgovLyB7ey5Nb2RlbC5OYW1lfX0gcmVwcmVzZW50cyBhIHJvdyBpbiB0aGUge3suTW9kZWwuVGFibGVOYW1lfX0gdGFibGUKdHlwZSB7ey5Nb2RlbC5OYW1lfX0gc3RydWN0IHsKICAgIHt7IHJhbmdlICRrLCAkdjo9IC5Nb2RlbC5GaWVsZHMgfX0KICAgICAgICB7eyAkdi5OYW1lIH19IHt7ICR2LlR5cGUgfX0gYGpzb246Int7JHYuQ29sdW1uTmFtZX19ImAKICAgIHt7LSBlbmQgfX0Kb2Zmc2V0IGludApsaW1pdCBpbnQKfQoKLy8gSW5zZXJ0IGEgbmV3IHt7Lk1vZGVsLk5hbWV9fSByb3cgaW4gdGhlIHt7Lk1vZGVsLlRhYmxlTmFtZX19IHRhYmxlCmZ1bmMgKHt7LlJlY2VpdmVyfX0gKnt7Lk1vZGVsLk5hbWV9fSkgSW5zZXJ0KGRiICpzcWwuREIpIChsYXN0SW5zZXJ0SUQgaW50NjQsIGVyciBlcnJvcikgewogICAgY29uc3Qgc3RtdCA9IGBJTlNFUlQgSU5UTyAie3suTW9kZWwuVGFibGVOYW1lfX0iICh7ey5Nb2RlbC5GaWVsZHMgfCBpbnNlcnRfZmllbGRzfX0pIFZBTFVFUyAoe3suTW9kZWwuRmllbGRzIHwgaW5zZXJ0X3ZhbHVlc319KSBSRVRVUk5JTkcgaWRgCiAgICByb3cgOj0gZGIuUXVlcnlSb3coc3RtdCwge3sgLiB8IGluc2VydF9hcmdzIH19KQogICAgZXJyID0gcm93LlNjYW4oJmxhc3RJbnNlcnRJRCkKCXJldHVybgp9CgovLyBVcGRhdGUgYW4gZXhpc3Rpbmcge3suTW9kZWwuTmFtZX19IHJvdyBpbiB0aGUge3suTW9kZWwuVGFibGVOYW1lfX0gdGFibGUuCmZ1bmMgKHt7LlJlY2VpdmVyfX0gKnt7Lk1vZGVsLk5hbWV9fSkgVXBkYXRlKGRiICpzcWwuREIsIGlkIGludDY0KSAoaW50NjQsIGVycm9yKSB7CiAgICBjb25zdCBzdG10ID0gYFVQREFURSAie3suTW9kZWwuVGFibGVOYW1lfX0iIFNFVCB7eyAuIHwgdXBkYXRlX3ZhbHVlcyB9fSBXSEVSRSBpZCA9IHt7IC4gfCB1cGRhdGVfdmFsdWVzX3NpemUgfX1gCiAgICByZXN1bHQsIGVyciA6PSBkYi5FeGVjKHN0bXQsIHt7IC4gfCB1cGRhdGVfYXJncyB9fSAsIGlkKQogICAgaWYgZXJyICE9IG5pbCB7CiAgICAgICAgcmV0dXJuIDAsIGVycgogICAgfQogICAgcmV0dXJuIHJlc3VsdC5Sb3dzQWZmZWN0ZWQoKQp9CgovLyBGaW5kIGFuIGV4aXN0aW5nIHt7Lk1vZGVsLk5hbWV9fSByb3cgaW4gdGhlIHt7Lk1vZGVsLlRhYmxlTmFtZX19IHRhYmxlCmZ1bmMgKHt7LlJlY2VpdmVyfX0gKnt7Lk1vZGVsLk5hbWV9fSkgRmluZChkYiAqc3FsLkRCLCBpZCBpbnQ2NCkgZXJyb3IgewogICAgY29uc3Qgc3RtdCA9IGBTRUxFQ1QgKiBGUk9NICJ7ey5Nb2RlbC5UYWJsZU5hbWV9fSIgV0hFUkUgaWQgPSAkMWAKICAgIHJvdyA6PSBkYi5RdWVyeVJvdyhzdG10LCBpZCkKICAgIHJldHVybiByb3cuU2Nhbih7eyAuIHwgc2Nhbl9maWVsZHN9fSkKfQoKLy8gTG9hZCBhbGwsIG9yIGEgc3Vic2V0IG9mIHt7Lk1vZGVsLk5hbWV9fSByb3dzIGZyb20gdGhlIHt7Lk1vZGVsLlRhYmxlTmFtZX19IHRhYmxlCmZ1bmMgKHt7LlJlY2VpdmVyfX0gKnt7Lk1vZGVsLk5hbWV9fSkgTG9hZChkYiAqc3FsLkRCKSAoc2V0IFtde3suTW9kZWwuTmFtZX19LCBlcnIgZXJyb3IpIHsKICAgIHN0bXQgOj0gYFNFTEVDVCAqIEZST00gInt7Lk1vZGVsLlRhYmxlTmFtZX19ImAKCiAgICBpZiB7ey5SZWNlaXZlcn19LmxpbWl0ID09IDAgJiYge3suUmVjZWl2ZXJ9fS5vZmZzZXQgPiAwIHsKICAgICAgICByZXR1cm4gc2V0LCBmbXQuRXJyb3JmKCJjYW5ub3QgcXVlcnkgd2l0aCBvZmZzZXQgYnV0IG5vIGxpbWl0IikKICAgIH0KCiAgICBpZiB7ey5SZWNlaXZlcn19LmxpbWl0ID4gMCB7CiAgICAgICAgc3RtdCArPSBmbXQuU3ByaW50ZigiIExJTUlUICVkIiwge3suUmVjZWl2ZXJ9fS5saW1pdCkKICAgIH0KICAgIGlmIHt7LlJlY2VpdmVyfX0ub2Zmc2V0ID4gMCB7CiAgICAgICAgc3RtdCArPSBmbXQuU3ByaW50ZigiIE9GRlNFVCAlZCIsIHt7LlJlY2VpdmVyfX0ub2Zmc2V0KQogICAgfQogICAgZGVmZXIgZnVuYygpIHsKICAgICAgICB7ey5SZWNlaXZlcn19LmxpbWl0ID0gMAogICAgICAgIHt7LlJlY2VpdmVyfX0ub2Zmc2V0ID0gMAogICAgfSgpCiAgICByb3dzLCBlcnIgOj0gZGIuUXVlcnkoc3RtdCkKICAgIGlmIGVyciAhPSBuaWwgewogICAgICAgIHJldHVybgogICAgfQogICAgZGVmZXIgcm93cy5DbG9zZSgpCiAgICAgICAgZm9yIHJvd3MuTmV4dCgpIHsKICAgICAgICAgICAgaWYgZXJyID0gcm93cy5TY2FuKHt7LiB8IHNjYW5fZmllbGRzfX0pOyBlcnIgIT0gbmlsIHsKICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgfQogICAgICAgIHNldCA9IGFwcGVuZChzZXQsICp7ey5SZWNlaXZlcn19KQogICAgfQoKICAgIHJldHVybgp9CgovLyBEZWxldGUgYW4gZXhpc3Rpbmcge3suTW9kZWwuTmFtZX19IHJvdyBmcm9tIHRoZSB7ey5Nb2RlbC5UYWJsZU5hbWV9fSB0YWJsZQpmdW5jICh7ey5SZWNlaXZlcn19ICp7ey5Nb2RlbC5OYW1lfX0pIERlbGV0ZShkYiAqc3FsLkRCLCBpZCBpbnQ2NCkgKHJvd3NBZmZlY3RlZCBpbnQ2NCwgZXJyIGVycm9yKSB7CiAgICBjb25zdCBzdG10ID0gYERFTEVURSBGUk9NICJ7ey5Nb2RlbC5UYWJsZU5hbWV9fSIgV0hFUkUgaWQgPSAkMWAKICAgIHJlc3VsdCwgZXJyIDo9IGRiLkV4ZWMoc3RtdCwgaWQpCglpZiBlcnIgIT0gbmlsIHsKCQlyZXR1cm4KCX0KCglyZXR1cm4gcmVzdWx0LlJvd3NBZmZlY3RlZCgpCn0KCi8vIENvdW50IHRoZSBudW1iZXIgb2Ygcm93cyBmcm9tIHRoZSB7ey5Nb2RlbC5UYWJsZU5hbWV9fSB0YWJsZQpmdW5jKHt7LlJlY2VpdmVyfX0gKnt7Lk1vZGVsLk5hbWV9fSkgQ291bnQoZGIgKnNxbC5EQikgKGNvdW50IGludDY0LCBlcnIgZXJyb3IpIHsKICAgIGNvbnN0IHN0bXQgPSBgU0VMRUNUIENPVU5UKCopIEZST00gInt7Lk1vZGVsLlRhYmxlTmFtZX19ImAKICAgIHJvdyA6PSBkYi5RdWVyeVJvdyhzdG10KQogICAgaWYgZXJyID0gcm93LlNjYW4oJmNvdW50KTsgZXJyICE9IG5pbCB7CiAgICAgICAgcmV0dXJuCiAgICB9CiAgICByZXR1cm4KfQoKLy8gRXhpc3RzIGNoZWNrcyBmb3IgdGhlIGl0ZW1zIGV4aXN0ZW5jZSBpbiB0aGUgZGF0YWJhc2UsIGJhc2VkIG9uIGl0J3MgaWQuCi8vIEFuIGVycm9yIHdpbGwgb25seSBiZSByZXR1cm5lZCBpZiBhIFNRTCByZWxhdGVkIGZhaWx1cmUgaGFwcGVucy4KLy8gSW4gYWxsIG90aGVyIGNhc2VzLCBhIGJvb2wgYW5kIG5pbCB3aWxsIHJldHVybi4KZnVuYyh7ey5SZWNlaXZlcn19ICp7ey5Nb2RlbC5OYW1lfX0pIEV4aXN0cyhkYiAqc3FsLkRCLCBpZCBpbnQ2NCkgKGV4aXN0cyBib29sLCBlcnIgZXJyb3IpIHsKICAgIGNvbnN0IHN0bXQgPSBgU0VMRUNUIEVYSVNUUyhTRUxFQ1QgMSBGUk9NICJ7ey5Nb2RlbC5UYWJsZU5hbWV9fSIgV0hFUkUgaWQgPSAkMSBMSU1JVCAxKSBBUyAiZXhpc3RzImAKICAgIHJvdyA6PSBkYi5RdWVyeVJvdyhzdG10LCBpZCkKICAgIGlmIGVyciA9IHJvdy5TY2FuKCZleGlzdHMpOyBlcnIgIT0gbmlsIHsKICAgICAgICByZXR1cm4KICAgIH0KICAgIHJldHVybgp9CgovLyBUYWJsZU5hbWUgcmV0dXJucyB0aGUgdGFibGUgbmFtZQpmdW5jICh7ey5SZWNlaXZlcn19ICp7ey5Nb2RlbC5OYW1lfX0pIFRhYmxlTmFtZSgpIHN0cmluZyB7CiAgICByZXR1cm4gInt7Lk1vZGVsLlRhYmxlTmFtZX19Igp9CgovLyBTZXRMaW1pdCBzZXRzIHRoZSBxdWVyeSBsaW1pdApmdW5jICh7ey5SZWNlaXZlcn19ICp7ey5Nb2RlbC5OYW1lfX0pIFNldExpbWl0KGxpbWl0IGludCkgKnt7Lk1vZGVsLk5hbWV9fSB7CiAgICB7ey5SZWNlaXZlcn19LmxpbWl0ID0gbGltaXQKICAgIHJldHVybiB7ey5SZWNlaXZlcn19Cn0KCi8vIFNldE9mZnNldCBzZXRzIHRoZSBxdWVyeSBvZmZzZXQKZnVuYyAoe3suUmVjZWl2ZXJ9fSAqe3suTW9kZWwuTmFtZX19KSBTZXRPZmZzZXQob2Zmc2V0IGludCkgKnt7Lk1vZGVsLk5hbWV9fSB7CiAgICB7ey5SZWNlaXZlcn19Lm9mZnNldCA9IG9mZnNldAogICAgcmV0dXJuIHt7LlJlY2VpdmVyfX0KfQp7e2VuZH19Cg==\"")
	packr.PackJSONBytes("./tmpl", "tmpl.go", "\"cGFja2FnZSB0bXBsCgppbXBvcnQgKAoJImZtdCIKCSJzdHJpbmdzIgoJInRleHQvdGVtcGxhdGUiCikKCnZhciBGdW5jTWFwID0gdGVtcGxhdGUuRnVuY01hcHsKCSJpbnNlcnRfZmllbGRzIjogICAgICBHZXRJbnNlcnRGaWVsZHMsCgkiaW5zZXJ0X3ZhbHVlcyI6ICAgICAgR2V0SW5zZXJ0VmFsdWVzLAoJImluc2VydF9hcmdzIjogICAgICAgIEdldEluc2VydEFyZ3MsCgkic2Nhbl9maWVsZHMiOiAgICAgICAgR2V0U2NhbkZpZWxkcywKCSJ1cGRhdGVfYXJncyI6ICAgICAgICBHZXRVcGRhdGVBcmdzLAoJInVwZGF0ZV92YWx1ZXMiOiAgICAgIEdldFVwZGF0ZVZhbHVlcywKCSJ1cGRhdGVfdmFsdWVzX3NpemUiOiBHZXRVcGRhdGVWYWx1ZXNMZW5ndGgsCn0KCmZ1bmMgR2V0SW5zZXJ0RmllbGRzKGZpZWxkcyBbXVRtcGxGaWVsZCkgc3RyaW5nIHsKCXZhciBwYXJ0cyBbXXN0cmluZwoJZm9yIF8sIGZsIDo9IHJhbmdlIGZpZWxkcyB7CgkJaWYgZmwuQ29sdW1uTmFtZSA9PSAiaWQiIHsKCQkJY29udGludWUKCQl9CgkJcGFydHMgPSBhcHBlbmQocGFydHMsIGAiYCtmbC5Db2x1bW5OYW1lK2AiYCkKCX0KCXJldHVybiBzdHJpbmdzLkpvaW4ocGFydHMsICIsICIpCn0KCmZ1bmMgR2V0SW5zZXJ0VmFsdWVzKGZpZWxkcyBbXVRtcGxGaWVsZCkgc3RyaW5nIHsKCXZhciBwYXJ0cyBbXXN0cmluZwoJZm9yIGksIGZsIDo9IHJhbmdlIGZpZWxkcyB7CgkJc3dpdGNoIGZsLkNvbHVtbk5hbWUgewoJCWNhc2UgImlkIjoKCQkJY29udGludWUKCQljYXNlICJjcmVhdGVkX2F0IjoKCQkJcGFydHMgPSBhcHBlbmQocGFydHMsICJOT1coKSIpCgkJCWNvbnRpbnVlCgkJZGVmYXVsdDoKCQkJcGFydHMgPSBhcHBlbmQocGFydHMsIGZtdC5TcHJpbnRmKCIkJWQiLCBpKSkKCQl9Cgl9CglyZXR1cm4gc3RyaW5ncy5Kb2luKHBhcnRzLCAiLCAiKQp9CgpmdW5jIEdldEluc2VydEFyZ3MobSBTdHJ1Y3RUbXBsRGF0YSkgc3RyaW5nIHsKCXZhciBwYXJ0cyBbXXN0cmluZwoJZm9yIF8sIGZsIDo9IHJhbmdlIG0uTW9kZWwuRmllbGRzIHsKCQlzd2l0Y2ggZmwuTmFtZSB7CgkJY2FzZSAiSUQiLCAiQ3JlYXRlZEF0IjoKCQkJY29udGludWUKCQl9CgkJcGFydHMgPSBhcHBlbmQocGFydHMsIGZtdC5TcHJpbnRmKGAlcy4lc2AsIG0uUmVjZWl2ZXIsIGZsLk5hbWUpKQoJfQoJcmV0dXJuIHN0cmluZ3MuSm9pbihwYXJ0cywgIiwgIikKfQoKZnVuYyBHZXRTY2FuRmllbGRzKG0gU3RydWN0VG1wbERhdGEpIHN0cmluZyB7Cgl2YXIgcGFydHMgW11zdHJpbmcKCWZvciBfLCBmbCA6PSByYW5nZSBtLk1vZGVsLkZpZWxkcyB7CgkJcGFydHMgPSBhcHBlbmQocGFydHMsIGZtdC5TcHJpbnRmKGAmJXMuJXNgLCBtLlJlY2VpdmVyLCBmbC5OYW1lKSkKCX0KCXJldHVybiBzdHJpbmdzLkpvaW4ocGFydHMsICIsICIpCn0KCmZ1bmMgR2V0VXBkYXRlQXJncyhtIFN0cnVjdFRtcGxEYXRhKSBzdHJpbmcgewoJdmFyIHBhcnRzIFtdc3RyaW5nCglmb3IgXywgZmwgOj0gcmFuZ2UgbS5Nb2RlbC5GaWVsZHMgewoJCXN3aXRjaCBmbC5OYW1lIHsKCQljYXNlICJJRCIsICJDcmVhdGVkQXQiLCAiVXBkYXRlZEF0IjoKCQkJY29udGludWUKCQl9CgkJcGFydHMgPSBhcHBlbmQocGFydHMsIGZtdC5TcHJpbnRmKGAlcy4lc2AsIG0uUmVjZWl2ZXIsIGZsLk5hbWUpKQoJfQoJcmV0dXJuIHN0cmluZ3MuSm9pbihwYXJ0cywgIiwgIikKfQoKZnVuYyBHZXRVcGRhdGVWYWx1ZXMobSBTdHJ1Y3RUbXBsRGF0YSkgc3RyaW5nIHsKCXZhciBwYXJ0cyBbXXN0cmluZwoJZm9yIGksIGZsIDo9IHJhbmdlIG0uTW9kZWwuRmllbGRzIHsKCQlzd2l0Y2ggZmwuTmFtZSB7CgkJY2FzZSAiSUQiLCAiQ3JlYXRlZEF0IjoKCQkJY29udGludWUKCQljYXNlICJVcGRhdGVkQXQiOgoJCQlwYXJ0cyA9IGFwcGVuZChwYXJ0cywgZm10LlNwcmludGYoYCIlcyI9bm93KClgLCBmbC5Db2x1bW5OYW1lKSkKCQlkZWZhdWx0OgoJCQlwYXJ0cyA9IGFwcGVuZChwYXJ0cywgZm10LlNwcmludGYoYCIlcyI9JCVkYCwgZmwuQ29sdW1uTmFtZSwgaSkpCgkJfQoJfQoJcmV0dXJuIHN0cmluZ3MuSm9pbihwYXJ0cywgIiwgIikKfQoKZnVuYyBHZXRVcGRhdGVWYWx1ZXNMZW5ndGgobSBTdHJ1Y3RUbXBsRGF0YSkgc3RyaW5nIHsKCXJldHVybiBmbXQuU3ByaW50ZigiJCVkIiwgbGVuKG0uTW9kZWwuRmllbGRzKSkKfQo=\"")
	packr.PackJSONBytes("./tmpl", "types.go", "\"cGFja2FnZSB0bXBsCgovLyBUbXBsU3RydWN0cyBpcyBhIGNvbGxlY3Rpb24gb24gVG1wbFN0cnVjdAp0eXBlIFRtcGxTdHJ1Y3RzIFtdVG1wbFN0cnVjdAoKLy8gVG1wbFN0cnVjdCBkZWZpbmVzIHRoZSB0YWJsZSBkYXRhIHRvIHBhc3MgdG8gdGhlIG1vZGVscwp0eXBlIFRtcGxTdHJ1Y3Qgc3RydWN0IHsKCU5hbWUgICAgICBzdHJpbmcKCVRhYmxlTmFtZSBzdHJpbmcKCUZpZWxkcyAgICBbXVRtcGxGaWVsZAoJSW1wb3J0cyAgIG1hcFtzdHJpbmddc3RydWN0e30KfQoKLy8gVG1wbEZpZWxkIGRlZmluZXMgYSB0YWJsZSBmaWVsZCB0ZW1wbGF0ZQp0eXBlIFRtcGxGaWVsZCBzdHJ1Y3QgewoJTmFtZSAgICAgICBzdHJpbmcKCVR5cGUgICAgICAgc3RyaW5nCglDb2x1bW5OYW1lIHN0cmluZwoJTnVsbGFibGUgICBib29sCn0KCi8vIFN0cnVjdFRtcGxEYXRhIGRlZmluZXMgdGhlIHRvcCBsZXZlbCBzdHJ1Y3QgZGF0YSB0byBwYXNzIHRvIHRoZSBtb2RlbHMKdHlwZSBTdHJ1Y3RUbXBsRGF0YSBzdHJ1Y3QgewoJTW9kZWwgICAgICAgVG1wbFN0cnVjdAoJUmVjZWl2ZXIgICAgc3RyaW5nCglQYWNrYWdlTmFtZSBzdHJpbmcKfQo=\"")
	packr.PackJSONBytes("./tmpl", "x_helpers.html", "\"\"")
	packr.PackJSONBytes("./tmpl", "x_helpers_test.html", "\"e3tkZWZpbmUgImhlbHBlcnN0ZXN0In19Ci8vK2J1aWxkICFoZWxwZXJzCgpwYWNrYWdlIHt7IC5QYWNrYWdlTmFtZSB9fQoKLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0rCnwgQ29kZSBnZW5lcmF0ZWQgYnkgbW9kZWxnZW4gfAp8ICAgICAgICBETyBOT1QgRURJVC4gICAgICAgIHwKKy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCgppbXBvcnQgKAoJImRhdGFiYXNlL3NxbC9kcml2ZXIiCgkiZW5jb2RpbmcvanNvbiIKCSJyZWZsZWN0IgoJInRlc3RpbmciCgkidGltZSIKKQoKZnVuYyBUZXN0U3RydWN0RW1iZWRkaW5nKHQgKnRlc3RpbmcuVCkgewoJdGltIDo9IHRpbWUuRGF0ZSgyMDE3LCAxLCAxLCAwLCAwLCAwLCAwLCB0aW1lLlVUQykKCWV4cGVjdGVkIDo9IFtdYnl0ZShgeyJhIjoxMjMsImIiOnRydWUsImMiOjEyMy4xMjMsImQiOiJzdHJpbmciLCJlIjoiMjAxNy0wMS0wMVQwMDowMDowMFoiLCJmIjpbMSwyLDNdfWApCgl0eXBlIGVtYmVkIHN0cnVjdCB7CgkJQSBOdWxsSW50NjQgICBganNvbjoiYSxvbWl0ZW1wdHkiYAoJCUIgTnVsbEJvb2wgICAgYGpzb246ImIsb21pdGVtcHR5ImAKCQlDIE51bGxGbG9hdDY0IGBqc29uOiJjLG9taXRlbXB0eSJgCgkJRCBOdWxsU3RyaW5nICBganNvbjoiZCxvbWl0ZW1wdHkiYAoJCUUgTnVsbFRpbWUgICAgYGpzb246ImUsb21pdGVtcHR5ImAKCQlGIFJhd0pTT04gICAgIGBqc29uOiJmLG9taXRlbXB0eSJgCgl9CgllbSA6PSBlbWJlZHsKCQlBOiBOdWxsSW50NjR7VmFsaWQ6IHRydWUsIEludDY0OiAxMjN9LAoJCUI6IE51bGxCb29se1ZhbGlkOiB0cnVlLCBCb29sOiB0cnVlfSwKCQlDOiBOdWxsRmxvYXQ2NHtWYWxpZDogdHJ1ZSwgRmxvYXQ2NDogMTIzLjEyM30sCgkJRDogTnVsbFN0cmluZ3tWYWxpZDogdHJ1ZSwgU3RyaW5nOiAic3RyaW5nIn0sCgkJRTogTnVsbFRpbWV7VmFsaWQ6IHRydWUsIFRpbWU6IHRpbX0sCgkJRjogUmF3SlNPTihgWzEsMiwzXWApLAoJfQoJYiwgZXJyIDo9IGpzb24uTWFyc2hhbChlbSkKCWlmIGVyciAhPSBuaWwgewoJCXQuRmF0YWwoZXJyKQoJfQoJaWYgIXJlZmxlY3QuRGVlcEVxdWFsKGV4cGVjdGVkLCBiKSB7CgkJdC5GYXRhbCgibm90IHRoZSBzYW1lIEpTT04hIikKCX0KCWlmICEoc3RyaW5nKGIpID09IHN0cmluZyhleHBlY3RlZCkpIHsKCQl0LkZhdGFsKCJub3QgdGhlIHNhbWUhIikKCX0KCgl2YXIgZW0yIGVtYmVkCglpZiBlcnIgOj0ganNvbi5Vbm1hcnNoYWwoZXhwZWN0ZWQsICZlbTIpOyBlcnIgIT0gbmlsIHsKCQl0LkZhdGFsKGVycikKCX0KCWlmICFyZWZsZWN0LkRlZXBFcXVhbChlbTIsIGVtKSB7CgkJdC5GYXRhbCgibm90IGNvcnJlY3QiKQoJfQp9CgpmdW5jIFRlc3ROdWxsU3RyaW5nX1VubWFyc2hhbEpTT04odCAqdGVzdGluZy5UKSB7Cgl0ZXN0cyA6PSBbXXN0cnVjdCB7CgkJbmFtZSAgICBzdHJpbmcKCQluICAgICAgIE51bGxTdHJpbmcKCQlzb3VyY2UgIFtdYnl0ZQoJCXdhbnRFcnIgYm9vbAoJfXsKCQl7CgkJCW5hbWU6ICAgICJ2YWxpZCIsCgkJCXNvdXJjZTogIFtdYnl0ZShgImhlbGxvImApLAoJCQl3YW50RXJyOiBmYWxzZSwKCQl9LAoJCXsKCQkJbmFtZTogICAgImludmFsaWQiLAoJCQlzb3VyY2U6ICBbXWJ5dGUoYHsia2V5IjoidmFsdWUifWApLAoJCQl3YW50RXJyOiB0cnVlLAoJCX0sCgkJewoJCQluYW1lOiAgICAiZW1wdHkiLAoJCQlzb3VyY2U6ICBbXWJ5dGV7fSwKCQkJd2FudEVycjogdHJ1ZSwKCQl9LAoJfQoJZm9yIF8sIHR0IDo9IHJhbmdlIHRlc3RzIHsKCQl0LlJ1bih0dC5uYW1lLCBmdW5jKHQgKnRlc3RpbmcuVCkgewoJCQlpZiBlcnIgOj0gdHQubi5Vbm1hcnNoYWxKU09OKHR0LnNvdXJjZSk7IChlcnIgIT0gbmlsKSAhPSB0dC53YW50RXJyIHsKCQkJCXQuRXJyb3JmKCJOdWxsU3RyaW5nLlVubWFyc2hhbEpTT04oKSBlcnJvciA9ICV2LCB3YW50RXJyICV2IiwgZXJyLCB0dC53YW50RXJyKQoJCQl9CgkJfSkKCX0KfQoKZnVuYyBUZXN0TnVsbFN0cmluZ19WYWx1ZSh0ICp0ZXN0aW5nLlQpIHsKCXRlc3RzIDo9IFtdc3RydWN0IHsKCQluYW1lICAgIHN0cmluZwoJCW4gICAgICAgTnVsbFN0cmluZwoJCXdhbnQgICAgZHJpdmVyLlZhbHVlCgkJd2FudEVyciBib29sCgl9ewoJCXsKCQkJbmFtZTogInZhbGlkIiwKCQkJbjogTnVsbFN0cmluZ3sKCQkJCVZhbGlkOiAgdHJ1ZSwKCQkJCVN0cmluZzogImhlbGxvIiwKCQkJfSwKCQkJd2FudDogICAgZHJpdmVyLlZhbHVlKCJoZWxsbyIpLAoJCQl3YW50RXJyOiBmYWxzZSwKCQl9LAoJCXsKCQkJbmFtZTogImludmFsaWQiLAoJCQluOiBOdWxsU3RyaW5newoJCQkJVmFsaWQ6IGZhbHNlLAoJCQl9LAoJCQl3YW50OiAgICBuaWwsCgkJCXdhbnRFcnI6IGZhbHNlLAoJCX0sCgl9Cglmb3IgXywgdHQgOj0gcmFuZ2UgdGVzdHMgewoJCXQuUnVuKHR0Lm5hbWUsIGZ1bmModCAqdGVzdGluZy5UKSB7CgkJCWdvdCwgZXJyIDo9IHR0Lm4uVmFsdWUoKQoJCQlpZiAoZXJyICE9IG5pbCkgIT0gdHQud2FudEVyciB7CgkJCQl0LkVycm9yZigiTnVsbFN0cmluZy5WYWx1ZSgpIGVycm9yID0gJXYsIHdhbnRFcnIgJXYiLCBlcnIsIHR0LndhbnRFcnIpCgkJCQlyZXR1cm4KCQkJfQoJCQlpZiAhcmVmbGVjdC5EZWVwRXF1YWwoZ290LCB0dC53YW50KSB7CgkJCQl0LkVycm9yZigiTnVsbFN0cmluZy5WYWx1ZSgpID0gJXYsIHdhbnQgJXYiLCBnb3QsIHR0LndhbnQpCgkJCX0KCQl9KQoJfQp9CgpmdW5jIFRlc3ROdWxsU3RyaW5nX1NjYW4odCAqdGVzdGluZy5UKSB7Cgl0ZXN0cyA6PSBbXXN0cnVjdCB7CgkJbmFtZSAgICBzdHJpbmcKCQluICAgICAgICpOdWxsU3RyaW5nCgkJd2FudEVyciBib29sCgkJc3JjICAgICBpbnRlcmZhY2V7fQoJfXsKCQl7CgkJCW5hbWU6ICJ2YWxpZCIsCgkJCW46ICZOdWxsU3RyaW5newoJCQkJU3RyaW5nOiAiaGVsbG8iLAoJCQkJVmFsaWQ6ICB0cnVlLAoJCQl9LAoJCQlzcmM6ICAgICAiIiwKCQkJd2FudEVycjogZmFsc2UsCgkJfSwKCQl7CgkJCW5hbWU6ICJuaWwgdmFsdWUiLAoJCQluOiAmTnVsbFN0cmluZ3sKCQkJCVN0cmluZzogImhlbGxvIiwKCQkJCVZhbGlkOiAgZmFsc2UsCgkJCX0sCgkJCXNyYzogICAgIG5pbCwKCQkJd2FudEVycjogZmFsc2UsCgkJfSwKCX0KCWZvciBfLCB0dCA6PSByYW5nZSB0ZXN0cyB7CgkJdC5SdW4odHQubmFtZSwgZnVuYyh0ICp0ZXN0aW5nLlQpIHsKCQkJaWYgZXJyIDo9IHR0Lm4uU2Nhbih0dC5zcmMpOyAoZXJyICE9IG5pbCkgIT0gdHQud2FudEVyciB7CgkJCQl0LkVycm9yZigiTnVsbFN0cmluZy5TY2FuKCkgZXJyb3IgPSAldiwgd2FudEVyciAldiIsIGVyciwgdHQud2FudEVycikKCQkJfQoJCQlpZiB0dC5uLlZhbGlkID09IGZhbHNlICYmIHR0LnNyYyAhPSBuaWwgewoJCQkJdC5FcnJvcmYoInNob3VsZCByZXR1cm4gbnVsbCIpCgkJCX0KCQkJaWYgdHQubi5WYWxpZCAmJiB0dC5zcmMgIT0gdHQubi5TdHJpbmcgewoJCQkJdC5FcnJvcmYoImludmFsaWQgdmFsdWUiKQoJCQl9CgkJfSkKCX0KfQoKZnVuYyBUZXN0TnVsbFN0cmluZ19NYXJzaGFsSlNPTih0ICp0ZXN0aW5nLlQpIHsKCXRlc3RzIDo9IFtdc3RydWN0IHsKCQluYW1lICAgIHN0cmluZwoJCW4gICAgICAgKk51bGxTdHJpbmcKCQl3YW50ICAgIFtdYnl0ZQoJCXdhbnRFcnIgYm9vbAoJfXsKCQl7CgkJCW5hbWU6ICJ2YWxpZCIsCgkJCW46ICZOdWxsU3RyaW5newoJCQkJU3RyaW5nOiAiaGVsbG8iLAoJCQkJVmFsaWQ6ICB0cnVlLAoJCQl9LAoJCQl3YW50OiAgICBbXWJ5dGUoYCJoZWxsbyJgKSwKCQkJd2FudEVycjogZmFsc2UsCgkJfSwKCQl7CgkJCW5hbWU6ICJ2YWxpZCBudWxsIiwKCQkJbjogJk51bGxTdHJpbmd7CgkJCQlTdHJpbmc6ICIiLAoJCQkJVmFsaWQ6ICBmYWxzZSwKCQkJfSwKCQkJd2FudDogICAgW11ieXRlKGBudWxsYCksCgkJCXdhbnRFcnI6IGZhbHNlLAoJCX0sCgkJewoJCQluYW1lOiAiaW52YWxpZCIsCgkJCW46ICZOdWxsU3RyaW5newoJCQkJVmFsaWQ6IHRydWUsCgkJCX0sCgkJCXdhbnQ6ICAgIFtdYnl0ZShgIiJgKSwKCQkJd2FudEVycjogZmFsc2UsCgkJfSwKCX0KCWZvciBfLCB0dCA6PSByYW5nZSB0ZXN0cyB7CgkJdC5SdW4odHQubmFtZSwgZnVuYyh0ICp0ZXN0aW5nLlQpIHsKCQkJZ290LCBlcnIgOj0gdHQubi5NYXJzaGFsSlNPTigpCgkJCWlmIChlcnIgIT0gbmlsKSAhPSB0dC53YW50RXJyIHsKCQkJCXQuRXJyb3JmKCJOdWxsU3RyaW5nLk1hcnNoYWxKU09OKCkgZXJyb3IgPSAldiwgd2FudEVyciAldiIsIGVyciwgdHQud2FudEVycikKCQkJCXJldHVybgoJCQl9CgkJCWlmICFyZWZsZWN0LkRlZXBFcXVhbChnb3QsIHR0LndhbnQpIHsKCQkJCXQuRXJyb3JmKCJOdWxsU3RyaW5nLk1hcnNoYWxKU09OKCkgPSAldiwgd2FudCAldiIsIGdvdCwgdHQud2FudCkKCQkJfQoJCX0pCgl9Cn0KCmZ1bmMgVGVzdE51bGxCb29sX1VubWFyc2hhbEpTT04odCAqdGVzdGluZy5UKSB7Cgl0ZXN0cyA6PSBbXXN0cnVjdCB7CgkJbmFtZSAgICAgICAgIHN0cmluZwoJCW4gICAgICAgICAgICBOdWxsQm9vbAoJCXNvdXJjZSAgICAgICBbXWJ5dGUKCQl3YW50RXJyICAgICAgYm9vbAoJCXdhbnRWYWxpZGl0eSBib29sCgl9ewoJCXsKCQkJbmFtZTogICAgICAgICAidmFsaWQiLAoJCQlzb3VyY2U6ICAgICAgIFtdYnl0ZShgZmFsc2VgKSwKCQkJd2FudEVycjogICAgICBmYWxzZSwKCQkJd2FudFZhbGlkaXR5OiB0cnVlLAoJCX0sCgkJewoJCQluYW1lOiAgICAgICAgICJpbnZhbGlkIiwKCQkJc291cmNlOiAgICAgICBbXWJ5dGUoYHsia2V5IjoidmFsdWUifWApLAoJCQl3YW50RXJyOiAgICAgIHRydWUsCgkJCXdhbnRWYWxpZGl0eTogZmFsc2UsCgkJfSwKCQl7CgkJCW5hbWU6ICAgICAgICAgImVtcHR5IiwKCQkJc291cmNlOiAgICAgICBbXWJ5dGV7fSwKCQkJd2FudEVycjogICAgICB0cnVlLAoJCQl3YW50VmFsaWRpdHk6IGZhbHNlLAoJCX0sCgkJewoJCQluYW1lOiAgICAgICAgICJleHBsaWNpdCBudWxsIiwKCQkJc291cmNlOiAgICAgICBbXWJ5dGUoIm51bGwiKSwKCQkJd2FudEVycjogICAgICBmYWxzZSwKCQkJd2FudFZhbGlkaXR5OiBmYWxzZSwKCQl9LAoJfQoJZm9yIF8sIHR0IDo9IHJhbmdlIHRlc3RzIHsKCQl0LlJ1bih0dC5uYW1lLCBmdW5jKHQgKnRlc3RpbmcuVCkgewoJCQlpZiBlcnIgOj0gdHQubi5Vbm1hcnNoYWxKU09OKHR0LnNvdXJjZSk7IChlcnIgIT0gbmlsKSAhPSB0dC53YW50RXJyICYmIHR0Lm4uVmFsaWQgPT0gdHQud2FudFZhbGlkaXR5IHsKCQkJCXQuRXJyb3JmKCJOdWxsQm9vbC5Vbm1hcnNoYWxKU09OKCkgZXJyb3IgPSAldiwgd2FudEVyciAldiIsIGVyciwgdHQud2FudEVycikKCQkJfQoJCX0pCgl9Cn0KCmZ1bmMgVGVzdE51bGxCb29sX1ZhbHVlKHQgKnRlc3RpbmcuVCkgewoJdGVzdHMgOj0gW11zdHJ1Y3QgewoJCW5hbWUgICAgc3RyaW5nCgkJbiAgICAgICBOdWxsQm9vbAoJCXdhbnQgICAgZHJpdmVyLlZhbHVlCgkJd2FudEVyciBib29sCgl9ewoJCXsKCQkJbmFtZTogInZhbGlkIiwKCQkJbjogTnVsbEJvb2x7CgkJCQlWYWxpZDogdHJ1ZSwKCQkJCUJvb2w6ICB0cnVlLAoJCQl9LAoJCQl3YW50OiAgICBkcml2ZXIuVmFsdWUodHJ1ZSksCgkJCXdhbnRFcnI6IGZhbHNlLAoJCX0sCgkJewoJCQluYW1lOiAiaW52YWxpZCIsCgkJCW46IE51bGxCb29sewoJCQkJVmFsaWQ6IGZhbHNlLAoJCQl9LAoJCQl3YW50OiAgICBuaWwsCgkJCXdhbnRFcnI6IGZhbHNlLAoJCX0sCgl9Cglmb3IgXywgdHQgOj0gcmFuZ2UgdGVzdHMgewoJCXQuUnVuKHR0Lm5hbWUsIGZ1bmModCAqdGVzdGluZy5UKSB7CgkJCWdvdCwgZXJyIDo9IHR0Lm4uVmFsdWUoKQoJCQlpZiAoZXJyICE9IG5pbCkgIT0gdHQud2FudEVyciB7CgkJCQl0LkVycm9yZigiTnVsbEJvb2wuVmFsdWUoKSBlcnJvciA9ICV2LCB3YW50RXJyICV2IiwgZXJyLCB0dC53YW50RXJyKQoJCQkJcmV0dXJuCgkJCX0KCQkJaWYgIXJlZmxlY3QuRGVlcEVxdWFsKGdvdCwgdHQud2FudCkgewoJCQkJdC5FcnJvcmYoIk51bGxCb29sLlZhbHVlKCkgPSAldiwgd2FudCAldiIsIGdvdCwgdHQud2FudCkKCQkJfQoJCX0pCgl9Cn0KCmZ1bmMgVGVzdE51bGxCb29sX1NjYW4odCAqdGVzdGluZy5UKSB7Cgl0ZXN0cyA6PSBbXXN0cnVjdCB7CgkJbmFtZSAgICBzdHJpbmcKCQluICAgICAgICpOdWxsQm9vbAoJCXdhbnRFcnIgYm9vbAoJCXNyYyAgICAgaW50ZXJmYWNle30KCX17CgkJewoJCQluYW1lOiAidmFsaWQiLAoJCQluOiAmTnVsbEJvb2x7CgkJCQlCb29sOiAgdHJ1ZSwKCQkJCVZhbGlkOiB0cnVlLAoJCQl9LAoJCQlzcmM6ICAgICB0cnVlLAoJCQl3YW50RXJyOiBmYWxzZSwKCQl9LAoJCXsKCQkJbmFtZTogIm5pbCB2YWx1ZSIsCgkJCW46ICZOdWxsQm9vbHsKCQkJCUJvb2w6ICB0cnVlLAoJCQkJVmFsaWQ6IGZhbHNlLAoJCQl9LAoJCQlzcmM6ICAgICBmYWxzZSwKCQkJd2FudEVycjogZmFsc2UsCgkJfSwKCX0KCWZvciBfLCB0dCA6PSByYW5nZSB0ZXN0cyB7CgkJdC5SdW4odHQubmFtZSwgZnVuYyh0ICp0ZXN0aW5nLlQpIHsKCQkJaWYgZXJyIDo9IHR0Lm4uU2Nhbih0dC5zcmMpOyAoZXJyICE9IG5pbCkgIT0gdHQud2FudEVyciB7CgkJCQl0LkVycm9yZigiTnVsbEJvb2wuU2NhbigpIGVycm9yID0gJXYsIHdhbnRFcnIgJXYiLCBlcnIsIHR0LndhbnRFcnIpCgkJCX0KCQkJaWYgdHQubi5WYWxpZCA9PSBmYWxzZSAmJiB0dC5zcmMgIT0gbmlsIHsKCQkJCXQuRXJyb3JmKCJzaG91bGQgcmV0dXJuIG51bGwiKQoJCQl9CgkJCWlmIHR0Lm4uVmFsaWQgJiYgdHQuc3JjICE9IHR0Lm4uQm9vbCB7CgkJCQl0LkVycm9yZigiaW52YWxpZCB2YWx1ZSIpCgkJCX0KCQl9KQoJfQp9CgpmdW5jIFRlc3ROdWxsQm9vbF9NYXJzaGFsSlNPTih0ICp0ZXN0aW5nLlQpIHsKCXRlc3RzIDo9IFtdc3RydWN0IHsKCQluYW1lICAgIHN0cmluZwoJCW4gICAgICAgKk51bGxCb29sCgkJd2FudCAgICBbXWJ5dGUKCQl3YW50RXJyIGJvb2wKCX17CgkJewoJCQluYW1lOiAidmFsaWQiLAoJCQluOiAmTnVsbEJvb2x7CgkJCQlWYWxpZDogdHJ1ZSwKCQkJfSwKCQkJd2FudDogICAgW11ieXRlKGBmYWxzZWApLAoJCQl3YW50RXJyOiBmYWxzZSwKCQl9LAoJCXsKCQkJbmFtZTogInZhbGlkIG51bGwiLAoJCQluOiAmTnVsbEJvb2x7CgkJCQlWYWxpZDogZmFsc2UsCgkJCX0sCgkJCXdhbnQ6ICAgIFtdYnl0ZShgbnVsbGApLAoJCQl3YW50RXJyOiBmYWxzZSwKCQl9LAoJCXsKCQkJbmFtZTogImludmFsaWQiLAoJCQluOiAmTnVsbEJvb2x7CgkJCQlWYWxpZDogdHJ1ZSwKCQkJfSwKCQkJd2FudDogICAgW11ieXRlKGBmYWxzZWApLAoJCQl3YW50RXJyOiBmYWxzZSwKCQl9LAoJfQoJZm9yIF8sIHR0IDo9IHJhbmdlIHRlc3RzIHsKCQl0LlJ1bih0dC5uYW1lLCBmdW5jKHQgKnRlc3RpbmcuVCkgewoJCQlnb3QsIGVyciA6PSB0dC5uLk1hcnNoYWxKU09OKCkKCQkJaWYgKGVyciAhPSBuaWwpICE9IHR0LndhbnRFcnIgewoJCQkJdC5FcnJvcmYoIk51bGxCb29sLk1hcnNoYWxKU09OKCkgZXJyb3IgPSAldiwgd2FudEVyciAldiIsIGVyciwgdHQud2FudEVycikKCQkJCXJldHVybgoJCQl9CgkJCWlmICFyZWZsZWN0LkRlZXBFcXVhbChnb3QsIHR0LndhbnQpIHsKCQkJCXQuRXJyb3JmKCJOdWxsQm9vbC5NYXJzaGFsSlNPTigpID0gJXYsIHdhbnQgJXYiLCBnb3QsIHR0LndhbnQpCgkJCX0KCQl9KQoJfQp9CgpmdW5jIFRlc3ROdWxsVGltZV9Vbm1hcnNoYWxKU09OKHQgKnRlc3RpbmcuVCkgewoJdGVzdHMgOj0gW11zdHJ1Y3QgewoJCW5hbWUgICAgc3RyaW5nCgkJbiAgICAgICBOdWxsVGltZQoJCXNvdXJjZSAgW11ieXRlCgkJd2FudEVyciBib29sCgl9ewoJCXsKCQkJbmFtZTogICAgInZhbGlkIiwKCQkJc291cmNlOiAgW11ieXRlKGAiMjAxNy0xMS0yNFQwMDowMDowMFoiYCksCgkJCXdhbnRFcnI6IGZhbHNlLAoJCX0sCgkJewoJCQluYW1lOiAgICAiaW52YWxpZCIsCgkJCXNvdXJjZTogIFtdYnl0ZShgeyJrZXkiOiJ2YWx1ZSJ9YCksCgkJCXdhbnRFcnI6IHRydWUsCgkJfSwKCQl7CgkJCW5hbWU6ICAgICJlbXB0eSIsCgkJCXNvdXJjZTogIFtdYnl0ZXt9LAoJCQl3YW50RXJyOiB0cnVlLAoJCX0sCgl9Cglmb3IgXywgdHQgOj0gcmFuZ2UgdGVzdHMgewoJCXQuUnVuKHR0Lm5hbWUsIGZ1bmModCAqdGVzdGluZy5UKSB7CgkJCWlmIGVyciA6PSB0dC5uLlVubWFyc2hhbEpTT04odHQuc291cmNlKTsgKGVyciAhPSBuaWwpICE9IHR0LndhbnRFcnIgewoJCQkJdC5FcnJvcmYoIk51bGxCb29sLlVubWFyc2hhbEpTT04oKSBlcnJvciA9ICV2LCB3YW50RXJyICV2IiwgZXJyLCB0dC53YW50RXJyKQoJCQl9CgkJfSkKCX0KfQoKZnVuYyBUZXN0TnVsbFRpbWVfVmFsdWUodCAqdGVzdGluZy5UKSB7Cgl0aW0gOj0gdGltZS5Ob3coKQoJdGVzdHMgOj0gW11zdHJ1Y3QgewoJCW5hbWUgICAgc3RyaW5nCgkJbiAgICAgICBOdWxsVGltZQoJCXdhbnQgICAgZHJpdmVyLlZhbHVlCgkJd2FudEVyciBib29sCgl9ewoJCXsKCQkJbmFtZTogInZhbGlkIiwKCQkJbjogTnVsbFRpbWV7CgkJCQlWYWxpZDogdHJ1ZSwKCQkJCVRpbWU6ICB0aW0sCgkJCX0sCgkJCXdhbnQ6ICAgIGRyaXZlci5WYWx1ZSh0aW0pLAoJCQl3YW50RXJyOiBmYWxzZSwKCQl9LAoJCXsKCQkJbmFtZTogImludmFsaWQiLAoJCQluOiBOdWxsVGltZXsKCQkJCVZhbGlkOiBmYWxzZSwKCQkJfSwKCQkJd2FudDogICAgbmlsLAoJCQl3YW50RXJyOiBmYWxzZSwKCQl9LAoJfQoJZm9yIF8sIHR0IDo9IHJhbmdlIHRlc3RzIHsKCQl0LlJ1bih0dC5uYW1lLCBmdW5jKHQgKnRlc3RpbmcuVCkgewoJCQlnb3QsIGVyciA6PSB0dC5uLlZhbHVlKCkKCQkJaWYgKGVyciAhPSBuaWwpICE9IHR0LndhbnRFcnIgewoJCQkJdC5FcnJvcmYoIk51bGxUaW1lLlZhbHVlKCkgZXJyb3IgPSAldiwgd2FudEVyciAldiIsIGVyciwgdHQud2FudEVycikKCQkJCXJldHVybgoJCQl9CgkJCWlmICFyZWZsZWN0LkRlZXBFcXVhbChnb3QsIHR0LndhbnQpIHsKCQkJCXQuRXJyb3JmKCJOdWxsVGltZS5WYWx1ZSgpID0gJXYsIHdhbnQgJXYiLCBnb3QsIHR0LndhbnQpCgkJCX0KCQl9KQoJfQp9CgpmdW5jIFRlc3ROdWxsVGltZV9TY2FuKHQgKnRlc3RpbmcuVCkgewoJdGltIDo9IHRpbWUuTm93KCkKCXRlc3RzIDo9IFtdc3RydWN0IHsKCQluYW1lICAgIHN0cmluZwoJCW4gICAgICAgKk51bGxUaW1lCgkJd2FudEVyciBib29sCgkJc3JjICAgICBpbnRlcmZhY2V7fQoJfXsKCQl7CgkJCW5hbWU6ICJ2YWxpZCIsCgkJCW46ICZOdWxsVGltZXsKCQkJCVRpbWU6ICB0aW0sCgkJCQlWYWxpZDogdHJ1ZSwKCQkJfSwKCQkJc3JjOiAgICAgdGltLAoJCQl3YW50RXJyOiBmYWxzZSwKCQl9LAoJCXsKCQkJbmFtZTogIm5pbCB2YWx1ZSIsCgkJCW46ICZOdWxsVGltZXsKCQkJCVRpbWU6ICB0aW0sCgkJCQlWYWxpZDogZmFsc2UsCgkJCX0sCgkJCXNyYzogICAgIHRpbWUuTm93KCksCgkJCXdhbnRFcnI6IGZhbHNlLAoJCX0sCgl9Cglmb3IgXywgdHQgOj0gcmFuZ2UgdGVzdHMgewoJCXQuUnVuKHR0Lm5hbWUsIGZ1bmModCAqdGVzdGluZy5UKSB7CgkJCWlmIGVyciA6PSB0dC5uLlNjYW4odHQuc3JjKTsgKGVyciAhPSBuaWwpICE9IHR0LndhbnRFcnIgewoJCQkJdC5FcnJvcmYoIk51bGxUaW1lLlNjYW4oKSBlcnJvciA9ICV2LCB3YW50RXJyICV2IiwgZXJyLCB0dC53YW50RXJyKQoJCQl9CgkJCWlmIHR0Lm4uVmFsaWQgPT0gZmFsc2UgJiYgdHQuc3JjICE9IG5pbCB7CgkJCQl0LkVycm9yZigic2hvdWxkIHJldHVybiBudWxsIikKCQkJfQoJCQlpZiB0dC5uLlZhbGlkICYmIHR0LnNyYyAhPSB0dC5uLlRpbWUgewoJCQkJdC5FcnJvcmYoImludmFsaWQgdmFsdWUiKQoJCQl9CgkJfSkKCX0KfQoKZnVuYyBUZXN0TnVsbFRpbWVfTWFyc2hhbEpTT04odCAqdGVzdGluZy5UKSB7Cgl0ZXN0cyA6PSBbXXN0cnVjdCB7CgkJbmFtZSAgICBzdHJpbmcKCQluICAgICAgICpOdWxsVGltZQoJCXdhbnQgICAgW11ieXRlCgkJd2FudEVyciBib29sCgl9ewoJCXsKCQkJbmFtZTogInZhbGlkIiwKCQkJbjogJk51bGxUaW1lewoJCQkJVGltZTogIHRpbWUuRGF0ZSgyMDE3LCAxMSwgMjQsIDAsIDAsIDAsIDAsIHRpbWUuVVRDKSwKCQkJCVZhbGlkOiB0cnVlLAoJCQl9LAoJCQl3YW50OiAgICBbXWJ5dGUoYCIyMDE3LTExLTI0VDAwOjAwOjAwWiJgKSwKCQkJd2FudEVycjogZmFsc2UsCgkJfSwKCQl7CgkJCW5hbWU6ICJ2YWxpZCBudWxsIiwKCQkJbjogJk51bGxUaW1lewoJCQkJVmFsaWQ6IGZhbHNlLAoJCQl9LAoJCQl3YW50OiAgICBbXWJ5dGUoYG51bGxgKSwKCQkJd2FudEVycjogZmFsc2UsCgkJfSwKCQl7CgkJCW5hbWU6ICJpbnZhbGlkIiwKCQkJbjogJk51bGxUaW1lewoJCQkJVmFsaWQ6IHRydWUsCgkJCX0sCgkJCXdhbnQ6ICAgIFtdYnl0ZShgIjAwMDEtMDEtMDFUMDA6MDA6MDBaImApLAoJCQl3YW50RXJyOiBmYWxzZSwKCQl9LAoJfQoJZm9yIF8sIHR0IDo9IHJhbmdlIHRlc3RzIHsKCQl0LlJ1bih0dC5uYW1lLCBmdW5jKHQgKnRlc3RpbmcuVCkgewoJCQlnb3QsIGVyciA6PSB0dC5uLk1hcnNoYWxKU09OKCkKCQkJaWYgKGVyciAhPSBuaWwpICE9IHR0LndhbnRFcnIgewoJCQkJdC5FcnJvcmYoIk51bGxUaW1lLk1hcnNoYWxKU09OKCkgZXJyb3IgPSAldiwgd2FudEVyciAldiIsIGVyciwgdHQud2FudEVycikKCQkJCXJldHVybgoJCQl9CgkJCWlmICFyZWZsZWN0LkRlZXBFcXVhbChnb3QsIHR0LndhbnQpIHsKCQkJCXQuRXJyb3JmKCJOdWxsVGltZS5NYXJzaGFsSlNPTigpID0gJXYsIHdhbnQgJXYiLCBnb3QsIHR0LndhbnQpCgkJCX0KCQl9KQoJfQp9CgpmdW5jIFRlc3ROdWxsSW50NjRfVW5tYXJzaGFsSlNPTih0ICp0ZXN0aW5nLlQpIHsKCXRlc3RzIDo9IFtdc3RydWN0IHsKCQluYW1lICAgIHN0cmluZwoJCW4gICAgICAgTnVsbEludDY0CgkJc291cmNlICBbXWJ5dGUKCQl3YW50RXJyIGJvb2wKCX17CgkJewoJCQluYW1lOiAgICAidmFsaWQiLAoJCQlzb3VyY2U6ICBbXWJ5dGUoYDEyM2ApLAoJCQl3YW50RXJyOiBmYWxzZSwKCQl9LAoJCXsKCQkJbmFtZTogICAgImludmFsaWQiLAoJCQlzb3VyY2U6ICBbXWJ5dGUoYHsia2V5IjoidmFsdWUifWApLAoJCQl3YW50RXJyOiB0cnVlLAoJCX0sCgkJewoJCQluYW1lOiAgICAiZW1wdHkiLAoJCQlzb3VyY2U6ICBbXWJ5dGV7fSwKCQkJd2FudEVycjogdHJ1ZSwKCQl9LAoJfQoJZm9yIF8sIHR0IDo9IHJhbmdlIHRlc3RzIHsKCQl0LlJ1bih0dC5uYW1lLCBmdW5jKHQgKnRlc3RpbmcuVCkgewoJCQlpZiBlcnIgOj0gdHQubi5Vbm1hcnNoYWxKU09OKHR0LnNvdXJjZSk7IChlcnIgIT0gbmlsKSAhPSB0dC53YW50RXJyIHsKCQkJCXQuRXJyb3JmKCJOdWxsSW50NjQuVW5tYXJzaGFsSlNPTigpIGVycm9yID0gJXYsIHdhbnRFcnIgJXYiLCBlcnIsIHR0LndhbnRFcnIpCgkJCX0KCQl9KQoJfQp9CgpmdW5jIFRlc3ROdWxsSW50NjRfVmFsdWUodCAqdGVzdGluZy5UKSB7Cgl0ZXN0cyA6PSBbXXN0cnVjdCB7CgkJbmFtZSAgICBzdHJpbmcKCQluICAgICAgIE51bGxJbnQ2NAoJCXdhbnQgICAgZHJpdmVyLlZhbHVlCgkJd2FudEVyciBib29sCgl9ewoJCXsKCQkJbmFtZTogInZhbGlkIiwKCQkJbjogTnVsbEludDY0ewoJCQkJVmFsaWQ6IHRydWUsCgkJCQlJbnQ2NDogMTIzLAoJCQl9LAoJCQl3YW50OiAgICBkcml2ZXIuVmFsdWUoaW50NjQoMTIzKSksCgkJCXdhbnRFcnI6IGZhbHNlLAoJCX0sCgkJewoJCQluYW1lOiAiaW52YWxpZCIsCgkJCW46IE51bGxJbnQ2NHsKCQkJCVZhbGlkOiBmYWxzZSwKCQkJfSwKCQkJd2FudDogICAgbmlsLAoJCQl3YW50RXJyOiBmYWxzZSwKCQl9LAoJfQoJZm9yIF8sIHR0IDo9IHJhbmdlIHRlc3RzIHsKCQl0LlJ1bih0dC5uYW1lLCBmdW5jKHQgKnRlc3RpbmcuVCkgewoJCQlnb3QsIGVyciA6PSB0dC5uLlZhbHVlKCkKCQkJaWYgKGVyciAhPSBuaWwpICE9IHR0LndhbnRFcnIgewoJCQkJdC5FcnJvcmYoIk51bGxJbnQ2NC5WYWx1ZSgpIGVycm9yID0gJXYsIHdhbnRFcnIgJXYiLCBlcnIsIHR0LndhbnRFcnIpCgkJCQlyZXR1cm4KCQkJfQoJCQlpZiAhcmVmbGVjdC5EZWVwRXF1YWwoZ290LCB0dC53YW50KSB7CgkJCQl0LkVycm9yZigiTnVsbEludDY0LlZhbHVlKCkgPSAldiwgd2FudCAldiIsIGdvdCwgdHQud2FudCkKCQkJfQoJCX0pCgl9Cn0KCmZ1bmMgVGVzdE51bGxJbnQ2NF9TY2FuKHQgKnRlc3RpbmcuVCkgewoJdGVzdHMgOj0gW11zdHJ1Y3QgewoJCW5hbWUgICAgc3RyaW5nCgkJbiAgICAgICAqTnVsbEludDY0CgkJd2FudEVyciBib29sCgkJc3JjICAgICBpbnRlcmZhY2V7fQoJfXsKCQl7CgkJCW5hbWU6ICJ2YWxpZCIsCgkJCW46ICZOdWxsSW50NjR7CgkJCQlJbnQ2NDogMTIzLAoJCQkJVmFsaWQ6IHRydWUsCgkJCX0sCgkJCXNyYzogICAgIGludDY0KDEyMyksCgkJCXdhbnRFcnI6IGZhbHNlLAoJCX0sCgkJewoJCQluYW1lOiAibmlsIHZhbHVlIiwKCQkJbjogJk51bGxJbnQ2NHsKCQkJCVZhbGlkOiBmYWxzZSwKCQkJfSwKCQkJc3JjOiAgICAgaW50NjQoMTIzKSwKCQkJd2FudEVycjogZmFsc2UsCgkJfSwKCX0KCWZvciBfLCB0dCA6PSByYW5nZSB0ZXN0cyB7CgkJdC5SdW4odHQubmFtZSwgZnVuYyh0ICp0ZXN0aW5nLlQpIHsKCQkJaWYgZXJyIDo9IHR0Lm4uU2Nhbih0dC5zcmMpOyAoZXJyICE9IG5pbCkgIT0gdHQud2FudEVyciB7CgkJCQl0LkVycm9yZigiTnVsbEludDY0LlNjYW4oKSBlcnJvciA9ICV2LCB3YW50RXJyICV2IiwgZXJyLCB0dC53YW50RXJyKQoJCQl9CgkJCWlmIHR0Lm4uVmFsaWQgPT0gZmFsc2UgJiYgdHQuc3JjICE9IG5pbCB7CgkJCQl0LkVycm9yZigic2hvdWxkIHJldHVybiBudWxsIikKCQkJfQoJCQlpZiB0dC5uLlZhbGlkICYmIHR0LnNyYyAhPSB0dC5uLkludDY0IHsKCQkJCXQuRXJyb3JmKCJpbnZhbGlkIHZhbHVlIikKCQkJfQoJCX0pCgl9Cn0KCmZ1bmMgVGVzdE51bGxJbnQ2NF9NYXJzaGFsSlNPTih0ICp0ZXN0aW5nLlQpIHsKCXRlc3RzIDo9IFtdc3RydWN0IHsKCQluYW1lICAgIHN0cmluZwoJCW4gICAgICAgKk51bGxJbnQ2NAoJCXdhbnQgICAgW11ieXRlCgkJd2FudEVyciBib29sCgl9ewoJCXsKCQkJbmFtZTogInZhbGlkIiwKCQkJbjogJk51bGxJbnQ2NHsKCQkJCUludDY0OiAxMjMsCgkJCQlWYWxpZDogdHJ1ZSwKCQkJfSwKCQkJd2FudDogICAgW11ieXRlKGAxMjNgKSwKCQkJd2FudEVycjogZmFsc2UsCgkJfSwKCQl7CgkJCW5hbWU6ICJ2YWxpZCBudWxsIiwKCQkJbjogJk51bGxJbnQ2NHsKCQkJCVZhbGlkOiBmYWxzZSwKCQkJfSwKCQkJd2FudDogICAgW11ieXRlKGBudWxsYCksCgkJCXdhbnRFcnI6IGZhbHNlLAoJCX0sCgkJewoJCQluYW1lOiAiaW52YWxpZCIsCgkJCW46ICZOdWxsSW50NjR7CgkJCQlWYWxpZDogdHJ1ZSwKCQkJfSwKCQkJd2FudDogICAgW11ieXRlKGAwYCksCgkJCXdhbnRFcnI6IGZhbHNlLAoJCX0sCgl9Cglmb3IgXywgdHQgOj0gcmFuZ2UgdGVzdHMgewoJCXQuUnVuKHR0Lm5hbWUsIGZ1bmModCAqdGVzdGluZy5UKSB7CgkJCWdvdCwgZXJyIDo9IHR0Lm4uTWFyc2hhbEpTT04oKQoJCQlpZiAoZXJyICE9IG5pbCkgIT0gdHQud2FudEVyciB7CgkJCQl0LkVycm9yZigiTnVsbEludDY0Lk1hcnNoYWxKU09OKCkgZXJyb3IgPSAldiwgd2FudEVyciAldiIsIGVyciwgdHQud2FudEVycikKCQkJCXJldHVybgoJCQl9CgkJCWlmICFyZWZsZWN0LkRlZXBFcXVhbChnb3QsIHR0LndhbnQpIHsKCQkJCXQuRXJyb3JmKCJOdWxsSW50NjQuTWFyc2hhbEpTT04oKSA9ICV2LCB3YW50ICV2IiwgZ290LCB0dC53YW50KQoJCQl9CgkJfSkKCX0KfQpmdW5jIFRlc3ROdWxsRmxvYXQ2NF9Vbm1hcnNoYWxKU09OKHQgKnRlc3RpbmcuVCkgewoJdGVzdHMgOj0gW11zdHJ1Y3QgewoJCW5hbWUgICAgc3RyaW5nCgkJbiAgICAgICBOdWxsRmxvYXQ2NAoJCXNvdXJjZSAgW11ieXRlCgkJd2FudEVyciBib29sCgl9ewoJCXsKCQkJbmFtZTogICAgInZhbGlkIiwKCQkJc291cmNlOiAgW11ieXRlKGAxMjMuMTIzYCksCgkJCXdhbnRFcnI6IGZhbHNlLAoJCX0sCgkJewoJCQluYW1lOiAgICAiaW52YWxpZCIsCgkJCXNvdXJjZTogIFtdYnl0ZShgeyJrZXkiOiJ2YWx1ZSJ9YCksCgkJCXdhbnRFcnI6IHRydWUsCgkJfSwKCQl7CgkJCW5hbWU6ICAgICJlbXB0eSIsCgkJCXNvdXJjZTogIFtdYnl0ZXt9LAoJCQl3YW50RXJyOiB0cnVlLAoJCX0sCgl9Cglmb3IgXywgdHQgOj0gcmFuZ2UgdGVzdHMgewoJCXQuUnVuKHR0Lm5hbWUsIGZ1bmModCAqdGVzdGluZy5UKSB7CgkJCWlmIGVyciA6PSB0dC5uLlVubWFyc2hhbEpTT04odHQuc291cmNlKTsgKGVyciAhPSBuaWwpICE9IHR0LndhbnRFcnIgewoJCQkJdC5FcnJvcmYoIk51bGxGbG9hdDY0LlVubWFyc2hhbEpTT04oKSBlcnJvciA9ICV2LCB3YW50RXJyICV2IiwgZXJyLCB0dC53YW50RXJyKQoJCQl9CgkJfSkKCX0KfQoKZnVuYyBUZXN0TnVsbEZsb2F0NjRfVmFsdWUodCAqdGVzdGluZy5UKSB7Cgl0ZXN0cyA6PSBbXXN0cnVjdCB7CgkJbmFtZSAgICBzdHJpbmcKCQluICAgICAgIE51bGxGbG9hdDY0CgkJd2FudCAgICBkcml2ZXIuVmFsdWUKCQl3YW50RXJyIGJvb2wKCX17CgkJewoJCQluYW1lOiAidmFsaWQiLAoJCQluOiBOdWxsRmxvYXQ2NHsKCQkJCVZhbGlkOiAgIHRydWUsCgkJCQlGbG9hdDY0OiAxMjMuMTIzLAoJCQl9LAoJCQl3YW50OiAgICBkcml2ZXIuVmFsdWUoZmxvYXQ2NCgxMjMuMTIzKSksCgkJCXdhbnRFcnI6IGZhbHNlLAoJCX0sCgkJewoJCQluYW1lOiAiaW52YWxpZCIsCgkJCW46IE51bGxGbG9hdDY0ewoJCQkJVmFsaWQ6IGZhbHNlLAoJCQl9LAoJCQl3YW50OiAgICBuaWwsCgkJCXdhbnRFcnI6IGZhbHNlLAoJCX0sCgl9Cglmb3IgXywgdHQgOj0gcmFuZ2UgdGVzdHMgewoJCXQuUnVuKHR0Lm5hbWUsIGZ1bmModCAqdGVzdGluZy5UKSB7CgkJCWdvdCwgZXJyIDo9IHR0Lm4uVmFsdWUoKQoJCQlpZiAoZXJyICE9IG5pbCkgIT0gdHQud2FudEVyciB7CgkJCQl0LkVycm9yZigiTnVsbEZsb2F0NjQuVmFsdWUoKSBlcnJvciA9ICV2LCB3YW50RXJyICV2IiwgZXJyLCB0dC53YW50RXJyKQoJCQkJcmV0dXJuCgkJCX0KCQkJaWYgIXJlZmxlY3QuRGVlcEVxdWFsKGdvdCwgdHQud2FudCkgewoJCQkJdC5FcnJvcmYoIk51bGxGbG9hdDY0LlZhbHVlKCkgPSAldiwgd2FudCAldiIsIGdvdCwgdHQud2FudCkKCQkJfQoJCX0pCgl9Cn0KCmZ1bmMgVGVzdE51bGxGbG9hdDY0X1NjYW4odCAqdGVzdGluZy5UKSB7Cgl0ZXN0cyA6PSBbXXN0cnVjdCB7CgkJbmFtZSAgICBzdHJpbmcKCQluICAgICAgICpOdWxsRmxvYXQ2NAoJCXdhbnRFcnIgYm9vbAoJCXNyYyAgICAgaW50ZXJmYWNle30KCX17CgkJewoJCQluYW1lOiAidmFsaWQiLAoJCQluOiAmTnVsbEZsb2F0NjR7CgkJCQlGbG9hdDY0OiAxMjMuMTIzLAoJCQkJVmFsaWQ6ICAgdHJ1ZSwKCQkJfSwKCQkJc3JjOiAgICAgZmxvYXQ2NCgxMjMpLAoJCQl3YW50RXJyOiBmYWxzZSwKCQl9LAoJCXsKCQkJbmFtZTogIm5pbCB2YWx1ZSIsCgkJCW46ICZOdWxsRmxvYXQ2NHsKCQkJCVZhbGlkOiBmYWxzZSwKCQkJfSwKCQkJc3JjOiAgICAgZmxvYXQ2NCgxMjMuMTIzKSwKCQkJd2FudEVycjogZmFsc2UsCgkJfSwKCX0KCWZvciBfLCB0dCA6PSByYW5nZSB0ZXN0cyB7CgkJdC5SdW4odHQubmFtZSwgZnVuYyh0ICp0ZXN0aW5nLlQpIHsKCQkJaWYgZXJyIDo9IHR0Lm4uU2Nhbih0dC5zcmMpOyAoZXJyICE9IG5pbCkgIT0gdHQud2FudEVyciB7CgkJCQl0LkVycm9yZigiTnVsbEZsb2F0NjQuU2NhbigpIGVycm9yID0gJXYsIHdhbnRFcnIgJXYiLCBlcnIsIHR0LndhbnRFcnIpCgkJCX0KCQkJaWYgdHQubi5WYWxpZCA9PSBmYWxzZSAmJiB0dC5zcmMgIT0gbmlsIHsKCQkJCXQuRXJyb3JmKCJzaG91bGQgcmV0dXJuIG51bGwiKQoJCQl9CgkJCWlmIHR0Lm4uVmFsaWQgJiYgdHQuc3JjICE9IHR0Lm4uRmxvYXQ2NCB7CgkJCQl0LkVycm9yZigiaW52YWxpZCB2YWx1ZSIpCgkJCX0KCQl9KQoJfQp9CgpmdW5jIFRlc3ROdWxsRmxvYXQ2NF9NYXJzaGFsSlNPTih0ICp0ZXN0aW5nLlQpIHsKCXRlc3RzIDo9IFtdc3RydWN0IHsKCQluYW1lICAgIHN0cmluZwoJCW4gICAgICAgKk51bGxGbG9hdDY0CgkJd2FudCAgICBbXWJ5dGUKCQl3YW50RXJyIGJvb2wKCX17CgkJewoJCQluYW1lOiAidmFsaWQiLAoJCQluOiAmTnVsbEZsb2F0NjR7CgkJCQlGbG9hdDY0OiAxMjMuMTIzLAoJCQkJVmFsaWQ6ICAgdHJ1ZSwKCQkJfSwKCQkJd2FudDogICAgW11ieXRlKGAxMjMuMTIzYCksCgkJCXdhbnRFcnI6IGZhbHNlLAoJCX0sCgkJewoJCQluYW1lOiAidmFsaWQgbnVsbCIsCgkJCW46ICZOdWxsRmxvYXQ2NHsKCQkJCVZhbGlkOiBmYWxzZSwKCQkJfSwKCQkJd2FudDogICAgW11ieXRlKGBudWxsYCksCgkJCXdhbnRFcnI6IGZhbHNlLAoJCX0sCgkJewoJCQluYW1lOiAiaW52YWxpZCIsCgkJCW46ICZOdWxsRmxvYXQ2NHsKCQkJCVZhbGlkOiB0cnVlLAoJCQl9LAoJCQl3YW50OiAgICBbXWJ5dGUoYDBgKSwKCQkJd2FudEVycjogZmFsc2UsCgkJfSwKCX0KCWZvciBfLCB0dCA6PSByYW5nZSB0ZXN0cyB7CgkJdC5SdW4odHQubmFtZSwgZnVuYyh0ICp0ZXN0aW5nLlQpIHsKCQkJZ290LCBlcnIgOj0gdHQubi5NYXJzaGFsSlNPTigpCgkJCWlmIChlcnIgIT0gbmlsKSAhPSB0dC53YW50RXJyIHsKCQkJCXQuRXJyb3JmKCJOdWxsRmxvYXQ2NC5NYXJzaGFsSlNPTigpIGVycm9yID0gJXYsIHdhbnRFcnIgJXYiLCBlcnIsIHR0LndhbnRFcnIpCgkJCQlyZXR1cm4KCQkJfQoJCQlpZiAhcmVmbGVjdC5EZWVwRXF1YWwoZ290LCB0dC53YW50KSB7CgkJCQl0LkVycm9yZigiTnVsbEZsb2F0NjQuTWFyc2hhbEpTT04oKSA9ICV2LCB3YW50ICV2IiwgZ290LCB0dC53YW50KQoJCQl9CgkJfSkKCX0KfQoKZnVuYyBUZXN0U3RyaW5nQXJyYXlfVW5tYXJzaGFsSlNPTih0ICp0ZXN0aW5nLlQpIHsKCXRlc3RzIDo9IFtdc3RydWN0IHsKCQluYW1lICAgIHN0cmluZwoJCW4gICAgICAgU3RyaW5nQXJyYXkKCQlleHAgICAgIFN0cmluZ0FycmF5CgkJc291cmNlICBbXWJ5dGUKCQl3YW50RXJyIGJvb2wKCX17CgkJewoJCQluYW1lOiAgICAidmFsaWQiLAoJCQlzb3VyY2U6ICBbXWJ5dGUoYFsiYSIsImIiLCJjIl1gKSwKCQkJZXhwOiAgICAgU3RyaW5nQXJyYXl7ImEiLCAiYiIsICJjIn0sCgkJCXdhbnRFcnI6IGZhbHNlLAoJCX0sCgkJewoJCQluYW1lOiAgICAiaW52YWxpZCAxIiwKCQkJc291cmNlOiAgW11ieXRlKGB7ImEiLCJiIiwiYyJ9YCksCgkJCXdhbnRFcnI6IHRydWUsCgkJfSwKCQl7CgkJCW5hbWU6ICAgICJpbnZhbGlkIDIiLAoJCQlzb3VyY2U6ICBbXWJ5dGUoYFthLCBiLCBjXWApLAoJCQl3YW50RXJyOiB0cnVlLAoJCX0sCgkJewoJCQluYW1lOiAgICAiZW1wdHkiLAoJCQlzb3VyY2U6ICBbXWJ5dGV7fSwKCQkJd2FudEVycjogdHJ1ZSwKCQl9LAoJfQoJZm9yIF8sIHR0IDo9IHJhbmdlIHRlc3RzIHsKCQl0LlJ1bih0dC5uYW1lLCBmdW5jKHQgKnRlc3RpbmcuVCkgewoJCQlpZiBlcnIgOj0gdHQubi5Vbm1hcnNoYWxKU09OKHR0LnNvdXJjZSk7IChlcnIgIT0gbmlsKSAhPSB0dC53YW50RXJyIHsKCQkJCXQuRXJyb3JmKCJTdHJpbmdBcnJheS5Vbm1hcnNoYWxKU09OKCkgZXJyb3IgPSAldiwgd2FudEVyciAldiIsIGVyciwgdHQud2FudEVycikKCQkJfQoJCQlpZiAhdHQud2FudEVyciAmJiAhcmVmbGVjdC5EZWVwRXF1YWwodHQuZXhwLCB0dC5uKSB7CgkJCQl0LkVycm9yZigiU3RyaW5nQXJyYXkuVW5tYXJzaGFsSlNPTigpIGV4cDogJXYgZ290ICV2IiwgdHQuZXhwLCB0dC5uKQoJCQl9CgkJfSkKCX0KfQoKZnVuYyBUZXN0U3RyaW5nQXJyYXlfVmFsdWUodCAqdGVzdGluZy5UKSB7Cgl0ZXN0cyA6PSBbXXN0cnVjdCB7CgkJbmFtZSAgICBzdHJpbmcKCQluICAgICAgIFN0cmluZ0FycmF5CgkJd2FudCAgICBkcml2ZXIuVmFsdWUKCQl3YW50RXJyIGJvb2wKCX17CgkJewoJCQluYW1lOiAgICAidmFsaWQiLAoJCQluOiAgICAgICBTdHJpbmdBcnJheXsiYSIsICJiIiwgImMifSwKCQkJd2FudDogICAgZHJpdmVyLlZhbHVlKCJ7YSxiLGN9IiksCgkJCXdhbnRFcnI6IGZhbHNlLAoJCX0sCgl9Cglmb3IgXywgdHQgOj0gcmFuZ2UgdGVzdHMgewoJCXQuUnVuKHR0Lm5hbWUsIGZ1bmModCAqdGVzdGluZy5UKSB7CgkJCWdvdCwgZXJyIDo9IHR0Lm4uVmFsdWUoKQoJCQlpZiAoZXJyICE9IG5pbCkgIT0gdHQud2FudEVyciB7CgkJCQl0LkVycm9yZigiU3RyaW5nQXJyYXkuVmFsdWUoKSBlcnJvciA9ICV2LCB3YW50RXJyICV2IiwgZXJyLCB0dC53YW50RXJyKQoJCQkJcmV0dXJuCgkJCX0KCQkJaWYgIXJlZmxlY3QuRGVlcEVxdWFsKGdvdCwgdHQud2FudCkgewoJCQkJdC5FcnJvcmYoIlN0cmluZ0FycmF5LlZhbHVlKCkgPSAldiwgd2FudCAldiIsIGdvdCwgdHQud2FudCkKCQkJfQoJCX0pCgl9Cn0KCmZ1bmMgVGVzdFN0cmluZ0FycmF5X1NjYW4odCAqdGVzdGluZy5UKSB7Cgl0ZXN0cyA6PSBbXXN0cnVjdCB7CgkJbmFtZSAgICBzdHJpbmcKCQl3YW50RXJyIGJvb2wKCQlzcmMgICAgIGludGVyZmFjZXt9CgkJZXhwICAgICBTdHJpbmdBcnJheQoJfXsKCQl7CgkJCW5hbWU6ICAgICJ2YWxpZCIsCgkJCXNyYzogICAgIFtdYnl0ZShgeyJhIiwgImIiLCAiYyJ9YCksCgkJCWV4cDogICAgIFN0cmluZ0FycmF5eyJhIiwgImIiLCAiYyJ9LAoJCQl3YW50RXJyOiBmYWxzZSwKCQl9LAoJCXsKCQkJbmFtZTogICAgIm5pbCB2YWx1ZSIsCgkJCXNyYzogICAgIG5pbCwKCQkJZXhwOiAgICAgU3RyaW5nQXJyYXl7fSwKCQkJd2FudEVycjogZmFsc2UsCgkJfSwKCX0KCWZvciBfLCB0dCA6PSByYW5nZSB0ZXN0cyB7CgkJdC5SdW4odHQubmFtZSwgZnVuYyh0ICp0ZXN0aW5nLlQpIHsKCQkJc2EgOj0gJlN0cmluZ0FycmF5e30KCQkJaWYgZXJyIDo9IHNhLlNjYW4odHQuc3JjKTsgKGVyciAhPSBuaWwpICE9IHR0LndhbnRFcnIgewoJCQkJdC5FcnJvcmYoIlN0cmluZ0FycmF5LlNjYW4oKSBlcnJvciA9ICV2LCB3YW50RXJyICV2IiwgZXJyLCB0dC53YW50RXJyKQoJCQl9CgkJCWlmIHR0LnNyYyA9PSBuaWwgJiYgbGVuKCpzYSkgPiAwIHsKCQkJCXQuRXJyb3JmKCJzaG91bGQgYnkgZW1wdHkiKQoJCQl9CgkJCWlmIHNhID09IG5pbCAmJiB0dC5zcmMgIT0gbmlsIHsKCQkJCXQuRXJyb3JmKCJyZWNlaXZlZCBudWxsIikKCQkJfQoJCQlpZiAhcmVmbGVjdC5EZWVwRXF1YWwodHQuZXhwLCAqc2EpIHsKCQkJCXQuRXJyb3JmKCJTdHJpbmdBcnJheS5TY2FuKCkgZXhwOiAlWzFddiAoJVsxXVQpIGdvdDogJVsyXXYgKCVbMl1UKSIsIHR0LmV4cCwgKnNhKQoJCQl9CgkJfSkKCX0KfQoKZnVuYyBUZXN0U3RyaW5nQXJyYXlfTWFyc2hhbEpTT04odCAqdGVzdGluZy5UKSB7Cgl0ZXN0cyA6PSBbXXN0cnVjdCB7CgkJbmFtZSAgICBzdHJpbmcKCQluICAgICAgIFN0cmluZ0FycmF5CgkJd2FudCAgICBbXWJ5dGUKCQl3YW50RXJyIGJvb2wKCX17CgkJewoJCQluYW1lOiAgICAidmFsaWQiLAoJCQluOiAgICAgICBTdHJpbmdBcnJheXsiYSIsICJiIiwgImMifSwKCQkJd2FudDogICAgW11ieXRlKGBbImEiLCJiIiwiYyJdYCksCgkJCXdhbnRFcnI6IGZhbHNlLAoJCX0sCgkJewoJCQluYW1lOiAgICAidmFsaWQgbnVsbCIsCgkJCW46ICAgICAgIG5pbCwKCQkJd2FudDogICAgW11ieXRlKGBudWxsYCksCgkJCXdhbnRFcnI6IGZhbHNlLAoJCX0sCgl9Cglmb3IgXywgdHQgOj0gcmFuZ2UgdGVzdHMgewoJCXQuUnVuKHR0Lm5hbWUsIGZ1bmModCAqdGVzdGluZy5UKSB7CgkJCWdvdCwgZXJyIDo9IHR0Lm4uTWFyc2hhbEpTT04oKQoJCQlpZiAoZXJyICE9IG5pbCkgIT0gdHQud2FudEVyciB7CgkJCQl0LkVycm9yZigiU3RyaW5nQXJyYXkuTWFyc2hhbEpTT04oKSBlcnJvciA9ICV2LCB3YW50RXJyICV2IiwgZXJyLCB0dC53YW50RXJyKQoJCQkJcmV0dXJuCgkJCX0KCQkJaWYgIXJlZmxlY3QuRGVlcEVxdWFsKGdvdCwgdHQud2FudCkgewoJCQkJdC5FcnJvcmYoIlN0cmluZ0FycmF5Lk1hcnNoYWxKU09OKCkgPSAldiwgd2FudCAldiIsIGdvdCwgdHQud2FudCkKCQkJfQoJCX0pCgl9Cn0KCmZ1bmMgVGVzdEludEFycmF5X1VubWFyc2hhbEpTT04odCAqdGVzdGluZy5UKSB7Cgl0ZXN0cyA6PSBbXXN0cnVjdCB7CgkJbmFtZSAgICBzdHJpbmcKCQluICAgICAgIEludEFycmF5CgkJZXhwICAgICBJbnRBcnJheQoJCXNvdXJjZSAgW11ieXRlCgkJd2FudEVyciBib29sCgl9ewoJCXsKCQkJbmFtZTogICAgInZhbGlkIiwKCQkJc291cmNlOiAgW11ieXRlKGBbMSwgMiwgM11gKSwKCQkJZXhwOiAgICAgSW50QXJyYXl7MSwgMiwgM30sCgkJCXdhbnRFcnI6IGZhbHNlLAoJCX0sCgkJewoJCQluYW1lOiAgICAiaW52YWxpZCAxIiwKCQkJc291cmNlOiAgW11ieXRlKGB7MSwgMiwgM31gKSwKCQkJd2FudEVycjogdHJ1ZSwKCQl9LAoJCXsKCQkJbmFtZTogICAgImludmFsaWQgMiIsCgkJCXNvdXJjZTogIFtdYnl0ZShgWzEsIDIsICJjIl1gKSwKCQkJd2FudEVycjogdHJ1ZSwKCQl9LAoJCXsKCQkJbmFtZTogICAgImVtcHR5IiwKCQkJc291cmNlOiAgW11ieXRle30sCgkJCXdhbnRFcnI6IHRydWUsCgkJfSwKCX0KCWZvciBfLCB0dCA6PSByYW5nZSB0ZXN0cyB7CgkJdC5SdW4odHQubmFtZSwgZnVuYyh0ICp0ZXN0aW5nLlQpIHsKCQkJaWYgZXJyIDo9IHR0Lm4uVW5tYXJzaGFsSlNPTih0dC5zb3VyY2UpOyAoZXJyICE9IG5pbCkgIT0gdHQud2FudEVyciB7CgkJCQl0LkVycm9yZigiSW50QXJyYXkuVW5tYXJzaGFsSlNPTigpIGVycm9yID0gJXYsIHdhbnRFcnIgJXYiLCBlcnIsIHR0LndhbnRFcnIpCgkJCX0KCQkJaWYgIXR0LndhbnRFcnIgJiYgIXJlZmxlY3QuRGVlcEVxdWFsKHR0LmV4cCwgdHQubikgewoJCQkJdC5FcnJvcmYoIkludEFycmF5LlVubWFyc2hhbEpTT04oKSBleHA6ICV2IGdvdCAldiIsIHR0LmV4cCwgdHQubikKCQkJfQoJCX0pCgl9Cn0KCmZ1bmMgVGVzdEludEFycmF5X1ZhbHVlKHQgKnRlc3RpbmcuVCkgewoJdGVzdHMgOj0gW11zdHJ1Y3QgewoJCW5hbWUgICAgc3RyaW5nCgkJbiAgICAgICBJbnRBcnJheQoJCXdhbnQgICAgZHJpdmVyLlZhbHVlCgkJd2FudEVyciBib29sCgl9ewoJCXsKCQkJbmFtZTogICAgInZhbGlkIiwKCQkJbjogICAgICAgSW50QXJyYXl7MSwgMiwgM30sCgkJCXdhbnQ6ICAgIGRyaXZlci5WYWx1ZSgiezEsMiwzfSIpLAoJCQl3YW50RXJyOiBmYWxzZSwKCQl9LAoJfQoJZm9yIF8sIHR0IDo9IHJhbmdlIHRlc3RzIHsKCQl0LlJ1bih0dC5uYW1lLCBmdW5jKHQgKnRlc3RpbmcuVCkgewoJCQlnb3QsIGVyciA6PSB0dC5uLlZhbHVlKCkKCQkJaWYgKGVyciAhPSBuaWwpICE9IHR0LndhbnRFcnIgewoJCQkJdC5FcnJvcmYoIkludEFycmF5LlZhbHVlKCkgZXJyb3IgPSAldiwgd2FudEVyciAldiIsIGVyciwgdHQud2FudEVycikKCQkJCXJldHVybgoJCQl9CgkJCWlmICFyZWZsZWN0LkRlZXBFcXVhbChnb3QsIHR0LndhbnQpIHsKCQkJCXQuRXJyb3JmKCJJbnRBcnJheS5WYWx1ZSgpID0gJXYsIHdhbnQgJXYiLCBnb3QsIHR0LndhbnQpCgkJCX0KCQl9KQoJfQp9CgpmdW5jIFRlc3RJbnRBcnJheV9TY2FuKHQgKnRlc3RpbmcuVCkgewoJdGVzdHMgOj0gW11zdHJ1Y3QgewoJCW5hbWUgICAgc3RyaW5nCgkJd2FudEVyciBib29sCgkJc3JjICAgICBpbnRlcmZhY2V7fQoJCWV4cCAgICAgSW50QXJyYXkKCX17CgkJewoJCQluYW1lOiAgICAidmFsaWQiLAoJCQlzcmM6ICAgICBbXWJ5dGUoYHsxLCAyLCAzfWApLAoJCQlleHA6ICAgICBJbnRBcnJheXsxLCAyLCAzfSwKCQkJd2FudEVycjogZmFsc2UsCgkJfSwKCQl7CgkJCW5hbWU6ICAgICJuaWwgdmFsdWUiLAoJCQlzcmM6ICAgICBuaWwsCgkJCWV4cDogICAgIEludEFycmF5e30sCgkJCXdhbnRFcnI6IGZhbHNlLAoJCX0sCgl9Cglmb3IgXywgdHQgOj0gcmFuZ2UgdGVzdHMgewoJCXQuUnVuKHR0Lm5hbWUsIGZ1bmModCAqdGVzdGluZy5UKSB7CgkJCXNhIDo9ICZJbnRBcnJheXt9CgkJCWlmIGVyciA6PSBzYS5TY2FuKHR0LnNyYyk7IChlcnIgIT0gbmlsKSAhPSB0dC53YW50RXJyIHsKCQkJCXQuRXJyb3JmKCJJbnRBcnJheS5TY2FuKCkgZXJyb3IgPSAldiwgd2FudEVyciAldiIsIGVyciwgdHQud2FudEVycikKCQkJfQoJCQlpZiB0dC5zcmMgPT0gbmlsICYmIGxlbigqc2EpID4gMCB7CgkJCQl0LkVycm9yZigic2hvdWxkIGJ5IGVtcHR5IikKCQkJfQoJCQlpZiBzYSA9PSBuaWwgJiYgdHQuc3JjICE9IG5pbCB7CgkJCQl0LkVycm9yZigicmVjZWl2ZWQgbnVsbCIpCgkJCX0KCQkJaWYgIXJlZmxlY3QuRGVlcEVxdWFsKHR0LmV4cCwgKnNhKSB7CgkJCQl0LkVycm9yZigiSW50QXJyYXkuU2NhbigpIGV4cDogJVsxXXYgKCVbMV1UKSBnb3Q6ICVbMl12ICglWzJdVCkiLCB0dC5leHAsICpzYSkKCQkJfQoJCX0pCgl9Cn0KCmZ1bmMgVGVzdEludEFycmF5X01hcnNoYWxKU09OKHQgKnRlc3RpbmcuVCkgewoJdGVzdHMgOj0gW11zdHJ1Y3QgewoJCW5hbWUgICAgc3RyaW5nCgkJbiAgICAgICBJbnRBcnJheQoJCXdhbnQgICAgW11ieXRlCgkJd2FudEVyciBib29sCgl9ewoJCXsKCQkJbmFtZTogICAgInZhbGlkIiwKCQkJbjogICAgICAgSW50QXJyYXl7MSwgMiwgM30sCgkJCXdhbnQ6ICAgIFtdYnl0ZShgWzEsMiwzXWApLAoJCQl3YW50RXJyOiBmYWxzZSwKCQl9LAoJCXsKCQkJbmFtZTogICAgInZhbGlkIG51bGwiLAoJCQluOiAgICAgICBuaWwsCgkJCXdhbnQ6ICAgIFtdYnl0ZShgbnVsbGApLAoJCQl3YW50RXJyOiBmYWxzZSwKCQl9LAoJfQoJZm9yIF8sIHR0IDo9IHJhbmdlIHRlc3RzIHsKCQl0LlJ1bih0dC5uYW1lLCBmdW5jKHQgKnRlc3RpbmcuVCkgewoJCQlnb3QsIGVyciA6PSB0dC5uLk1hcnNoYWxKU09OKCkKCQkJaWYgKGVyciAhPSBuaWwpICE9IHR0LndhbnRFcnIgewoJCQkJdC5FcnJvcmYoIkludEFycmF5Lk1hcnNoYWxKU09OKCkgZXJyb3IgPSAldiwgd2FudEVyciAldiIsIGVyciwgdHQud2FudEVycikKCQkJCXJldHVybgoJCQl9CgkJCWlmICFyZWZsZWN0LkRlZXBFcXVhbChnb3QsIHR0LndhbnQpIHsKCQkJCXQuRXJyb3JmKCJJbnRBcnJheS5NYXJzaGFsSlNPTigpID0gJXYsIHdhbnQgJXYiLCBnb3QsIHR0LndhbnQpCgkJCX0KCQl9KQoJfQp9CgpmdW5jIFRlc3RGbG9hdEFycmF5X1VubWFyc2hhbEpTT04odCAqdGVzdGluZy5UKSB7Cgl0ZXN0cyA6PSBbXXN0cnVjdCB7CgkJbmFtZSAgICBzdHJpbmcKCQluICAgICAgIEZsb2F0QXJyYXkKCQlleHAgICAgIEZsb2F0QXJyYXkKCQlzb3VyY2UgIFtdYnl0ZQoJCXdhbnRFcnIgYm9vbAoJfXsKCQl7CgkJCW5hbWU6ICAgICJ2YWxpZCIsCgkJCXNvdXJjZTogIFtdYnl0ZShgWzEuMjMsIDIuMzQsIDMuNDVdYCksCgkJCWV4cDogICAgIEZsb2F0QXJyYXl7MS4yMywgMi4zNCwgMy40NX0sCgkJCXdhbnRFcnI6IGZhbHNlLAoJCX0sCgkJewoJCQluYW1lOiAgICAiaW52YWxpZCAxIiwKCQkJc291cmNlOiAgW11ieXRlKGB7MS4yMywgMi4zNCwgMy40NX1gKSwKCQkJd2FudEVycjogdHJ1ZSwKCQl9LAoJCXsKCQkJbmFtZTogICAgImludmFsaWQgMiIsCgkJCXNvdXJjZTogIFtdYnl0ZShgWzEuMjMsIDIuMzQsICJjIl1gKSwKCQkJd2FudEVycjogdHJ1ZSwKCQl9LAoJCXsKCQkJbmFtZTogICAgImVtcHR5IiwKCQkJc291cmNlOiAgW11ieXRle30sCgkJCXdhbnRFcnI6IHRydWUsCgkJfSwKCX0KCWZvciBfLCB0dCA6PSByYW5nZSB0ZXN0cyB7CgkJdC5SdW4odHQubmFtZSwgZnVuYyh0ICp0ZXN0aW5nLlQpIHsKCQkJaWYgZXJyIDo9IHR0Lm4uVW5tYXJzaGFsSlNPTih0dC5zb3VyY2UpOyAoZXJyICE9IG5pbCkgIT0gdHQud2FudEVyciB7CgkJCQl0LkVycm9yZigiRmxvYXRBcnJheS5Vbm1hcnNoYWxKU09OKCkgZXJyb3IgPSAldiwgd2FudEVyciAldiIsIGVyciwgdHQud2FudEVycikKCQkJfQoJCQlpZiAhdHQud2FudEVyciAmJiAhcmVmbGVjdC5EZWVwRXF1YWwodHQuZXhwLCB0dC5uKSB7CgkJCQl0LkVycm9yZigiRmxvYXRBcnJheS5Vbm1hcnNoYWxKU09OKCkgZXhwOiAldiBnb3QgJXYiLCB0dC5leHAsIHR0Lm4pCgkJCX0KCQl9KQoJfQp9CgpmdW5jIFRlc3RGbG9hdEFycmF5X1ZhbHVlKHQgKnRlc3RpbmcuVCkgewoJdGVzdHMgOj0gW11zdHJ1Y3QgewoJCW5hbWUgICAgc3RyaW5nCgkJbiAgICAgICBGbG9hdEFycmF5CgkJd2FudCAgICBkcml2ZXIuVmFsdWUKCQl3YW50RXJyIGJvb2wKCX17CgkJewoJCQluYW1lOiAgICAidmFsaWQiLAoJCQluOiAgICAgICBGbG9hdEFycmF5ezEuMjMsIDIuMzQsIDMuNDV9LAoJCQl3YW50OiAgICBkcml2ZXIuVmFsdWUoInsxLjIzLDIuMzQsMy40NX0iKSwKCQkJd2FudEVycjogZmFsc2UsCgkJfSwKCX0KCWZvciBfLCB0dCA6PSByYW5nZSB0ZXN0cyB7CgkJdC5SdW4odHQubmFtZSwgZnVuYyh0ICp0ZXN0aW5nLlQpIHsKCQkJZ290LCBlcnIgOj0gdHQubi5WYWx1ZSgpCgkJCWlmIChlcnIgIT0gbmlsKSAhPSB0dC53YW50RXJyIHsKCQkJCXQuRXJyb3JmKCJGbG9hdEFycmF5LlZhbHVlKCkgZXJyb3IgPSAldiwgd2FudEVyciAldiIsIGVyciwgdHQud2FudEVycikKCQkJCXJldHVybgoJCQl9CgkJCWlmICFyZWZsZWN0LkRlZXBFcXVhbChnb3QsIHR0LndhbnQpIHsKCQkJCXQuRXJyb3JmKCJGbG9hdEFycmF5LlZhbHVlKCkgPSAldiwgd2FudCAldiIsIGdvdCwgdHQud2FudCkKCQkJfQoJCX0pCgl9Cn0KCmZ1bmMgVGVzdEZsb2F0QXJyYXlfU2Nhbih0ICp0ZXN0aW5nLlQpIHsKCXRlc3RzIDo9IFtdc3RydWN0IHsKCQluYW1lICAgIHN0cmluZwoJCXdhbnRFcnIgYm9vbAoJCXNyYyAgICAgaW50ZXJmYWNle30KCQlleHAgICAgIEZsb2F0QXJyYXkKCX17CgkJewoJCQluYW1lOiAgICAidmFsaWQiLAoJCQlzcmM6ICAgICBbXWJ5dGUoYHsxLjIzLCAyLjM0LCAzLjQ1fWApLAoJCQlleHA6ICAgICBGbG9hdEFycmF5ezEuMjMsIDIuMzQsIDMuNDV9LAoJCQl3YW50RXJyOiBmYWxzZSwKCQl9LAoJCXsKCQkJbmFtZTogICAgIm5pbCB2YWx1ZSIsCgkJCXNyYzogICAgIG5pbCwKCQkJZXhwOiAgICAgRmxvYXRBcnJheXt9LAoJCQl3YW50RXJyOiBmYWxzZSwKCQl9LAoJfQoJZm9yIF8sIHR0IDo9IHJhbmdlIHRlc3RzIHsKCQl0LlJ1bih0dC5uYW1lLCBmdW5jKHQgKnRlc3RpbmcuVCkgewoJCQlzYSA6PSAmRmxvYXRBcnJheXt9CgkJCWlmIGVyciA6PSBzYS5TY2FuKHR0LnNyYyk7IChlcnIgIT0gbmlsKSAhPSB0dC53YW50RXJyIHsKCQkJCXQuRXJyb3JmKCJGbG9hdEFycmF5LlNjYW4oKSBlcnJvciA9ICV2LCB3YW50RXJyICV2IiwgZXJyLCB0dC53YW50RXJyKQoJCQl9CgkJCWlmIHR0LnNyYyA9PSBuaWwgJiYgbGVuKCpzYSkgPiAwIHsKCQkJCXQuRXJyb3JmKCJzaG91bGQgYnkgZW1wdHkiKQoJCQl9CgkJCWlmIHNhID09IG5pbCAmJiB0dC5zcmMgIT0gbmlsIHsKCQkJCXQuRXJyb3JmKCJyZWNlaXZlZCBudWxsIikKCQkJfQoJCQlpZiAhcmVmbGVjdC5EZWVwRXF1YWwodHQuZXhwLCAqc2EpIHsKCQkJCXQuRXJyb3JmKCJGbG9hdEFycmF5LlNjYW4oKSBleHA6ICVbMV12ICglWzFdVCkgZ290OiAlWzJddiAoJVsyXVQpIiwgdHQuZXhwLCAqc2EpCgkJCX0KCQl9KQoJfQp9CgpmdW5jIFRlc3RGbG9hdEFycmF5X01hcnNoYWxKU09OKHQgKnRlc3RpbmcuVCkgewoJdGVzdHMgOj0gW11zdHJ1Y3QgewoJCW5hbWUgICAgc3RyaW5nCgkJbiAgICAgICBGbG9hdEFycmF5CgkJd2FudCAgICBbXWJ5dGUKCQl3YW50RXJyIGJvb2wKCX17CgkJewoJCQluYW1lOiAgICAidmFsaWQiLAoJCQluOiAgICAgICBGbG9hdEFycmF5ezEuMjMsIDIuMzQsIDMuNDV9LAoJCQl3YW50OiAgICBbXWJ5dGUoYFsxLjIzLDIuMzQsMy40NV1gKSwKCQkJd2FudEVycjogZmFsc2UsCgkJfSwKCQl7CgkJCW5hbWU6ICAgICJ2YWxpZCBudWxsIiwKCQkJbjogICAgICAgbmlsLAoJCQl3YW50OiAgICBbXWJ5dGUoYG51bGxgKSwKCQkJd2FudEVycjogZmFsc2UsCgkJfSwKCX0KCWZvciBfLCB0dCA6PSByYW5nZSB0ZXN0cyB7CgkJdC5SdW4odHQubmFtZSwgZnVuYyh0ICp0ZXN0aW5nLlQpIHsKCQkJZ290LCBlcnIgOj0gdHQubi5NYXJzaGFsSlNPTigpCgkJCWlmIChlcnIgIT0gbmlsKSAhPSB0dC53YW50RXJyIHsKCQkJCXQuRXJyb3JmKCJGbG9hdEFycmF5Lk1hcnNoYWxKU09OKCkgZXJyb3IgPSAldiwgd2FudEVyciAldiIsIGVyciwgdHQud2FudEVycikKCQkJCXJldHVybgoJCQl9CgkJCWlmICFyZWZsZWN0LkRlZXBFcXVhbChnb3QsIHR0LndhbnQpIHsKCQkJCXQuRXJyb3JmKCJGbG9hdEFycmF5Lk1hcnNoYWxKU09OKCkgPSAldiwgd2FudCAldiIsIGdvdCwgdHQud2FudCkKCQkJfQoJCX0pCgl9Cn0KCmZ1bmMgVGVzdFRvTnVsbEJvb2wodCAqdGVzdGluZy5UKSB7CgliIDo9IHRydWUKCWJiIDo9IFRvTnVsbEJvb2woJmIpCglpZiAhYmIuVmFsaWQgewoJCXQuRXJyb3JmKCJleHBlY3RlZCB2YWxpZCwgZ290ICV2IiwgYmIuVmFsaWQpCgl9CglpZiAhYmIuQm9vbCB7CgkJdC5FcnJvcmYoImV4cGVjdGVkIHRydWUsIGdvdCAldiIsIGJiLkJvb2wpCgl9CgoJdmFyIGIyICpib29sCgliYjIgOj0gVG9OdWxsQm9vbChiMikKCWlmIGJiMi5WYWxpZCB7CgkJdC5FcnJvcmYoImV4cGVjdGVkIG5vdCB2YWxpZCwgZ290ICV2IiwgYmIyLlZhbGlkKQoJfQoJaWYgYmIyLkJvb2wgewoJCXQuRXJyb3JmKCJleHBlY3RlZCBmYWxzZSwgZ290ICV2IiwgYmIyLkJvb2wpCgl9Cn0KCmZ1bmMgVGVzdFRvTnVsbEludDY0KHQgKnRlc3RpbmcuVCkgewoJYiA6PSBpbnQ2NCgxMjMpCgliYiA6PSBUb051bGxJbnQ2NCgmYikKCWlmICFiYi5WYWxpZCB7CgkJdC5FcnJvcmYoImV4cGVjdGVkIHZhbGlkLCBnb3QgJXYiLCBiYi5WYWxpZCkKCX0KCWlmIGJiLkludDY0ICE9IDEyMyB7CgkJdC5FcnJvcmYoImV4cGVjdGVkIDEyMywgZ290ICV2IiwgYmIuSW50NjQpCgl9CgoJdmFyIGIyICppbnQ2NAoJYmIyIDo9IFRvTnVsbEludDY0KGIyKQoJaWYgYmIyLlZhbGlkIHsKCQl0LkVycm9yZigiZXhwZWN0ZWQgbm90IHZhbGlkLCBnb3QgJXYiLCBiYjIuVmFsaWQpCgl9CglpZiBiYjIuSW50NjQgIT0gMCB7CgkJdC5FcnJvcmYoImV4cGVjdGVkIDAsIGdvdCAldiIsIGJiMi5JbnQ2NCkKCX0KfQoKZnVuYyBUZXN0VG9OdWxsRmxvYXQ2NCh0ICp0ZXN0aW5nLlQpIHsKCWIgOj0gZmxvYXQ2NCgxMjMuMTIzKQoJYmIgOj0gVG9OdWxsRmxvYXQ2NCgmYikKCWlmICFiYi5WYWxpZCB7CgkJdC5FcnJvcmYoImV4cGVjdGVkIHZhbGlkLCBnb3QgJXYiLCBiYi5WYWxpZCkKCX0KCWlmIGJiLkZsb2F0NjQgIT0gMTIzLjEyMyB7CgkJdC5FcnJvcmYoImV4cGVjdGVkIDEyMy4xMjMsIGdvdCAldiIsIGJiLkZsb2F0NjQpCgl9CgoJdmFyIGIyICpmbG9hdDY0CgliYjIgOj0gVG9OdWxsRmxvYXQ2NChiMikKCWlmIGJiMi5WYWxpZCB7CgkJdC5FcnJvcmYoImV4cGVjdGVkIG5vdCB2YWxpZCwgZ290ICV2IiwgYmIyLlZhbGlkKQoJfQoJaWYgYmIyLkZsb2F0NjQgIT0gMCB7CgkJdC5FcnJvcmYoImV4cGVjdGVkIDAsIGdvdCAldiIsIGJiMi5GbG9hdDY0KQoJfQp9CgpmdW5jIFRlc3RUb051bGxTdHJpbmcodCAqdGVzdGluZy5UKSB7CgliIDo9ICJxd2UiCgliYiA6PSBUb051bGxTdHJpbmcoJmIpCglpZiAhYmIuVmFsaWQgewoJCXQuRXJyb3JmKCJleHBlY3RlZCB2YWxpZCwgZ290ICV2IiwgYmIuVmFsaWQpCgl9CglpZiBiYi5TdHJpbmcgIT0gInF3ZSIgewoJCXQuRXJyb3JmKCJleHBlY3RlZCBxd2UsIGdvdCAldiIsIGJiLlN0cmluZykKCX0KCgl2YXIgYjIgKnN0cmluZwoJYmIyIDo9IFRvTnVsbFN0cmluZyhiMikKCWlmIGJiMi5WYWxpZCB7CgkJdC5FcnJvcmYoImV4cGVjdGVkIG5vdCB2YWxpZCwgZ290ICV2IiwgYmIyLlZhbGlkKQoJfQoJaWYgYmIyLlN0cmluZyAhPSAiIiB7CgkJdC5FcnJvcmYoImV4cGVjdGVkIDxlbXB0eSBzdHJpbmc+LCBnb3QgJXYiLCBiYjIuU3RyaW5nKQoJfQp9CgpmdW5jIFRlc3RUb051bGxUaW1lKHQgKnRlc3RpbmcuVCkgewoJdGltIDo9IHRpbWUuTm93KCkKCWJiIDo9IFRvTnVsbFRpbWUodGltKQoJaWYgIWJiLlZhbGlkIHsKCQl0LkVycm9yZigiZXhwZWN0ZWQgdmFsaWQsIGdvdCAldiIsIGJiLlZhbGlkKQoJfQoJaWYgYmIuVGltZSAhPSB0aW0gewoJCXQuRXJyb3JmKCJleHBlY3RlZCAldiwgZ290ICV2IiwgdGltLCBiYi5UaW1lKQoJfQoKCXRpbSA9IHRpbWUuVGltZXt9CgliYiA9IFRvTnVsbFRpbWUodGltKQoJaWYgYmIuVmFsaWQgewoJCXQuRXJyb3JmKCJleHBlY3RlZCBpbnZhbGlkLCBnb3QgJXYiLCBiYi5WYWxpZCkKCX0KCWlmIGJiLlRpbWUgIT0gdGltIHsKCQl0LkVycm9yZigiZXhwZWN0ZWQgJXYsIGdvdCAldiIsIHRpbSwgYmIuVGltZSkKCX0KfQp7e2VuZH19Cg==\"")
	}
